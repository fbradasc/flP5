// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "flP5.h"
/* Copyright (C) 2003  Francesco Bradascio <fbradasc@yahoo.it>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
static bool load_item=false;
Fl_Choice *ch_pinNumber[9];
Fl_Check_Button *tb_pinInvert[9];
Fl_Box *bx_pinName[9];
Fl_Input *tx_devParam[LAST_PARAM];
Fl_Input *tx_propDelay[LAST_PROP_DLY];
#include "pixmaps/mini_folder.xpm"
static Fl_Pixmap *mini_folder = new Fl_Pixmap(mini_folder_xpm);
#include "pixmaps/mini_device.xpm"
static Fl_Pixmap *mini_device = new Fl_Pixmap(mini_device_xpm);
#include "pixmaps/mini_programmer.xpm"
static Fl_Pixmap *mini_programmer = new Fl_Pixmap(mini_programmer_xpm);

Fl_Double_Window *flP5=(Fl_Double_Window *)0;

Fl_Group *t_devcfg=(Fl_Group *)0;

static void cb_(Fl_RaiseButton*, void*) {
  deviceConfigCB(CFG_IMPORT);
ch_devices->do_callback();
g_devcfg->deactivate();
g_devgencfg->deactivate();
g_devcfgwords->deactivate();
g_devmiscellanea->deactivate();
g_devCfgNewEditCopy->activate();
t_devcfg->redraw();
}

#include <FL/Fl_Pixmap.H>
static const char *idata_cfgopen[] = {
"22 22 205 2",
"  \tc None",
". \tc #000000",
"+ \tc #26190E",
"@ \tc #271C11",
"# \tc #271A0F",
"$ \tc #3B2714",
"% \tc #F4AD6A",
"& \tc #FEC280",
"* \tc #FEC27F",
"= \tc #FDB773",
"- \tc #E5A566",
"; \tc #FECB93",
"> \tc #FED39A",
", \tc #FECE93",
"\' \tc #FEC88B",
") \tc #F6B675",
"! \tc #150F09",
"~ \tc #FEC385",
"{ \tc #FED59C",
"] \tc #FECE92",
"^ \tc #FCB269",
"/ \tc #F9AC62",
"( \tc #F8AC62",
"_ \tc #3D2815",
": \tc #FEC888",
"< \tc #FED199",
"[ \tc #FEC282",
"} \tc #EEA059",
"| \tc #80532C",
"1 \tc #4B3119",
"2 \tc #4A3019",
"3 \tc #452C17",
"4 \tc #402915",
"5 \tc #3C2714",
"6 \tc #372312",
"7 \tc #322011",
"8 \tc #2E1D0F",
"9 \tc #291A0E",
"0 \tc #25170C",
"a \tc #46301B",
"b \tc #FECA8F",
"c \tc #FDB56E",
"d \tc #A86F3C",
"e \tc #53504D",
"f \tc #FFFFFF",
"g \tc #F7F7F7",
"h \tc #F5F5F5",
"i \tc #F1F1F1",
"j \tc #EAEAEA",
"k \tc #E3E3E3",
"l \tc #DDDDDC",
"m \tc #D6D6D5",
"n \tc #D0D0CE",
"o \tc #C8C8C7",
"p \tc #C2C2C1",
"q \tc #BBBBBA",
"r \tc #B4B4B3",
"s \tc #AFAFAF",
"t \tc #AEAEAE",
"u \tc #343434",
"v \tc #563D25",
"w \tc #FEC685",
"x \tc #FEC182",
"y \tc #F2A55C",
"z \tc #E7E7E7",
"A \tc #E4E4E4",
"B \tc #E1E1E1",
"C \tc #D9D9D8",
"D \tc #D1D1D0",
"E \tc #C7C7C6",
"F \tc #C0C0BF",
"G \tc #B8B8B7",
"H \tc #B0B0AF",
"I \tc #A7A7A6",
"J \tc #9E9E9D",
"K \tc #959595",
"L \tc #8B8B89",
"M \tc #818180",
"N \tc #5E5E5D",
"O \tc #191919",
"P \tc #5F452A",
"Q \tc #FEC283",
"R \tc #FBB269",
"S \tc #C38954",
"T \tc #58534E",
"U \tc #F2F2F2",
"V \tc #E2E2E1",
"W \tc #EAEAE9",
"X \tc #EBEBEA",
"Y \tc #DDDDDB",
"Z \tc #D3D3D1",
"` \tc #CACAC9",
" .\tc #C1C1C0",
"..\tc #AFAFAD",
"+.\tc #A5A5A3",
"@.\tc #9B9B9A",
"#.\tc #8E8E8D",
"$.\tc #7B7B79",
"%.\tc #363635",
"&.\tc #785A3A",
"*.\tc #FEB972",
"=.\tc #EA9E58",
"-.\tc #6F4F2F",
";.\tc #8F8E8C",
">.\tc #D4D4D3",
",.\tc #E1E1E0",
"\'.\tc #E9E9E8",
").\tc #E7E7E6",
"!.\tc #E5E5E3",
"~.\tc #DEDEDD",
"{.\tc #D5D5D4",
"].\tc #CDCDCC",
"^.\tc #C4C4C2",
"/.\tc #BABAB9",
"(.\tc #B1B1B0",
"_.\tc #9E9E9C",
":.\tc #8C8C8B",
"<.\tc #6D6D6C",
"[.\tc #694D31",
"}.\tc #FEB469",
"|.\tc #BE8550",
"1.\tc #5D564F",
"2.\tc #E4E4E3",
"3.\tc #E0E0DF",
"4.\tc #E5E5E4",
"5.\tc #D8D8D6",
"6.\tc #CFCFCE",
"7.\tc #C0C0BE",
"8.\tc #B7B7B6",
"9.\tc #AEAEAD",
"0.\tc #A4A4A3",
"a.\tc #979796",
"b.\tc #282827",
"c.\tc #594027",
"d.\tc #F3A45B",
"e.\tc #684A2D",
"f.\tc #888888",
"g.\tc #DCDCDB",
"h.\tc #D0D0CF",
"i.\tc #C9C9C8",
"j.\tc #B9B9B8",
"k.\tc #B2B2B1",
"l.\tc #A9A9A8",
"m.\tc #A0A09E",
"n.\tc #90908F",
"o.\tc #5E5E5C",
"p.\tc #151514",
"q.\tc #46301A",
"r.\tc #B57740",
"s.\tc #55504C",
"t.\tc #CACACA",
"u.\tc #D2D2D1",
"v.\tc #CDCDCB",
"w.\tc #B3B3B2",
"x.\tc #ACACAB",
"y.\tc #A3A3A2",
"z.\tc #9A9A98",
"A.\tc #818181",
"B.\tc #442C17",
"C.\tc #919191",
"D.\tc #BDBDBB",
"E.\tc #C3C3C1",
"F.\tc #C7C7C5",
"G.\tc #C8C8C6",
"H.\tc #C6C6C5",
"I.\tc #C3C3C2",
"J.\tc #BFBFBE",
"K.\tc #B9B9B7",
"L.\tc #A5A5A4",
"M.\tc #9D9D9B",
"N.\tc #8D8D8C",
"O.\tc #676766",
"P.\tc #0B0704",
"Q.\tc #6D6864",
"R.\tc #ADADAC",
"S.\tc #B6B6B5",
"T.\tc #A9A9A7",
"U.\tc #A2A2A1",
"V.\tc #9D9D9C",
"W.\tc #919190",
"X.\tc #7F7F7E",
"Y.\tc #2C2C2B",
"Z.\tc #171716",
"`.\tc #9A9A9A",
" +\tc #999998",
".+\tc #9C9C9B",
"++\tc #9F9F9D",
"@+\tc #9A9A99",
"#+\tc #939393",
"$+\tc #8B8B8A",
"%+\tc #8A8A88",
"&+\tc #7D7D7C",
"*+\tc #5A5A58",
"=+\tc #141413",
"-+\tc #131313",
";+\tc #323232",
">+\tc #2B2B2B",
",+\tc #2D2D2C",
"\'+\tc #2D2D2D",
")+\tc #2A2A2A",
"!+\tc #282828",
"~+\tc #272727",
"{+\tc #262625",
"]+\tc #252524",
"^+\tc #101010",
"                  . . . . .                 ",
"              . . . . . . . . .   .         ",
"            . .             . . . .         ",
"          .                   . . .         ",
"                            . . . .         ",
"    + @ @ #                                 ",
"  $ % & * = $                               ",
"$ - ; > , \' ) $ ! ! ! ! ! ! ! !             ",
"$ ~ { ] & ^ / ( ( ( ( ( ( ( ( ( $           ",
"_ : < [ } | 1 2 2 2 3 4 5 6 7 8 9 0 . . . . ",
"a : b c d e f g h i j k l m n o p q r s t u ",
"v w x y 2 o z A B C D E F G H I J K L M N O ",
"P Q R S T U V W X k Y Z `  .G ..+.@.#.$.%.  ",
"&.*.=.-.;.>.,.\'.).!.~.{.].^./.(.I _.:.<..   ",
"[.}.|.1.2.{.3.4.V l 5.6.o 7.8.9.0.a.M b.    ",
"c.d.e.f.` >.l g.C {.h.i.p j.k.l.m.n.o.p.    ",
"q.r.s.l t.6.>.u.h.v.o  .q w.x.y.z.A.%..     ",
"$ B.C.8.D.E.F.G.H.I.J.K.w.x.L.M.N.O..       ",
"P.Q.o R.w.S.K.q /.S.w.9.T.U.V.W.X.Y.        ",
"Z.C.`. +.+++++++M.@+a.#+n.$+%+&+*+=+        ",
"-+;+>+Y.,+\'+\'+\'+,+Y.>+)+!+~+{+]+^+          ",
"                                            "
};
static Fl_Pixmap image_cfgopen(idata_cfgopen);

static const char *idata_cfgopen1[] = {
"22 22 28 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #FFFFA9",
"#\tc #FFFF00",
"$\tc #FFFF68",
"%\tc #FFFFE1",
"&\tc #FFFFFA",
"*\tc #3B2714",
"=\tc #00005F",
"-\tc #404033",
";\tc #FF9E00",
">\tc #AAAAB5",
",\tc #FFFFD7",
"\'\tc #333326",
")\tc #FAFAFF",
"!\tc #EEEEFA",
"~\tc #7B7B87",
"{\tc #DBDBF2",
"]\tc #FFFFE4",
"^\tc #B5B5C0",
"/\tc #B3B3B2",
"(\tc #FF0000",
"_\tc #00FFFF",
":\tc #FFFFB5",
"<\tc #FFFFC3",
"[\tc #F6F6FF",
"}\tc #F8F8FF",
"         .....        ",
"       ......... .    ",
"      ..      ....    ",
"     .         ...    ",
"              ....    ",
"  ....                ",
" .++++.               ",
".++++++.........      ",
".+++++++++++++++@     ",
".+++#.................",
".+++..++++++++++++++++",
".++$.++.............+.",
".++#.+%+++++++++&+++. ",
"=+#..+-+++++++++++++. ",
".+;.+++++++>+,+++++.  ",
".+..+\'+++)+!+~+{+++.  ",
".+.++++++]+^+/++++..  ",
"(._+.:+++++<+[++++.   ",
".++++++++++++++++.    ",
".++++++++++++++++.    ",
".}...............     ",
"                      "
};
static Fl_Pixmap image_cfgopen1(idata_cfgopen1);

Fl_Group *g_devCfgNewEditCopy=(Fl_Group *)0;

static void cb_1(Fl_RaiseButton*, void*) {
  g_devcfg->activate();
g_devgencfg->activate();
g_devcfgwords->activate();
g_devmiscellanea->activate();
g_devCfgNewEditCopy->deactivate();
deviceConfigCB(CFG_NEW);
}

static const char *idata_filenew[] = {
"22 22 140 2",
"  \tc None",
". \tc #535353",
"+ \tc #4A4A4A",
"@ \tc #424242",
"# \tc #3A3A3A",
"$ \tc #313131",
"% \tc #292929",
"& \tc #212121",
"* \tc #181818",
"= \tc #101010",
"- \tc #080808",
"; \tc #000000",
"> \tc #4C4C4C",
", \tc #DEDEDE",
"\' \tc #D6D6D6",
") \tc #C6C6C6",
"! \tc #B4B4B4",
"~ \tc #989898",
"{ \tc #464646",
"] \tc #FFFFFF",
"^ \tc #ECECEC",
"/ \tc #E1E1E1",
"( \tc #141414",
"_ \tc #C9C9C9",
": \tc #3F3F3F",
"< \tc #393939",
"[ \tc #3E3E3E",
"} \tc #E0E0E0",
"| \tc #333333",
"1 \tc #232300",
"2 \tc #FDFDFD",
"3 \tc #F0EEEC",
"4 \tc #CFCBC4",
"5 \tc #B8B1A9",
"6 \tc #857F7A",
"7 \tc #F6F611",
"8 \tc #FEFDFC",
"9 \tc #FDFAF7",
"0 \tc #E4E0DB",
"a \tc #D0C8C1",
"b \tc #A09B97",
"c \tc #DBDA4D",
"d \tc #FFFF00",
"e \tc #FEFDFB",
"f \tc #FCF8F5",
"g \tc #FBF3EE",
"h \tc #F9F0E8",
"i \tc #EADFD5",
"j \tc #BBB2AB",
"k \tc #494900",
"l \tc #FEFCFB",
"m \tc #FAF4EE",
"n \tc #F9EFE7",
"o \tc #F7EBE1",
"p \tc #F5E6D9",
"q \tc #C6B8AC",
"r \tc #AAA538",
"s \tc #FFFFDA",
"t \tc #FFFEFE",
"u \tc #FDFCFA",
"v \tc #FBF7F3",
"w \tc #FAF3ED",
"x \tc #F8EEE6",
"y \tc #F6EADF",
"z \tc #F3E1D2",
"A \tc #D2C0B1",
"B \tc #FDFBFA",
"C \tc #FCF7F3",
"D \tc #FAF2EC",
"E \tc #F7EADF",
"F \tc #F5E6D8",
"G \tc #F4E1D2",
"H \tc #F2DDCB",
"I \tc #D0BCAB",
"J \tc #FFFFC3",
"K \tc #FFFFDD",
"L \tc #FAF3EC",
"M \tc #F8EDE4",
"N \tc #F7EADE",
"O \tc #F5E5D8",
"P \tc #F3E1D1",
"Q \tc #F0D8C3",
"R \tc #CFB8A5",
"S \tc #FBF6F2",
"T \tc #FDFAF8",
"U \tc #FBF6F1",
"V \tc #FAF2EB",
"W \tc #F8EEE4",
"X \tc #F6E8DD",
"Y \tc #F5E5D7",
"Z \tc #F3E0D0",
"` \tc #F1DCC9",
" .\tc #EFD8C3",
"..\tc #EED3BC",
"+.\tc #CEB49F",
"@.\tc #F6E9DD",
"#.\tc #F4E4D6",
"$.\tc #EFD8C2",
"%.\tc #ECCEB5",
"&.\tc #CCB099",
"*.\tc #F6E8DC",
"=.\tc #F2DFCE",
"-.\tc #F1DBC8",
";.\tc #EFD6C1",
">.\tc #EED2BB",
",.\tc #ECCEB4",
"\'.\tc #EAC9AD",
").\tc #CBAC93",
"!.\tc #FBF5F0",
"~.\tc #F9F0E9",
"{.\tc #F4E3D5",
"].\tc #F2E0CF",
"^.\tc #F1DAC7",
"/.\tc #EFD7C1",
"(.\tc #EED2BA",
"_.\tc #E9C5A6",
":.\tc #C9A88D",
"<.\tc #F6E8DB",
"[.\tc #F4E3D4",
"}.\tc #F2DECE",
"|.\tc #F1DBC7",
"1.\tc #EFD6C0",
"2.\tc #ECCDB3",
"3.\tc #EAC9AC",
"4.\tc #E8C5A6",
"5.\tc #E7C2A2",
"6.\tc #C8A487",
"7.\tc #D8D0CA",
"8.\tc #D7CCC4",
"9.\tc #D6C8BE",
"0.\tc #D4C4B8",
"a.\tc #D2C0B2",
"b.\tc #D1BDAC",
"c.\tc #CFB8A6",
"d.\tc #CEB5A0",
"e.\tc #CDB09A",
"f.\tc #CBAD94",
"g.\tc #C9A88E",
"h.\tc #C8A488",
"i.\tc #C7A081",
"                                            ",
"            . + @ # $ % & * = - ; ;         ",
"            > , , , , , , \' ) ! ; ~ ;       ",
"            { , ] ] ] ] ] ] ^ / ( _ ~ ;     ",
"            : , ] ] ] ] ] ] ] ^ % ] _ ~ ;   ",
"            < , ] ] ] ] ] ] ] ] [ } ] _ ~ ; ",
"            | , ] ] ] ] ] ] ] ] . [ % ( ; ; ",
"            1 , ] ] ] ] ] ] ] ] 2 3 4 5 6 ; ",
"    1     1 7 1 ] ] 1 ] ] ] ] ] 8 9 0 a b ; ",
"  1 c 1   1 d 1 ] 1 c 1 ] ] ] e f g h i j ; ",
"    1 d k c d c k d 1 ] ] ] l f m n o p q ; ",
"      k d r s r d k ] ] t u v w x y p z A ; ",
"  1 1 c r s s s r c 1 1 B C D x E F G H I ; ",
"1 7 d d s J K J s d d 7 1 L M N O P H Q R ; ",
"  1 1 c r s s s r c 1 1 S L M N O P H Q R ; ",
"      k d r s r d k T U V W X Y Z `  ...+.; ",
"    1 d k c d c k d 1 V M @.#.Z ` $...%.&.; ",
"  1 c 1   1 d 1 9 1 c 1 *.#.=.-.;.>.,.\'.).; ",
"    1     1 7 1 !.~.1 *.{.].^./.(.,.\'._.:.; ",
"            1 , h o <.[.}.|.1.(.2.3.4.5.6.; ",
"            ; 7.7.8.9.0.a.b.c.d.e.f.g.h.i.; ",
"            ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; "
};
static Fl_Pixmap image_filenew(idata_filenew);

static const char *idata_filenew1[] = {
"22 22 48 1",
" \tc None",
".\tc #FFFFFF",
"+\tc #000000",
"@\tc #FFFF00",
"#\tc #CBFFFF",
"$\tc #E3ECFF",
"%\tc #E1FFFF",
"&\tc #FFEFE7",
"*\tc #F1FFFF",
"=\tc #B1EBCE",
"-\tc #FAFFED",
";\tc #D3A4C1",
">\tc #9FC595",
",\tc #E9F2E5",
"\'\tc #FFB4E0",
")\tc #DFEEFF",
"!\tc #FFF6EB",
"~\tc #F5FFB3",
"{\tc #FFC8FF",
"]\tc #232300",
"^\tc #950000",
"/\tc #DE8700",
"(\tc #B71300",
"_\tc #843400",
":\tc #CD5505",
"<\tc #FFFFD8",
"[\tc #D16CAC",
"}\tc #FFFFF0",
"|\tc #F3A2B7",
"1\tc #D8C37F",
"2\tc #B1F1CF",
"3\tc #F6FFF6",
"4\tc #CFCBCA",
"5\tc #E5FFE2",
"6\tc #CAFFB6",
"7\tc #FFECFA",
"8\tc #E8FDFF",
"9\tc #C1A16B",
"0\tc #FDDBC8",
"a\tc #CA7383",
"b\tc #FFA1C7",
"c\tc #ECCE9B",
"d\tc #CDFFFF",
"e\tc #FF7789",
"f\tc #D6FFE6",
"g\tc #FFD2A1",
"h\tc #F8FFE6",
"i\tc #D19894",
"                      ",
"      .+++++++++++    ",
"      +.........+.+   ",
"      +.........+..+  ",
"      +.........+...+ ",
"      +.........+....+",
"      +.........++++++",
"      +..............+",
"  +  +@+..+.......#..+",
" +.+ +@+.+@+....$....+",
"  +@+.@.+@+.....%&...+",
"   +@+.+@+...*=-;>,..+",
" ++.+...+.++..\')!~{..+",
"].@@.....@@@+.^/(_:..+",
" ++.+...+.++.........+",
"   +@+.+@+...<[}|12..+",
"  +@+.@.+@+..34.567..+",
" +.+ +@+.+@+.890abc..+",
"  +  +@+..+..defghi..+",
"      +..............+",
"      +..............+",
"      ++++++++++++++++"
};
static Fl_Pixmap image_filenew1(idata_filenew1);

static void cb_2(Fl_RaiseButton*, void*) {
  g_devcfg->activate();
g_devgencfg->activate();
g_devcfgwords->activate();
g_devmiscellanea->activate();
g_devCfgNewEditCopy->deactivate();
deviceConfigCB(CFG_EDIT);
}

static const char *idata_edit[] = {
"22 22 187 2",
"  \tc None",
". \tc #868686",
"+ \tc #828282",
"@ \tc #7E7E7E",
"# \tc #7B7B7B",
"$ \tc #777777",
"% \tc #747474",
"& \tc #707070",
"* \tc #6D6D6D",
"= \tc #696969",
"- \tc #666666",
"; \tc #626262",
"> \tc #5F5F5F",
", \tc #5B5B5B",
"\' \tc #585858",
") \tc #545454",
"! \tc #505050",
"~ \tc #8E522A",
"{ \tc #FAAE5E",
"] \tc #C9C9C9",
"^ \tc #C6C1B6",
"/ \tc #4F4F4F",
"( \tc #FEEAAE",
"_ \tc #838383",
": \tc #FEFEFE",
"< \tc #D6D6D6",
"[ \tc #C3BEB0",
"} \tc #E29A56",
"| \tc #FE9632",
"1 \tc #808080",
"2 \tc #FCFCFC",
"3 \tc #8E5E36",
"4 \tc #FEDABA",
"5 \tc #FE8A06",
"6 \tc #92622E",
"7 \tc #FE8206",
"8 \tc #FE8602",
"9 \tc #D1D1D1",
"0 \tc #9A6636",
"a \tc #FECEA6",
"b \tc #FE8A02",
"c \tc #787878",
"d \tc #BA7A3E",
"e \tc #FA8606",
"f \tc #F68606",
"g \tc #D66A06",
"h \tc #767676",
"i \tc #C28246",
"j \tc #DA924E",
"k \tc #FA820A",
"l \tc #CA6206",
"m \tc #A24E06",
"n \tc #737373",
"o \tc #F6B696",
"p \tc #EEB276",
"q \tc #FE8606",
"r \tc #CE6602",
"s \tc #9E4A06",
"t \tc #0E0E0E",
"u \tc #D5D5D5",
"v \tc #FEDEBE",
"w \tc #FAE6D2",
"x \tc #EA9A6E",
"y \tc #6E6E6E",
"z \tc #D3D0D0",
"A \tc #FEF2E2",
"B \tc #F6C6AA",
"C \tc #EA8E5A",
"D \tc #F27E0E",
"E \tc #9A4606",
"F \tc #6B6B6B",
"G \tc #F9F5F1",
"H \tc #FEE6CA",
"I \tc #DA6E3E",
"J \tc #E26A2E",
"K \tc #C25E12",
"L \tc #686868",
"M \tc #FEFEFA",
"N \tc #FAFAF6",
"O \tc #F7F3EB",
"P \tc #FEEAD2",
"Q \tc #CA825E",
"R \tc #AE6232",
"S \tc #864A1E",
"T \tc #151515",
"U \tc #D6D6D3",
"V \tc #D3CFCF",
"W \tc #D2CEC8",
"X \tc #FEE2C6",
"Y \tc #F2B296",
"Z \tc #965A3A",
"` \tc #5A4E36",
" .\tc #776A56",
"..\tc #161616",
"+.\tc #636363",
"@.\tc #FAFAFA",
"#.\tc #FAF6EE",
"$.\tc #F7EFE7",
"%.\tc #FED2B2",
"&.\tc #CE8266",
"*.\tc #2E2A22",
"=.\tc #36322E",
"-.\tc #908674",
";.\tc #897960",
">.\tc #171717",
",.\tc #606060",
"\'.\tc #FAF6F6",
").\tc #FAF2EA",
"!.\tc #F4ECE4",
"~.\tc #72664E",
"{.\tc #B68A6A",
"].\tc #C68662",
"^.\tc #724E3A",
"/.\tc #5A4A3E",
"(.\tc #938978",
"_.\tc #9D907D",
":.\tc #AC9D85",
"<.\tc #A48F6F",
"[.\tc #5E5E5E",
"}.\tc #F5F1E5",
"|.\tc #CAAE82",
"1.\tc #32261E",
"2.\tc #422E26",
"3.\tc #565252",
"4.\tc #93897A",
"5.\tc #9D9382",
"6.\tc #AEA28D",
"7.\tc #C0B29B",
"8.\tc #D0BA9A",
"9.\tc #B69E7A",
"0.\tc #101010",
"a.\tc #D3CCC5",
"b.\tc #CFC9C2",
"c.\tc #C9C6BF",
"d.\tc #363232",
"e.\tc #7E766B",
"f.\tc #908675",
"g.\tc #A39882",
"h.\tc #B2A08A",
"i.\tc #B9A688",
"j.\tc #BFAB8D",
"k.\tc #BDA27A",
"l.\tc #0D0D0D",
"m.\tc #F6F2E6",
"n.\tc #F6EEE2",
"o.\tc #EFE3D3",
"p.\tc #524636",
"q.\tc #998E7F",
"r.\tc #877C6E",
"s.\tc #AFA38E",
"t.\tc #C8B79F",
"u.\tc #DBCBB1",
"v.\tc #E7CFB3",
"w.\tc #E5CDA9",
"x.\tc #E2CAA2",
"y.\tc #BDA177",
"z.\tc #090909",
"A.\tc #565656",
"B.\tc #F2EAE2",
"C.\tc #F2EADA",
"D.\tc #DACFBD",
"E.\tc #BBAE9C",
"F.\tc #B5A593",
"G.\tc #A49985",
"H.\tc #D3C1A8",
"I.\tc #E0C9AE",
"J.\tc #E4CCA8",
"K.\tc #E6CEAA",
"L.\tc #DEC6AA",
"M.\tc #BD9F74",
"N.\tc #040404",
"O.\tc #535353",
"P.\tc #C5BFB1",
"Q.\tc #C4BCAC",
"R.\tc #C3B9A6",
"S.\tc #BCB19C",
"T.\tc #B2A690",
"U.\tc #B2A38B",
"V.\tc #B8A88C",
"W.\tc #BDAA8D",
"X.\tc #BEAA89",
"Y.\tc #BFA885",
"Z.\tc #BEA680",
"`.\tc #BEA37B",
" +\tc #BDA176",
".+\tc #BC9D70",
"++\tc #000000",
"    . . + @ # $ % & * = - ; > , \' ) !   ~ { ",
"    . ] ] ] ] ] ] ] ] ] ] ] ] ] ] ^ / ~ { ( ",
"    _ ] : : : : : : < : : : : : : [ ~ } ( | ",
"    1 ] : : : : : : < : : : : : 2 3 } 4 | 5 ",
"    @ ] : : : : : : < : : : : 2 6 } 4 | 7 8 ",
"    # ] < < < < < < < < < < 9 0 } a | 7 8 b ",
"    c ] : : : : : : < : : 2 d } a | e 8 f g ",
"    h ] : : : : : : < : 2 i j a | k 8 f l m ",
"    n ] : : : : : : < 2 o p a | 8 q f r s t ",
"    & ] < < < < < < u o v w x k 8 f l s t   ",
"    y ] : : : : : : z a A B C D k r E t     ",
"    F ] : : : : : G o H 4 x I J K E t       ",
"    L ] : : : M N O a P o Q R ~ S t T       ",
"    - ] < < U V W o X Y Q Z ~ ` t  ...      ",
"    +.] : @.N #.$.%.B &.Z ` *.=.-.;.>.      ",
"    ,.] M \'.).!.~.{.].^./.=.(._.:.<.T       ",
"    [.] N #.}.|.~.1.2.3.4.5.6.7.8.9.0.      ",
"    , ] a.b.c.~.*.d.|.e.f.g.h.i.j.k.l.      ",
"    \' ] m.n.o.p.|.q.r.s.t.u.v.w.x.y.z.      ",
"    A.] B.C.o.D.E.F.G.H.I.J.K.x.L.M.N.      ",
"    O.^ P.Q.R.S.T.U.V.W.X.Y.Z.`. +.+++      ",
"    ++++++++++++++++++++++++++++++++++      "
};
static Fl_Pixmap image_edit(idata_edit);

static const char *idata_edit1[] = {
"22 22 54 1",
" \tc None",
".\tc #868686",
"+\tc #828282",
"@\tc #7E7E7E",
"#\tc #7B7B7B",
"$\tc #777777",
"%\tc #747474",
"&\tc #707070",
"*\tc #6D6D6D",
"=\tc #696969",
"-\tc #666666",
";\tc #626262",
">\tc #5F5F5F",
",\tc #5B5B5B",
"\'\tc #585858",
")\tc #545454",
"!\tc #505050",
"~\tc #8E522A",
"{\tc #FAAE5E",
"]\tc #FFFFFF",
"^\tc #000000",
"/\tc #FEEAAE",
"(\tc #FFFF00",
"_\tc #FE9632",
":\tc #FEFEFE",
"<\tc #FF0000",
"[\tc #FE8A06",
"}\tc #FE0000",
"|\tc #FE8602",
"1\tc #00FFFF",
"2\tc #FE8A02",
"3\tc #030000",
"4\tc #FFFF9B",
"5\tc #D66A06",
"6\tc #FFC506",
"7\tc #A24E06",
"8\tc #FFFF38",
"9\tc #0E0E0E",
"0\tc #000072",
"a\tc #0000FF",
"b\tc #FFFF69",
"c\tc #FFFF06",
"d\tc #FFE100",
"e\tc #FEFEFF",
"f\tc #870000",
"g\tc #FF07FF",
"h\tc #99005E",
"i\tc #1A0000",
"j\tc #0052FF",
"k\tc #E2E2E2",
"l\tc #FFB500",
"m\tc #D50BFF",
"n\tc #000005",
"o\tc #65FFFF",
"  ..+@#$%&*=-;>,\')! ~{",
"  ]]]]]]]]]]]]]]]]^^]/",
"  ]]]]]]]]^]]]]]]]^(]_",
"  ]]]::::]^]::]]]^<]<[",
"  ]]]]]]]]^]]]]]^<]<}|",
"  ]]^^^^^^^^^^1^<]<<(2",
"  ]]]]]]]]^]]]^<]<3(45",
"  ]]]::::]^]]^^]<3(467",
"  ]]]]]]]]^]<<]<<(8((9",
"  ]]^^^^^^0<]]a<(bc(a ",
"  ]]]]]]]]a<]]^d(((a  ",
"  ]]]:e]]]f]]<<g((a   ",
"  ]]]]]]]]<]]hij(^a   ",
"  k]^^^^^<]]<^l1^]^   ",
"  ^]]]]]]]]<<^^^]]^   ",
"  ^]]m]]^(]^^^]]]]^   ",
"  ^]]]](^^^^]]]]]]^   ",
"  ^]^^]^^^]^^^^^n]^   ",
"  ^]]]]^]]^o]]]]]]^   ",
"  ^]]]]]]]^]]]]]]]^   ",
"  ]]]]]]]]]]]]]]]]^   ",
"  ^^^^^^^^^^^^^^^^^   "
};
static Fl_Pixmap image_edit1(idata_edit1);

static void cb_3(Fl_RaiseButton*, void*) {
  g_devcfg->activate();
g_devgencfg->activate();
g_devcfgwords->activate();
g_devmiscellanea->activate();
g_devCfgNewEditCopy->deactivate();
deviceConfigCB(CFG_COPY);
}

static const char *idata_editcopy[] = {
"22 22 208 2",
"  \tc None",
". \tc #111111",
"+ \tc #121212",
"@ \tc #2A2A2A",
"# \tc #262626",
"$ \tc #3A3A3A",
"% \tc #777777",
"& \tc #B5B5B5",
"* \tc #808080",
"= \tc #707070",
"- \tc #929292",
"; \tc #5E5E5E",
"> \tc #101010",
", \tc #3F3F3F",
"\' \tc #A4A4A4",
") \tc #E2E2E2",
"! \tc #FFFFFF",
"~ \tc #BFBEBF",
"{ \tc #747374",
"] \tc #E6E6E6",
"^ \tc #CFCFCF",
"/ \tc #6D6D6D",
"( \tc #535353",
"_ \tc #F8F8F8",
": \tc #D5D5D5",
"< \tc #DFDFDF",
"[ \tc #F2F2F2",
"} \tc #4B4A4A",
"| \tc #969595",
"1 \tc #7F7E7F",
"2 \tc #161616",
"3 \tc #FAFAFA",
"4 \tc #9F9F9F",
"5 \tc #C7C7C7",
"6 \tc #B1B1B1",
"7 \tc #E3E3E3",
"8 \tc #FDFDFD",
"9 \tc #7D7D7C",
"0 \tc #7A7979",
"a \tc #848384",
"b \tc #7A7A7A",
"c \tc #393938",
"d \tc #090909",
"e \tc #000000",
"f \tc #BDBDBD",
"g \tc #ECECEC",
"h \tc #CACACA",
"i \tc #BABABA",
"j \tc #E6E5E4",
"k \tc #EBE8E6",
"l \tc #DBD8D5",
"m \tc #D1CBC7",
"n \tc #807B77",
"o \tc #0E0E0E",
"p \tc #0B0B0B",
"q \tc #D7D7D7",
"r \tc #737373",
"s \tc #A3A3A3",
"t \tc #DADADA",
"u \tc #E7E7E6",
"v \tc #F8F5F2",
"w \tc #D9D3CE",
"x \tc #C3BBB5",
"y \tc #9D958F",
"z \tc #C0B8B1",
"A \tc #1D1D1D",
"B \tc #A8A8A8",
"C \tc #2C2C2C",
"D \tc #868686",
"E \tc #424242",
"F \tc #F9F9F9",
"G \tc #E5E5E5",
"H \tc #E1E1E1",
"I \tc #A1A1A1",
"J \tc #5A5552",
"K \tc #9D9690",
"L \tc #CCC0B7",
"M \tc #DBCEC3",
"N \tc #DACDC2",
"O \tc #33312F",
"P \tc #838383",
"Q \tc #353435",
"R \tc #F7F7F7",
"S \tc #C8C8C8",
"T \tc #EAEAEA",
"U \tc #959494",
"V \tc #D7D6D4",
"W \tc #DCD8D5",
"X \tc #F4EDE7",
"Y \tc #E5DBD1",
"Z \tc #C0B3A8",
"` \tc #9A8D82",
" .\tc #B0A194",
"..\tc #655D56",
"+.\tc #414141",
"@.\tc #B4B4B4",
"#.\tc #3C3B3B",
"$.\tc #BFBFBF",
"%.\tc #898989",
"&.\tc #FEFEFE",
"*.\tc #ADADAD",
"=.\tc #F5F5F5",
"-.\tc #EFEDEC",
";.\tc #D6D2D0",
">.\tc #9B9793",
",.\tc #938B86",
"\'.\tc #BCAEA2",
").\tc #BBAB9D",
"!.\tc #D0BEAF",
"~.\tc #E4CFBD",
"{.\tc #958679",
"].\tc #363636",
"^.\tc #ACACAC",
"/.\tc #3A3939",
"(.\tc #424141",
"_.\tc #3B3A3B",
":.\tc #313131",
"<.\tc #6F6F6F",
"[.\tc #CCCBCB",
"}.\tc #8C8988",
"|.\tc #CCC6C2",
"1.\tc #C9C1BB",
"2.\tc #E9DDD4",
"3.\tc #E1D3C7",
"4.\tc #B7A89D",
"5.\tc #B4A292",
"6.\tc #877869",
"7.\tc #C4AC97",
"8.\tc #818181",
"9.\tc #A0A0A0",
"0.\tc #323232",
"a.\tc #FCFBFB",
"b.\tc #F0EBE7",
"c.\tc #C3BDB7",
"d.\tc #D6CCC3",
"e.\tc #A79688",
"f.\tc #8B7E72",
"g.\tc #948579",
"h.\tc #CDB8A5",
"i.\tc #E3CAB4",
"j.\tc #D1B49C",
"k.\tc #3E3731",
"l.\tc #9E9E9E",
"m.\tc #C5C5C5",
"n.\tc #9D9895",
"o.\tc #908983",
"p.\tc #D3C6BC",
"q.\tc #E6D6C7",
"r.\tc #EFDCCB",
"s.\tc #E5CEBB",
"t.\tc #DBC1AB",
"u.\tc #D0B299",
"v.\tc #B2957D",
"w.\tc #433931",
"x.\tc #373636",
"y.\tc #5D5D5D",
"z.\tc #8E8E8E",
"A.\tc #7C7C7C",
"B.\tc #DDDDDD",
"C.\tc #9C9C9C",
"D.\tc #FAF4EF",
"E.\tc #EEE2D6",
"F.\tc #E4D5C7",
"G.\tc #D9C7B8",
"H.\tc #C6B2A1",
"I.\tc #938274",
"J.\tc #62574D",
"K.\tc #312C28",
"L.\tc #181818",
"M.\tc #9A9A9A",
"N.\tc #B7B7B7",
"O.\tc #DCDCDC",
"P.\tc #565452",
"Q.\tc #D8CFC7",
"R.\tc #A59C94",
"S.\tc #706962",
"T.\tc #3C3834",
"U.\tc #0C0C0C",
"V.\tc #060606",
"W.\tc #4B4B4B",
"X.\tc #4E4E4E",
"Y.\tc #7D7D7D",
"Z.\tc #727272",
"`.\tc #1C1B1B",
" +\tc #040404",
".+\tc #949494",
"++\tc #999999",
"@+\tc #A5A5A5",
"#+\tc #B9B9B9",
"$+\tc #D1D1D1",
"%+\tc #E9E9E9",
"&+\tc #AAAAAA",
"*+\tc #515151",
"=+\tc #606060",
"-+\tc #828282",
";+\tc #545353",
">+\tc #9D9D9D",
",+\tc #DEDEDE",
"\'+\tc #0D0D0D",
")+\tc #CBCBCB",
"!+\tc #D4D4D4",
"~+\tc #EDEDED",
"{+\tc #F4F4F4",
"]+\tc #FCFCFC",
"^+\tc #CDCDCD",
"/+\tc #D2D2D2",
"(+\tc #D6D6D6",
"_+\tc #D8D8D8",
"                                            ",
"            . + @ #                         ",
"    . + $ % & * = - ; >                     ",
"+ , \' ) ! ! ! ~ { ] ^ / .                   ",
"  ( ! ! _ : < [ } | 1 $ 2                   ",
"  2 3 4 5 6 7 8 9 0 a b c d e               ",
"  . f g 3 7 h i j k l m n o p o > .         ",
"  . * q r s t u v w x y z A B 5 C D +       ",
"    E F 3 G H I J K L M N O P f Q R S +     ",
"    . T 0 U V W X Y Z `  ...+.@.#.$.8 %.+ &.",
"    . *.=.-.;.>.,.\'.).!.~.{.].^./.(._.:.+ &.",
"      <.[.}.|.1.2.3.4.5.6.7.+ 8.S @.9.8.+ &.",
"      0.a.b.c.d.e.f.g.h.i.j.k.l.$.H R m.+ &.",
"      . t n.o.p.q.r.s.t.u.v.w.x.y.z.A.B.+ &.",
"      . C.D.E.F.G.H.I.J.K.L.:.M.N.O.=.B.+ &.",
"        P.Q.R.S.T.U.p p V.W.X.Y.b Z.Y.B.+ &.",
"        2 `.p d  +V..+++l.@+^.#+$+%+F B.+ &.",
"                e d &+*+=+z.-+<.;+>+* ,++ &.",
"                e \'+)+!+B.] ~+{+F ]+! ,++ &.",
"                  > ^+/+(+_+t O.B.,+,+,++ &.",
"                  . . . . + + + + + + + + &.",
"                  &.&.&.&.&.&.&.&.&.&.&.&.! "
};
static Fl_Pixmap image_editcopy(idata_editcopy);

static const char *idata_editcopy1[] = {
"22 22 9 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #A8A8A8",
"#\tc #121212",
"$\tc #442B20",
"%\tc #FEFEFE",
"&\tc #0051FF",
"*\tc #4A4821",
"                      ",
"      ....            ",
"  ....++.+@.          ",
"#.++++++.+++.         ",
" .+++..+.+...         ",
" .+...++...+...       ",
" .++++..+++++.....    ",
" .++..++++..+.++.+.   ",
"  .++++...+++.++.++.  ",
"  .+..++++$.+..+.+++.%",
"  .++++....+++.+.....%",
"   .+.++++&..+.+++++.%",
"   .++++...+++.+++++.%",
"   .+..+++++++.....+.%",
"   .+++++++....+++++.%",
"    *++............+.%",
"    ......++++++++++.%",
"        ..+........+.%",
"        ..++++++++++.%",
"         .++++++++++.%",
"         ............%",
"         %%%%%%%%%%%%+"
};
static Fl_Pixmap image_editcopy1(idata_editcopy1);

Fl_Group *g_devCfgStoreMGR=(Fl_Group *)0;

static void cb_4(Fl_RaiseButton*, void*) {
  if (deviceConfigCB(CFG_SAVE)) {
    g_devcfg->deactivate();
    g_devgencfg->deactivate();
    g_devcfgwords->deactivate();
    g_devmiscellanea->deactivate();
    g_devCfgNewEditCopy->activate();
    t_devcfg->redraw();
    ch_devices->do_callback();
};
}

static const char *idata_cfgsave[] = {
"22 22 118 2",
"  \tc None",
". \tc #6B6B6B",
"+ \tc #000000",
"@ \tc #C1C1C1",
"# \tc #3F3F3F",
"$ \tc #4A4A4A",
"% \tc #717171",
"& \tc #6D6D6D",
"* \tc #8A8A8A",
"= \tc #5C5C5C",
"- \tc #636363",
"; \tc #505050",
"> \tc #747474",
", \tc #434343",
"\' \tc #565656",
") \tc #FFFFFF",
"! \tc #DFDFDF",
"~ \tc #464646",
"{ \tc #6C6C6C",
"] \tc #040404",
"^ \tc #E0E0E0",
"/ \tc #616161",
"( \tc #545454",
"_ \tc #9B9B9B",
": \tc #FEFEFE",
"< \tc #5E5E5E",
"[ \tc #777777",
"} \tc #5B5B5B",
"| \tc #4D4D4D",
"1 \tc #D8E6E6",
"2 \tc #767676",
"3 \tc #C4C4C4",
"4 \tc #151515",
"5 \tc #B3B3B3",
"6 \tc #7B7B7B",
"7 \tc #BABABA",
"8 \tc #494949",
"9 \tc #828282",
"0 \tc #EFF0F0",
"a \tc #F9F9F9",
"b \tc #797979",
"c \tc #060606",
"d \tc #989898",
"e \tc #9A9A9A",
"f \tc #3D3D3D",
"g \tc #FCFCFC",
"h \tc #CBCBCB",
"i \tc #0C0C0C",
"j \tc #919191",
"k \tc #949494",
"l \tc #929292",
"m \tc #7C7C7C",
"n \tc #888888",
"o \tc #787878",
"p \tc #737373",
"q \tc #474747",
"r \tc #757575",
"s \tc #8E8E8E",
"t \tc #909090",
"u \tc #8D8D8D",
"v \tc #8B8B8B",
"w \tc #535353",
"x \tc #BBBBBB",
"y \tc #424242",
"z \tc #848484",
"A \tc #838383",
"B \tc #454545",
"C \tc #3A3A3A",
"D \tc #858585",
"E \tc #585858",
"F \tc #404040",
"G \tc #CACACA",
"H \tc #2F2F2F",
"I \tc #6E6E6E",
"J \tc #EAEAEA",
"K \tc #969696",
"L \tc #4C4C4C",
"M \tc #5F5F5F",
"N \tc #7A7A7A",
"O \tc #707070",
"P \tc #BEBEBE",
"Q \tc #4E4E4E",
"R \tc #6A6A6A",
"S \tc #4F4F4F",
"T \tc #9C9C9C",
"U \tc #F1F1F1",
"V \tc #EFEFEF",
"W \tc #D6D6D6",
"X \tc #444444",
"Y \tc #6F6F6F",
"Z \tc #2B2B2B",
"` \tc #676767",
" .\tc #F4F4F4",
"..\tc #DADADA",
"+.\tc #E3E3E3",
"@.\tc #EDEDED",
"#.\tc #808080",
"$.\tc #515151",
"%.\tc #3B3B3B",
"&.\tc #656565",
"*.\tc #F2F2F2",
"=.\tc #CECECE",
"-.\tc #C5C5C5",
";.\tc #BCBCBC",
">.\tc #818181",
",.\tc #606060",
"\'.\tc #5A5A5A",
").\tc #010101",
"!.\tc #A7A7A7",
"~.\tc #B8B8B8",
"{.\tc #8C8C8C",
"].\tc #A8A8A8",
"^.\tc #898989",
"/.\tc #414141",
"(.\tc #555555",
"_.\tc #C9C9C9",
":.\tc #353535",
"<.\tc #383838",
"          . +                               ",
"          + @ # $ %                         ",
"        & * @ = - = # ; >                   ",
"        , @ @ \' ) ! = & = # ~ {             ",
"        ] @ \' ^ ) ) ) ) ! = / = # ( >       ",
"      { _ @ # : ) ) ) ) ) ) ) ! = < [ + }   ",
"      | @ @ \' ) ) ) ) ) ) ) ) : 1 \' 2 3 +   ",
"      4 5 \' ^ ) ) ) ) ) ) ) ) ) \' 6 > 7 8   ",
"    . 9 5 # 0 ) ) ) ) ) ) ) ) a # b 7 c     ",
"    | d e f { g ) ) ) ) ) ) ) ! \' 2 h f     ",
"    i j k l m ( # n ) ) ) ) ) \' o p 7 q     ",
"  { r * s t u v l > w # * ) ^ # > x +       ",
"  y z A B C \' v n D n z & E F r [ G H       ",
"  c m I o J K ~ L M b 9 N o > O . P Q       ",
". R p S T ) U V W A X ~ 2 % Y . 7 ]         ",
"Z & ` ~  .J ..+.@.^ #.$.%.X = ` h y         ",
"= + &.# *.W W =.-.;.( D >.%.,.,.x \'.        ",
"  . ~ ).~ !.3 ;.~.* ~ m {.w w x +           ",
"        . ~ + ~ ].~ D ^./.(.w _.:.          ",
"              . ~ + ~ K <.w w 7 8           ",
"                    . ~ + ~ (.]             ",
"                          . + }             "
};
static Fl_Pixmap image_cfgsave(idata_cfgsave);

static const char *idata_cfgsave1[] = {
"22 22 11 1",
" \tc None",
".\tc #6B6B6B",
"+\tc #000000",
"@\tc #FFFFFF",
"#\tc #180000",
"$\tc #2B2B2B",
"%\tc #5C5C5C",
"&\tc #2D2D2D",
"*\tc #3B3B3B",
"=\tc #878787",
"-\tc #5B5B5B",
"     .+               ",
"     +@+@@            ",
"    @@@++++@@         ",
"    +@@+@@++++@@      ",
"    +@+@@@@@@++++@@   ",
"   @@@+@@@@@@@@@++@+@ ",
"   +@@+@@@@@@@@@@+@@+ ",
"   +@+@@@@@@@@@@+#+@@ ",
"  @@@+@@@@@@@@@@++@+  ",
"  @@@++@@@@@@@@@++@+  ",
"  +@@@++++@@@@@+++@@  ",
" @@@@@@@@++++@@++@+   ",
" @@@+++@@@@@+++@+@+   ",
" +@++@++++@@@@@++@@   ",
".@@++@@@@+++@@@+@+    ",
"$@@+@@+@@@@+++++@+    ",
"%+@+@@@&+@+@@+*+@@    ",
" @@++@@@@@+@@++@+     ",
"    @@++@+@@+=+@+     ",
"       @@++@+@+@@     ",
"          @@+@@+      ",
"             .+-      "
};
static Fl_Pixmap image_cfgsave1(idata_cfgsave1);

static void cb_5(Fl_RaiseButton*, void*) {
  if (deviceConfigCB(CFG_DELETE)) {
    g_devcfg->deactivate();
    g_devgencfg->deactivate();
    g_devcfgwords->deactivate();
    g_devmiscellanea->deactivate();
    g_devCfgNewEditCopy->activate();
    t_devcfg->redraw();
};
}

static const char *idata_editdelete[] = {
"22 22 125 2",
"  \tc None",
". \tc #535353",
"+ \tc #4A4A4A",
"@ \tc #424242",
"# \tc #3A3A3A",
"$ \tc #313131",
"% \tc #292929",
"& \tc #212121",
"* \tc #181818",
"= \tc #101010",
"- \tc #080808",
"; \tc #000000",
"> \tc #4C4C4C",
", \tc #DEDEDE",
"\' \tc #D6D6D6",
") \tc #C6C6C6",
"! \tc #B4B4B4",
"~ \tc #989898",
"{ \tc #464646",
"] \tc #FFFFFF",
"^ \tc #ECECEC",
"/ \tc #E1E1E1",
"( \tc #141414",
"_ \tc #C9C9C9",
": \tc #3F3F3F",
"< \tc #393939",
"[ \tc #3E3E3E",
"} \tc #E0E0E0",
"| \tc #333333",
"1 \tc #2C2C2C",
"2 \tc #FDFDFD",
"3 \tc #F0EEEC",
"4 \tc #CFCBC4",
"5 \tc #B8B1A9",
"6 \tc #857F7A",
"7 \tc #262626",
"8 \tc #FEFDFC",
"9 \tc #FDFAF7",
"0 \tc #E4E0DB",
"a \tc #D0C8C1",
"b \tc #A09B97",
"c \tc #1F1F1F",
"d \tc #FEFDFB",
"e \tc #FCF8F5",
"f \tc #FBF3EE",
"g \tc #F9F0E8",
"h \tc #EADFD5",
"i \tc #BBB2AB",
"j \tc #191919",
"k \tc #FEBEBE",
"l \tc #FEFCFB",
"m \tc #FAF4EE",
"n \tc #FAAEA3",
"o \tc #F5E6D9",
"p \tc #C6B8AC",
"q \tc #820202",
"r \tc #FE0202",
"s \tc #131313",
"t \tc #FAD2CE",
"u \tc #FDFCFA",
"v \tc #FBF7F3",
"w \tc #D9CEC7",
"x \tc #F3E1D2",
"y \tc #D2C0B1",
"z \tc #0C0C0C",
"A \tc #F4E1D2",
"B \tc #F2DDCB",
"C \tc #D0BCAB",
"D \tc #060606",
"E \tc #FEFEFE",
"F \tc #F3E1D1",
"G \tc #F0D8C3",
"H \tc #CFB8A5",
"I \tc #FDFBF9",
"J \tc #F5E5D8",
"K \tc #FEFEFD",
"L \tc #FDFAF8",
"M \tc #F1DCC9",
"N \tc #EFD8C3",
"O \tc #EED3BC",
"P \tc #CEB49F",
"Q \tc #FFFEFE",
"R \tc #ECCEB5",
"S \tc #CCB099",
"T \tc #020202",
"U \tc #F4E4D6",
"V \tc #F2DFCE",
"W \tc #D6C0AF",
"X \tc #EAC9AD",
"Y \tc #CBAC93",
"Z \tc #FBF5F0",
"` \tc #FE7E7A",
" .\tc #D9CBC0",
"..\tc #F4E3D5",
"+.\tc #F2E0CF",
"@.\tc #F1DAC7",
"#.\tc #EFD7C1",
"$.\tc #CEB69D",
"%.\tc #E9C5A6",
"&.\tc #C9A88D",
"*.\tc #F7EBE1",
"=.\tc #F6E8DB",
"-.\tc #F4E3D4",
";.\tc #F2DECE",
">.\tc #F1DBC7",
",.\tc #EFD6C0",
"\'.\tc #EED2BA",
").\tc #ECCDB3",
"!.\tc #EAC9AC",
"~.\tc #E8C5A6",
"{.\tc #E7C2A2",
"].\tc #C8A487",
"^.\tc #D8D0CA",
"/.\tc #D7CCC4",
"(.\tc #D6C8BE",
"_.\tc #D4C4B8",
":.\tc #D2C0B2",
"<.\tc #D1BDAC",
"[.\tc #CFB8A6",
"}.\tc #CEB5A0",
"|.\tc #CDB09A",
"1.\tc #CBAD94",
"2.\tc #C9A88E",
"3.\tc #C8A488",
"4.\tc #C7A081",
"      . + @ # $ % & * = - ; ;               ",
"      > , , , , , , \' ) ! ; ~ ;             ",
"      { , ] ] ] ] ] ] ^ / ( _ ~ ;           ",
"      : , ] ] ] ] ] ] ] ^ % ] _ ~ ;         ",
"      < , ] ] ] ] ] ] ] ] [ } ] _ ~ ;       ",
"      | , ] ] ] ] ] ] ] ] . [ % ( ; ;       ",
"      1 , ] ] ] ] ] ] ] ] 2 3 4 5 6 ;       ",
"      7 , ] ] ] ] ] ] ] ] 8 9 0 a b ;       ",
"      c , ] ] ] ] ] ] ] d e f g h i ;       ",
"      j , ] k ] ] ] ] l e m n k o p ;       ",
"      j , ] q r ] ] ] l e n r q o p ;       ",
"      s , ] } q r t u v n r q w x y ;       ",
"      z , ] ] } q r t t r q w A B C ;       ",
"      D , ] ] E } q r r q w F B G H ;       ",
"      D , ] ] E I t r r n J F B G H ;       ",
"      ; , ] K L t r q q r n M N O P ;       ",
"      ; , Q 9 t r q w w q r n O R S ;       ",
"      T , 9 t r q w U V W q r n X Y ;       ",
"      ; , Z ` q  ...+.@.#.$.q ` %.&.;       ",
"      ; , g *.=.-.;.>.,.\'.).!.~.{.].;       ",
"      ; ^.^./.(._.:.<.[.}.|.1.2.3.4.;       ",
"      ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;       "
};
static Fl_Pixmap image_editdelete(idata_editdelete);

static const char *idata_editdelete1[] = {
"22 22 26 1",
" \tc None",
".\tc #535353",
"+\tc #4A4A4A",
"@\tc #424242",
"#\tc #3A3A3A",
"$\tc #313131",
"%\tc #292929",
"&\tc #212121",
"*\tc #181818",
"=\tc #101010",
"-\tc #080808",
";\tc #000000",
">\tc #FFFFFF",
",\tc #CBFFFF",
"\'\tc #D7FFFF",
")\tc #FF1111",
"!\tc #FEBECA",
"~\tc #BEFFFF",
"{\tc #40FFFF",
"]\tc #FFFF59",
"^\tc #FF0000",
"/\tc #7FFFFF",
"(\tc #FFFFD7",
"_\tc #00FFFF",
":\tc #29FFFF",
"<\tc #FDFFFF",
"   .+@#$%&*=-;;       ",
"   ;>>>>>>>>>;>;      ",
"   ;>>>>>>>>>;>>;     ",
"   ;>>>>>>>>>;>>>;    ",
"   ;>>>>>>>>>;>>>>;   ",
"   ;>>>>>>>>>;;;;;;   ",
"   ;>>>>>>>>>>>>>>;   ",
"   ;>>>>>>>>>>>,>>;   ",
"   ;>>>>>>>>>\'>>>>;   ",
"   ;>>)>>>>!~{]>>>;   ",
"   ;>>;^>>>>>>^;>>;   ",
"   ;>>>;^>>/>^;>>>;   ",
"   ;>>>>;^>>^;>>>>;   ",
"   ;>>>>>;^^;>>(>>;   ",
"   ;>>>>>>^^>>>>>>;   ",
"   ;>>>>>^;;^>_:>>;   ",
"   ;>><>^;>>;^>_>>;   ",
"   ;>>>^;>>>>;^>>>;   ",
"   ;>>^;>>>>>_;^>>;   ",
"   ;>>>>>>>>>>>>>>;   ",
"   ;>>>>>>>>>>>>>>;   ",
"   ;;;;;;;;;;;;;;;;   "
};
static Fl_Pixmap image_editdelete1(idata_editdelete1);

Fl_Group *g_devcfg=(Fl_Group *)0;

Fl_Input *tx_devName=(Fl_Input *)0;

Fl_Sorted_Choice *ch_devProgSpec=(Fl_Sorted_Choice *)0;

Fl_Menu_Item menu_ch_devProgSpec[] = {
 {"Microchip", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Microchip PIC", 0,  0, (void*)("Microchip/PIC"), 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Group *g_devgencfg=(Fl_Group *)0;

Fl_Sorted_Choice *ch_devMemType=(Fl_Sorted_Choice *)0;

Fl_Menu_Item menu_ch_devMemType[] = {
 {"ROM", 0,  0, (void*)("rom"), 0, 0, 0, 14, 56},
 {"EPROM", 0,  0, (void*)("eprom"), 0, 0, 0, 14, 56},
 {"FLASH", 0,  0, (void*)("flash"), 0, 0, 0, 14, 56},
 {"FLASH E/P", 0,  0, (void*)("flashe"), 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Group *g_devcfgwords=(Fl_Group *)0;

Fl_Group *g_devConfigWordsEdit=(Fl_Group *)0;

Fl_Input *tx_devCfgWord[11]={(Fl_Input *)0};

Fl_Group *g_devConfigWordsToolBar=(Fl_Group *)0;

static void cb_6(Fl_RaiseButton*, void*) {
  g_devConfigWordsEdit->activate();
g_devConfigWordsNewEditCopy->deactivate();
cfgWordsCB(CFG_NEW);
}

Fl_Group *g_devConfigWordsNewEditCopy=(Fl_Group *)0;

static void cb_7(Fl_RaiseButton*, void*) {
  if (ls_devConfigWords->value()>1) {
    g_devConfigWordsEdit->activate();
    g_devConfigWordsNewEditCopy->deactivate();
    cfgWordsCB(CFG_EDIT);
};
}

static void cb_8(Fl_RaiseButton*, void*) {
  if (ls_devConfigWords->value()>1) {
    g_devConfigWordsEdit->activate();
    g_devConfigWordsNewEditCopy->deactivate();
    cfgWordsCB(CFG_COPY);
};
}

static void cb_9(Fl_RaiseButton*, void*) {
  if (cfgWordsCB(CFG_SAVE)) {
    g_devConfigWordsEdit->deactivate();
    g_devConfigWordsNewEditCopy->activate();
    g_devcfgwords->redraw();
};
}

static void cb_a(Fl_RaiseButton*, void*) {
  if (cfgWordsCB(CFG_DELETE)) {
    g_devConfigWordsEdit->deactivate();
    g_devConfigWordsNewEditCopy->activate();
    g_devcfgwords->redraw();
};
}

Fl_Hold_Browser *ls_devConfigWords=(Fl_Hold_Browser *)0;

static void cb_ls_devConfigWords(Fl_Hold_Browser*, void*) {
  cfgWordsCB(CFG_LOAD);
}

Fl_Group *g_devmiscellanea=(Fl_Group *)0;

Fl_Check_Button *tb_devExperimental=(Fl_Check_Button *)0;

Fl_Input *tx_devIDWord[2]={(Fl_Input *)0};

Fl_Group *t_progcfg=(Fl_Group *)0;

static void cb_b(Fl_RaiseButton*, void*) {
  programmerConfigCB(CFG_IMPORT);
ch_programmers->do_callback();
g_progcfg->deactivate();
g_progCfgNewEditCopy->activate();
t_progcfg->redraw();
}

Fl_Group *g_progCfgNewEditCopy=(Fl_Group *)0;

static void cb_c(Fl_RaiseButton*, void*) {
  g_progcfg->activate();
g_progCfgNewEditCopy->deactivate();
programmerConfigCB(CFG_NEW);
}

static void cb_d(Fl_RaiseButton*, void*) {
  g_progcfg->activate();
g_progCfgNewEditCopy->deactivate();
programmerConfigCB(CFG_EDIT);
}

static void cb_e(Fl_RaiseButton*, void*) {
  g_progcfg->activate();
g_progCfgNewEditCopy->deactivate();
programmerConfigCB(CFG_COPY);
}

Fl_Group *g_pogStoreMGR=(Fl_Group *)0;

static void cb_f(Fl_RaiseButton*, void*) {
  if (programmerConfigCB(CFG_SAVE)) {
    g_progcfg->deactivate();
    g_progCfgNewEditCopy->activate();
    t_progcfg->redraw();
    ch_programmers->do_callback();
};
}

static void cb_10(Fl_RaiseButton*, void*) {
  if (programmerConfigCB(CFG_DELETE)) {
    g_progcfg->deactivate();
    g_progCfgNewEditCopy->activate();
    t_progcfg->redraw();
};
}

Fl_Group *g_progcfg=(Fl_Group *)0;

Fl_Input *tx_programmerName=(Fl_Input *)0;

Fl_Menu_Item menu_[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_11(Fl_Sorted_Choice*, void*) {
  bx_pinName[ICSP_DATA_IN]->color(FL_WHITE);
bx_pinName[ICSP_DATA_IN]->redraw();
}

Fl_Menu_Item menu_1[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_12(Fl_Sorted_Choice*, void*) {
  bx_pinName[ICSP_DATA_OUT]->color(FL_WHITE);
bx_pinName[ICSP_DATA_OUT]->redraw();
}

Fl_Menu_Item menu_2[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_13(Fl_Sorted_Choice*, void*) {
  bx_pinName[ICSP_VDD_ON]->color(FL_WHITE);
bx_pinName[ICSP_VDD_ON]->redraw();
}

Fl_Menu_Item menu_3[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_14(Fl_Sorted_Choice*, void*) {
  bx_pinName[ICSP_VPP_ON]->color(FL_WHITE);
bx_pinName[ICSP_VPP_ON]->redraw();
}

Fl_Menu_Item menu_4[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_15(Fl_Sorted_Choice* o, void*) {
  if (o->value()) {
    tb_vddMinCond [0]->value(1);
    tb_vddMinCond [0]->deactivate();
    tb_vddProgCond[0]->activate();
    tb_vddMaxCond [0]->activate();
} else {
    tb_vddMinCond [0]->value(0);
    tb_vddProgCond[0]->value(0);
    tb_vddMaxCond [0]->value(0);
    tb_vddMinCond [0]->deactivate();
    tb_vddProgCond[0]->deactivate();
    tb_vddMaxCond [0]->deactivate();
}
tb_vddMinCond [0]->redraw();
tb_vddProgCond[0]->redraw();
tb_vddMaxCond [0]->redraw();
bx_pinName[SEL_MIN_VDD]->color(FL_WHITE);
bx_pinName[SEL_MIN_VDD]->redraw();
}

Fl_Menu_Item menu_5[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_16(Fl_Sorted_Choice* o, void*) {
  if (o->value()) {
    tb_vddMinCond [1]->activate();
    tb_vddProgCond[1]->value(1);
    tb_vddProgCond[1]->deactivate();
    tb_vddMaxCond [1]->activate();
} else {
    tb_vddMinCond [1]->value(0);
    tb_vddProgCond[1]->value(0);
    tb_vddMaxCond [1]->value(0);
    tb_vddMinCond [1]->deactivate();
    tb_vddProgCond[1]->deactivate();
    tb_vddMaxCond [1]->deactivate();
}
tb_vddMinCond [1]->redraw();
tb_vddProgCond[1]->redraw();
tb_vddMaxCond [1]->redraw();
bx_pinName[SEL_PRG_VDD]->color(FL_WHITE);
bx_pinName[SEL_PRG_VDD]->redraw();
}

Fl_Menu_Item menu_6[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_17(Fl_Sorted_Choice* o, void*) {
  if (o->value()) {
    tb_vddMinCond [2]->activate();
    tb_vddProgCond[2]->activate();
    tb_vddMaxCond [2]->value(1);
    tb_vddMaxCond [2]->deactivate();
} else {
    tb_vddMinCond [2]->value(0);
    tb_vddProgCond[2]->value(0);
    tb_vddMaxCond [2]->value(0);
    tb_vddMinCond [2]->deactivate();
    tb_vddProgCond[2]->deactivate();
    tb_vddMaxCond [2]->deactivate();
}
tb_vddMinCond [2]->redraw();
tb_vddProgCond[2]->redraw();
tb_vddMaxCond [2]->redraw();
bx_pinName[SEL_MAX_VDD]->color(FL_WHITE);
bx_pinName[SEL_MAX_VDD]->redraw();
}

Fl_Menu_Item menu_7[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_18(Fl_Sorted_Choice* o, void*) {
  if (o->value()) {
    tb_vppOffCond->activate();
} else {
    tb_vppOffCond->value(0);
    tb_vppOffCond->deactivate();
}
tb_vppOffCond->redraw();
bx_pinName[SEL_VIHH_VPP]->color(FL_WHITE);
bx_pinName[SEL_VIHH_VPP]->redraw();
}

Fl_Menu_Item menu_8[] = {
 {"0", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1", 0,  0, 0, 0, 0, 0, 14, 56},
 {"2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"3", 0,  0, 0, 0, 0, 0, 14, 56},
 {"4", 0,  0, 0, 0, 0, 0, 14, 56},
 {"5", 0,  0, 0, 0, 0, 0, 14, 56},
 {"6", 0,  0, 0, 0, 0, 0, 14, 56},
 {"7", 0,  0, 0, 0, 0, 0, 14, 56},
 {"8", 0,  0, 0, 0, 0, 0, 14, 56},
 {"9", 0,  0, 0, 0, 0, 0, 14, 56},
 {"10", 0,  0, 0, 0, 0, 0, 14, 56},
 {"11", 0,  0, 0, 0, 0, 0, 14, 56},
 {"12", 0,  0, 0, 0, 0, 0, 14, 56},
 {"13", 0,  0, 0, 0, 0, 0, 14, 56},
 {"14", 0,  0, 0, 0, 0, 0, 14, 56},
 {"15", 0,  0, 0, 0, 0, 0, 14, 56},
 {"16", 0,  0, 0, 0, 0, 0, 14, 56},
 {"17", 0,  0, 0, 0, 0, 0, 14, 56},
 {"18", 0,  0, 0, 0, 0, 0, 14, 56},
 {"19", 0,  0, 0, 0, 0, 0, 14, 56},
 {"20", 0,  0, 0, 0, 0, 0, 14, 56},
 {"21", 0,  0, 0, 0, 0, 0, 14, 56},
 {"22", 0,  0, 0, 0, 0, 0, 14, 56},
 {"23", 0,  0, 0, 0, 0, 0, 14, 56},
 {"24", 0,  0, 0, 0, 0, 0, 14, 56},
 {"25", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Check_Button *tb_vddMinCond[3]={(Fl_Check_Button *)0};

Fl_Check_Button *tb_vddProgCond[3]={(Fl_Check_Button *)0};

Fl_Check_Button *tb_vddMaxCond[3]={(Fl_Check_Button *)0};

Fl_Check_Button *tb_vppOffCond=(Fl_Check_Button *)0;

Fl_Check_Button *tb_saVddVppControl=(Fl_Check_Button *)0;

Fl_Group *t_settings=(Fl_Group *)0;

static void cb_19(Fl_RaiseButton*, void*) {
  generalSettingsCB(CFG_IMPORT);
g_settings->deactivate();
g_settingsNewEditCopy->activate();
t_settings->redraw();
}

Fl_Group *g_settingsNewEditCopy=(Fl_Group *)0;

static void cb_1a(Fl_RaiseButton*, void*) {
  g_settings->activate();
g_settingsNewEditCopy->deactivate();
g_settingsStoreMGR->activate();
generalSettingsCB(CFG_NEW);
}

static void cb_1b(Fl_RaiseButton*, void*) {
  g_settings->activate();
g_settingsNewEditCopy->deactivate();
g_settingsStoreMGR->activate();
generalSettingsCB(CFG_EDIT);
}

static void cb_1c(Fl_RaiseButton*, void*) {
  g_settings->activate();
g_settingsNewEditCopy->deactivate();
g_settingsStoreMGR->activate();
generalSettingsCB(CFG_COPY);
}

Fl_Group *g_settingsStoreMGR=(Fl_Group *)0;

static void cb_1d(Fl_RaiseButton*, void*) {
  if (generalSettingsCB(CFG_SAVE)) {
    g_settings->deactivate();
    g_settingsNewEditCopy->activate();
    g_settingsStoreMGR->deactivate();
    t_settings->redraw();
};
}

static void cb_1e(Fl_RaiseButton*, void*) {
  if (generalSettingsCB(CFG_DELETE)) {
    g_settings->deactivate();
    g_settingsNewEditCopy->activate();
    g_settingsStoreMGR->deactivate();
    t_settings->redraw();
};
}

Fl_Group *g_settings=(Fl_Group *)0;

Fl_Group *g_prop_delays=(Fl_Group *)0;

static Fl_Menu_Bar *mb_menuBar=(Fl_Menu_Bar *)0;

static void cb_mi_open(Fl_Menu_*, void*) {
  loadHexFile();
}

static void cb_mi_save(Fl_Menu_*, void*) {
  saveHexFile();
}

static void cb_Quit(Fl_Menu_*, void*) {
  delete flP5;
}

static void cb_lp0(Fl_Menu_*, void*) {
  app.set("portNumber",0);
ch_programmers->do_callback();
}

static void cb_lp1(Fl_Menu_*, void*) {
  app.set("portNumber",1);
ch_programmers->do_callback();
}

static void cb_lp2(Fl_Menu_*, void*) {
  app.set("portNumber",2);
ch_programmers->do_callback();
}

static void cb_lp3(Fl_Menu_*, void*) {
  app.set("portNumber",3);
ch_programmers->do_callback();
}

static void cb_lp4(Fl_Menu_*, void*) {
  app.set("portNumber",4);
ch_programmers->do_callback();
}

static void cb_Direct(Fl_Menu_*, void*) {
  app.set("portAccessMethod",0);
ch_programmers->do_callback();
}

static void cb_linux_pp_dev(Fl_Menu_*, void*) {
  app.set("portAccessMethod",1);
ch_programmers->do_callback();
}

static void cb_Calibrate(Fl_Menu_*, void*) {
  processOperation(CHIP_CALIBRATE);
}

static void cb_Read(Fl_Menu_*, void*) {
  processOperation(CHIP_READ);
}

static void cb_Erase(Fl_Menu_*, void*) {
  processOperation(CHIP_ERASE);
}

static void cb_Blank(Fl_Menu_*, void*) {
  processOperation(CHIP_BLANCK_CHECK);
}

static void cb_Write(Fl_Menu_*, void*) {
  processOperation(CHIP_WRITE);
}

static void cb_Verify(Fl_Menu_*, void*) {
  processOperation(CHIP_VERIFY);
}

static void cb_Manual(Fl_Menu_*, void*) {
  showManual();
}

static void cb_About(Fl_Menu_*, void*) {
  make_copyright_window(copyrightText);
}

Fl_Menu_Item menu_mb_menuBar[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Open HEX file...", 0x4006f,  (Fl_Callback*)cb_mi_open, 0, 1, 0, 0, 14, 56},
 {"&Save\240HEX file...", 0x40073,  (Fl_Callback*)cb_mi_save, 0, 129, 0, 0, 14, 56},
 {"&Quit", 0x40071,  (Fl_Callback*)cb_Quit, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Settings", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Parallel port", 0,  0, 0, 64, 0, 0, 14, 56},
 {"lp0: address ...", 0x40030,  (Fl_Callback*)cb_lp0, 0, 8, 0, 0, 14, 56},
 {"lp1: address ...", 0x40031,  (Fl_Callback*)cb_lp1, 0, 8, 0, 0, 14, 56},
 {"lp2: address ...", 0x40032,  (Fl_Callback*)cb_lp2, 0, 8, 0, 0, 14, 56},
 {"lp3: address ...", 0x40033,  (Fl_Callback*)cb_lp3, 0, 8, 0, 0, 14, 56},
 {"lp4: address ...", 0x40034,  (Fl_Callback*)cb_lp4, 0, 8, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Port access method", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Direct PP", 0x40064,  (Fl_Callback*)cb_Direct, 0, 8, 0, 0, 14, 56},
 {"Linux PP dev", 0x40073,  (Fl_Callback*)cb_linux_pp_dev, 0, 8, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"&Operations", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Calibrate", 0x80063,  (Fl_Callback*)cb_Calibrate, 0, 128, 0, 0, 14, 56},
 {"&Read", 0x80072,  (Fl_Callback*)cb_Read, 0, 0, 0, 0, 14, 56},
 {"&Erase", 0x80065,  (Fl_Callback*)cb_Erase, 0, 0, 0, 0, 14, 56},
 {"&Blank check", 0x80062,  (Fl_Callback*)cb_Blank, 0, 0, 0, 0, 14, 56},
 {"&Write", 0x80077,  (Fl_Callback*)cb_Write, 0, 0, 0, 0, 14, 56},
 {"&Verify", 0x80076,  (Fl_Callback*)cb_Verify, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Manual...", 0xffbe,  (Fl_Callback*)cb_Manual, 0, 0, 0, 0, 14, 56},
 {"&About flP5...", 0,  (Fl_Callback*)cb_About, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Progress *p_progress=(Fl_Progress *)0;

Fl_Sorted_Choice *ch_devices=(Fl_Sorted_Choice *)0;

static void cb_ch_devices(Fl_Sorted_Choice* o, void*) {
  if (deviceConfigCB(CFG_LOAD)) {
    currentDevice = o->value();
    if (
        currentDevice>=0 &&
        currentProgrammer>=0
    ) {
        p_toolbar->activate();
        mi_open->activate();
        mi_save->activate();
        sm_operations->activate();
        dumpHexFile(true);
    }
} else {
    p_toolbar->deactivate();
    mi_open->deactivate();
    mi_save->deactivate();
    sm_operations->deactivate();
}
mb_menuBar->redraw();
}

Fl_Sorted_Choice *ch_programmers=(Fl_Sorted_Choice *)0;

static void cb_ch_programmers(Fl_Sorted_Choice* o, void*) {
  if (programmerConfigCB(CFG_LOAD)) {
    currentProgrammer = o->value();
    if (
        currentDevice>=0 &&
        currentProgrammer>=0
    ) {
        p_toolbar->activate();
        mi_open->activate();
        mi_save->activate();
        sm_operations->activate();
    }
} else {
    p_toolbar->deactivate();
    mi_open->deactivate();
    mi_save->deactivate();
    sm_operations->deactivate();
}
mb_menuBar->redraw();
}

Fl_Browser *ls_memdump=(Fl_Browser *)0;

Fl_Pack *p_toolbar=(Fl_Pack *)0;

static void cb_1f(Fl_RaiseButton*, void*) {
  loadHexFile();
}

static const char *idata_fileopen[] = {
"32 32 156 2",
"  \tc None",
". \tc #000000",
"+ \tc #FAA254",
"@ \tc #FEB66C",
"# \tc #FEC080",
"$ \tc #FECB97",
"% \tc #FED59C",
"& \tc #FED197",
"* \tc #FED69E",
"= \tc #FED298",
"- \tc #FECE93",
"; \tc #FECB8D",
"> \tc #FEC98C",
", \tc #FED7A0",
"\' \tc #FED39A",
") \tc #FED095",
"! \tc #FECC8F",
"~ \tc #EE9A50",
"{ \tc #925E34",
"] \tc #DE924C",
"^ \tc #DDDDDC",
"/ \tc #FFFFFF",
"( \tc #FEFEFF",
"_ \tc #FAFAFA",
": \tc #F5F5F5",
"< \tc #F0F0F1",
"[ \tc #EDEDEC",
"} \tc #E8E8E8",
"| \tc #E3E3E3",
"1 \tc #DFDFDF",
"2 \tc #DBDBD9",
"3 \tc #D5D5D5",
"4 \tc #D1D1D0",
"5 \tc #CCCCCC",
"6 \tc #C8C8C7",
"7 \tc #C3C3C2",
"8 \tc #BEBEBD",
"9 \tc #BCBCBD",
"0 \tc #E7E7E7",
"a \tc #E5E5E5",
"b \tc #E1E1E1",
"c \tc #CACAC8",
"d \tc #C4C4C5",
"e \tc #BFBFBD",
"f \tc #B7B7B5",
"g \tc #B1B1B1",
"h \tc #ABABAA",
"i \tc #A8A8A6",
"j \tc #A1A1A1",
"k \tc #9B9B9B",
"l \tc #979795",
"m \tc #909090",
"n \tc #8A8A89",
"o \tc #858583",
"p \tc #818180",
"q \tc #797978",
"r \tc #E4E4E4",
"s \tc #E4E4E3",
"t \tc #DFDFDD",
"u \tc #D8D8D7",
"v \tc #D3D3D1",
"w \tc #CBCBCA",
"x \tc #C5C5C5",
"y \tc #C2C2C2",
"z \tc #B3B3B1",
"A \tc #A5A5A3",
"B \tc #9E9E9D",
"C \tc #989897",
"D \tc #919190",
"E \tc #868685",
"F \tc #7F7F7E",
"G \tc #787877",
"H \tc #E8E8E7",
"I \tc #E1E1E0",
"J \tc #D4D4D3",
"K \tc #CECECC",
"L \tc #C7C7C6",
"M \tc #C2C2C1",
"N \tc #BABAB9",
"O \tc #B5B5B4",
"P \tc #AEAEAD",
"Q \tc #A0A09F",
"R \tc #999999",
"S \tc #949492",
"T \tc #878787",
"U \tc #7B7B78",
"V \tc #686865",
"W \tc #F8F8F8",
"X \tc #DCDCDC",
"Y \tc #E3E3E1",
"Z \tc #E9E9E8",
"` \tc #CCCCCB",
" .\tc #C6C6C5",
"..\tc #B8B8B7",
"+.\tc #939391",
"@.\tc #D5D5D4",
"#.\tc #D0D0CF",
"$.\tc #C4C4C3",
"%.\tc #BDBDBC",
"&.\tc #B1B1B0",
"*.\tc #AAAAA9",
"=.\tc #A3A3A2",
"-.\tc #929290",
";.\tc #818181",
">.\tc #EDEDED",
",.\tc #D9D9D8",
"\'.\tc #E7E7E5",
").\tc #E5E5E4",
"!.\tc #E0E0DF",
"~.\tc #D7D7D5",
"{.\tc #AFAFAE",
"].\tc #A1A1A0",
"^.\tc #8B8B8A",
"/.\tc #DCDCDB",
"(.\tc #BCBCBA",
"_.\tc #9F9F9E",
":.\tc #949493",
"<.\tc #D6D6D5",
"[.\tc #DCDCDA",
"}.\tc #B4B4B3",
"|.\tc #999998",
"1.\tc #8D8D8C",
"2.\tc #B9B9B8",
"3.\tc #C4C4C4",
"4.\tc #CDCDCC",
"5.\tc #D7D7D7",
"6.\tc #BFBFBE",
"7.\tc #B0B0AF",
"8.\tc #959594",
"9.\tc #D3D3D3",
"0.\tc #BCBCB9",
"a.\tc #C1C1BE",
"b.\tc #A6A6A4",
"c.\tc #9B9B9A",
"d.\tc #929291",
"e.\tc #A9A9A8",
"f.\tc #B6B6B5",
"g.\tc #B5B5B5",
"h.\tc #9D9D9D",
"i.\tc #9A9A99",
"j.\tc #C7C7C7",
"k.\tc #A2A2A1",
"l.\tc #A1A19F",
"m.\tc #9B9B9D",
"n.\tc #979797",
"o.\tc #C1C1C1",
"p.\tc #8A8A8A",
"q.\tc #90908E",
"r.\tc #91918F",
"s.\tc #888888",
"t.\tc #878786",
"u.\tc #838383",
"v.\tc #808080",
"w.\tc #7D7D7C",
"x.\tc #7B7B7A",
"y.\tc #787876",
"                                                                ",
"                          . . . . . . . .           .           ",
"                      . . . . . . . . . . . .     . .           ",
"                  . . . . .         . . . . . . . . .           ",
"                . . .                     . . . . . .           ",
"              . .                           . . . . .           ",
"                                          . . . . . .           ",
"                                        . . . . . . .           ",
"      . . . . . .                                               ",
"    . + @ @ @ @ + .                                             ",
"  . @ # $ % & $ # @ .                                           ",
". + # $ * = - ; > # + . . . . . . . . . . . . .                 ",
". @ $ , \' ) ! # @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ .               ",
". @ ; % & # @ + + ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ .               ",
". @ * = $ @ + { . . . . . . . . . . . . . . . . . . . . . . . . ",
". @ \' ) # @ ] . ^ / / / / ( _ : < [ } | 1 2 3 4 5 6 7 8 9 9 9 . ",
". @ & $ @ + { . / 0 a b ^ 3 4 c d e f g h i j k l m n o p p q . ",
". @ - # @ ] . / ^ 0 r r s t u v w x y e f z h A B C D E F G .   ",
". @ $ @ + { . a u | H [ [ r I 2 J K L M N O P i Q R S T U V .   ",
". @ # @ ] . W J X Y H [ H Z Y t u v `  .e ..z h A B +.T G .     ",
". @ @ + { . a K u b H H s s I 2 @.#.c $.%.f &.*.=.B -.;.V .     ",
". @ @ ] . >.6 #.,.I \'.).Y !.2 ~.4 `  .M N O {.i ].l ^.G .       ",
". @ + { . a 7 #.2 I I t /.,.@.4 K L 7 (.f &.h A _.:.;.V .       ",
". @ ] . b 8 6 4 <.[.,.u @.J #.` L $.%...}.P i ].|.1.U .         ",
". + { . a 2.3.4.4 @.v 4 #.K c  .7 %.2.}.{.*.=.B l ;.V .         ",
". ] . 5.&.2.6.$.c c c w 6 L $.M (...}.7.*.A Q 8.^.G .           ",
". { . 9.h O 2.0.6.$.$.$.7 a.%.N f }.{.*.b.Q c.d.;.V .           ",
". . ` e.h {.z }.O f.2.2...g.}.&.P *.b.].h.i.D ;.G .             ",
". . j.k.l.k.=.b.i i i b.A =.]._.m.i.n.S S S ;.U V .             ",
". o.1.p.n 1.q.r.r.r.r.r.q.1.n s.t.u.v.w.x.y.y.V .               ",
". . . . . . . . . . . . . . . . . . . . . . . . .               ",
"                                                                "
};
static Fl_Pixmap image_fileopen(idata_fileopen);

static const char *idata_fileopen1[] = {
"32 32 72 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #D5D5D5",
"#\tc #929292",
"$\tc #9E9E9E",
"%\tc #373737",
"&\tc #818181",
"*\tc #A6A6A6",
"=\tc #363636",
"-\tc #ACACAC",
";\tc #2E2E2E",
">\tc #E1E1E1",
",\tc #B7B7B7",
"\'\tc #888888",
")\tc #181818",
"!\tc #C0C0C0",
"~\tc #636363",
"{\tc #B3B3B3",
"]\tc #171717",
"^\tc #8D8D8D",
"/\tc #EAEAEA",
"(\tc #A9A9A9",
"_\tc #2A2A2A",
":\tc #040404",
"<\tc #C8C8C8",
"[\tc #EEEEEE",
"}\tc #B0B0B0",
"|\tc #CFCFCF",
"1\tc #B5B5B5",
"2\tc #BBBBBB",
"3\tc #FDFDFD",
"4\tc #F3F3F3",
"5\tc #C4C4C4",
"6\tc #E4E4E4",
"7\tc #949494",
"8\tc #CCCCCC",
"9\tc #E8E8E8",
"0\tc #D8D8D8",
"a\tc #A3A3A3",
"b\tc #959595",
"c\tc #7D7D7D",
"d\tc #B6B6B6",
"e\tc #979797",
"f\tc #D6D6D6",
"g\tc #8E8E8E",
"h\tc #F0F0F0",
"i\tc #F4F4F4",
"j\tc #8B8B8B",
"k\tc #EBEBEB",
"l\tc #E5E5E5",
"m\tc #A0A0A0",
"n\tc #E9E9E9",
"o\tc #BDBDBD",
"p\tc #D1D1D1",
"q\tc #BFBFBF",
"r\tc #BABABA",
"s\tc #E7E7E7",
"t\tc #969696",
"u\tc #C3C3C3",
"v\tc #989898",
"w\tc #4D4D4D",
"x\tc #585858",
"y\tc #909090",
"z\tc #F6F6F6",
"A\tc #AFAFAF",
"B\tc #CACACA",
"C\tc #FAFAFA",
"D\tc #DADADA",
"E\tc #DEDEDE",
"F\tc #FCFCFC",
"G\tc #505050",
"                                ",
"             ........     .     ",
"           ............  ..     ",
"         .....    .........     ",
"        ...          ......     ",
"       ..             .....     ",
"                     ......     ",
"                    .......     ",
"   ......                       ",
"  .++++++.                      ",
" .++++++++.                     ",
".+++++@++++.............        ",
".+++++++++++++++++++++++.       ",
".++++.++++++++++++++++++.       ",
".++++#+.........................",
".++++++.+++++++++++++++++++++++.",
".+++$+..+.....................+.",
".+++++.+++%&++*+=-+++++++++;>+. ",
".++,+..+.+++++++++\'+)!~{]^+/++. ",
".++++.++++++(++++++++++++++++.  ",
".+++..+._+++:+++<+[+}|[12++++.  ",
".+++.++.3+++++4+56-+7++8/<++.   ",
".++..+.9++++|0a5+b+cde$f++++.   ",
".++.++.+++ghc+i6b+j#+klm+++.    ",
".+..+.+++++n++o-+jpqrst++++.    ",
".+.++.+u+vw+xk|+c#q+y}+)++.     ",
".+.+.+zAB+++++C++++++z++++.     ",
"..++.++++D+++++++++E+++.+.      ",
"..+.+++++++F++++++++++G++.      ",
".+++++++++++++++++++++++.       ",
".........................       ",
"                                "
};
static Fl_Pixmap image_fileopen1(idata_fileopen1);

static void cb_20(Fl_RaiseButton*, void*) {
  saveHexFile();
}

static const char *idata_filesave[] = {
"32 32 79 1",
" \tc None",
".\tc #000000",
"+\tc #C1C1C1",
"@\tc #515151",
"#\tc #9B9B9B",
"$\tc #FFFFFF",
"%\tc #2B2B2B",
"&\tc #868686",
"*\tc #818181",
"=\tc #828282",
"-\tc #7E7E7E",
";\tc #797979",
">\tc #C3C3C3",
",\tc #7A7A7A",
"\'\tc #757575",
")\tc #8D8D8D",
"!\tc #727272",
"~\tc #6D6D6D",
"{\tc #6F6F6F",
"]\tc #6A6A6A",
"^\tc #656565",
"/\tc #676767",
"(\tc #626262",
"_\tc #C0C0C0",
":\tc #BBBBBB",
"<\tc #B6B6B6",
"[\tc #5F5F5F",
"}\tc #5A5A5A",
"|\tc #BDBDBD",
"1\tc #B8B8B8",
"2\tc #B3B3B3",
"3\tc #AEAEAE",
"4\tc #A9A9A9",
"5\tc #A4A4A4",
"6\tc #A0A0A0",
"7\tc #5C5C5C",
"8\tc #575757",
"9\tc #535353",
"0\tc #B5B5B5",
"a\tc #B0B0B0",
"b\tc #ABABAB",
"c\tc #A6A6A6",
"d\tc #A1A1A1",
"e\tc #9C9C9C",
"f\tc #979797",
"g\tc #939393",
"h\tc #8E8E8E",
"i\tc #898989",
"j\tc #545454",
"k\tc #B1B1B1",
"l\tc #ACACAC",
"m\tc #A8A8A8",
"n\tc #A3A3A3",
"o\tc #9E9E9E",
"p\tc #999999",
"q\tc #949494",
"r\tc #8F8F8F",
"s\tc #8A8A8A",
"t\tc #7C7C7C",
"u\tc #777777",
"v\tc #8C8C8C",
"w\tc #878787",
"x\tc #747474",
"y\tc #606060",
"z\tc #717171",
"A\tc #6C6C6C",
"B\tc #5D5D5D",
"C\tc #585858",
"D\tc #E6E6E6",
"E\tc #555555",
"F\tc #969696",
"G\tc #919191",
"H\tc #353535",
"I\tc #D4D4D4",
"J\tc #838383",
"K\tc #AFAFAF",
"L\tc #7F7F7F",
"M\tc #7B7B7B",
"N\tc #737373",
"         ...                    ",
"        .+++...                 ",
"        .++@###...              ",
"        .++@######...           ",
"       .+++@$$$######...        ",
"       .++@$$$$$$$######...     ",
"       .++@$$$$$$$$$$######%..  ",
"      .+++@$$$$$$$$$$$$$###%&*. ",
"      .++@$$$$$$$$$$$$$$$$%=-;>.",
"      .++@$$$$$$$$$$$$$$$$%,\'>).",
"     .+++@$$$$$$$$$$$$$$$$%!~>. ",
"     .++@$$$$$$$$$$$$$$$$%{]^>. ",
"     .++@$$$$$$$$$$$$$$$$%/(>). ",
"    .+_:<%%%$$$$$$$$$$$$$%[}>.  ",
"    .|123456%%%$$$$$$$$$%789>.  ",
"    .0abcdefghi%%%$$$$$$%j9>).  ",
"   .klmnopqrs&*tu!%%%$$$%99>.   ",
"   .456...vw=-;x{]^y7%%%999>.   ",
"   .de.$$$...\'zA/(BCj99999>).   ",
"  .opq.$DD$$$...[}E9999999>.    ",
"  .FGv.$DDDDD$$$.H.9999999>.    ",
"  .hi.$DDDDDDDDDDHw...999>).    ",
" .s&*.$IIIIIIIIIHwwww.999>.     ",
" .=-;.$+++++++++HJJJJ.999>.     ",
"  ...$KKKKKKKKKKHLLL.999>).     ",
"     ...oooooooHMMMM.999>.      ",
"        ...ooooHuuuu.999>.      ",
"           ...oHNNN.999>).      ",
"              ...{{.999>.       ",
"                 ...999>.       ",
"                    .....       ",
"                                "
};
static Fl_Pixmap image_filesave(idata_filesave);

static const char *idata_filesave1[] = {
"32 32 29 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #EAEAEA",
"#\tc #B3B3B3",
"$\tc #818181",
"%\tc #BCBCBC",
"&\tc #ABABAB",
"*\tc #A6A6A6",
"=\tc #A1A1A1",
"-\tc #909090",
";\tc #838383",
">\tc #595959",
",\tc #9F9F9F",
"\'\tc #858585",
")\tc #747474",
"!\tc #6F6F6F",
"~\tc #686868",
"{\tc #626262",
"]\tc #383838",
"^\tc #090909",
"/\tc #474747",
"(\tc #535353",
"_\tc #F9F9F9",
":\tc #9C9C9C",
"<\tc #8A8A8A",
"[\tc #7F7F7F",
"}\tc #7B7B7B",
"|\tc #777777",
"         ...                    ",
"        .+++...                 ",
"        .++.+++...              ",
"        .++.+..+++...           ",
"       .+++.+++...+++...        ",
"       .++.+++++++...+++...     ",
"       .++.++++++++++...+++...  ",
"      .+++.+++++++++++++..+.++. ",
"      .++.++++++++++++++++.++.+.",
"      .++.++++++++++++++++.+.++.",
"     .+++.++++++++++++++++.+.+. ",
"     .++.++++++++++++++++.+..+. ",
"     .++.++++++++++++++++.+.++. ",
"    .++++...+++++++++++++.+.+.  ",
"    .+@#++++...+++++++++.$..+.  ",
"    .+%&*=-++++...++++++.+.++.  ",
"   .+++++++;>,++++...+++.+.+.   ",
"   .+++...++++\')!+++~......+.   ",
"   .++.+++...++++{].+++++.++.   ",
"  .+++.+.++++...++++^/(((.+.    ",
"  .+++.+....++++...++++(..+.    ",
"  .++.++++++++.++.+...+(.++.    ",
" .+++.+._______+.++++.+(.+.     ",
" .+++.+.:::::::+.+;++.+..+.     ",
"  ...++++<<<<<++.+[+.++.++.     ",
"     ...++++..+.++}+.+(.+.      ",
"        ...++++.+|++.+..+.      ",
"           ...+.+++.++.++.      ",
"              ...++.+(.+.       ",
"                 ...++++.       ",
"                    .....       ",
"                                "
};
static Fl_Pixmap image_filesave1(idata_filesave1);

static void cb_pb_operation(Fl_RaiseButton*, void*) {
  processOperation(CHIP_READ);
}

static const char *idata_read_pic[] = {
"32 32 180 2",
"  \tc None",
". \tc #878787",
"+ \tc #000000",
"@ \tc #2F2F2F",
"# \tc #5D5D5D",
"$ \tc #818181",
"% \tc #9A9A9A",
"& \tc #8E8E8E",
"* \tc #666666",
"= \tc #131313",
"- \tc #545552",
"; \tc #9FA0A0",
"> \tc #CBD7D7",
", \tc #CEDADE",
"\' \tc #D1E1E5",
") \tc #CBD8D9",
"! \tc #C9D5D5",
"~ \tc #A9A9A9",
"{ \tc #4B4B4A",
"] \tc #7F7F7F",
"^ \tc #B2B8B9",
"/ \tc #D8E4E4",
"( \tc #575E5F",
"_ \tc #A7B8B9",
": \tc #E1F2F2",
"< \tc #D4DADA",
"[ \tc #797979",
"} \tc #575757",
"| \tc #B4BAB9",
"1 \tc #333535",
"2 \tc #838788",
"3 \tc #D4DFE1",
"4 \tc #7D8B8D",
"5 \tc #CDD6D8",
"6 \tc #B3B7B8",
"7 \tc #303030",
"8 \tc #575858",
"9 \tc #303131",
"0 \tc #343738",
"a \tc #A4ABAF",
"b \tc #7F8D8F",
"c \tc #E2EFF0",
"d \tc #30302F",
"e \tc #D9E5E4",
"f \tc #9F9FA3",
"g \tc #2F3030",
"h \tc #9E9FA3",
"i \tc #343737",
"j \tc #4F5C5E",
"k \tc #B0C3C3",
"l \tc #C1C1C1",
"m \tc #BFBFBF",
"n \tc #DBDBDB",
"o \tc #DADBDB",
"p \tc #373E3E",
"q \tc #768D90",
"r \tc #D6E2E4",
"s \tc #080808",
"t \tc #858585",
"u \tc #4C4C4B",
"v \tc #C8D0D0",
"w \tc #313434",
"x \tc #4B5B5E",
"y \tc #A2B2B6",
"z \tc #505050",
"A \tc #0C0C0C",
"B \tc #D5E2E5",
"C \tc #303132",
"D \tc #3E494A",
"E \tc #7F979B",
"F \tc #090909",
"G \tc #E1E9ED",
"H \tc #2F3131",
"I \tc #3D4546",
"J \tc #7F9B9D",
"K \tc #C3C3C3",
"L \tc #0A0A0A",
"M \tc #3C4546",
"N \tc #D3D3D3",
"O \tc #D8E4E5",
"P \tc #010303",
"Q \tc #3B4749",
"R \tc #78979B",
"S \tc #A6A6A6",
"T \tc #C6D4D4",
"U \tc #575F60",
"V \tc #2F2F30",
"W \tc #000102",
"X \tc #303334",
"Y \tc #26373A",
"Z \tc #9CB5B9",
"` \tc #161616",
" .\tc #B3B8B8",
"..\tc #B7C5C9",
"+.\tc #A0A4A9",
"@.\tc #575859",
"#.\tc #000101",
"$.\tc #2F3031",
"%.\tc #0B1213",
"&.\tc #6E898C",
"*.\tc #D7E3E5",
"=.\tc #848484",
"-.\tc #D2E5E8",
";.\tc #D3DFE0",
">.\tc #7E8080",
",.\tc #04090A",
"\'.\tc #465A5C",
").\tc #9FB6B6",
"!.\tc #929292",
"~.\tc #B5BABC",
"{.\tc #7E8B8D",
"].\tc #899091",
"^.\tc #070A0B",
"/.\tc #010202",
"(.\tc #040909",
"_.\tc #3E4A4C",
":.\tc #5E7578",
"<.\tc #E6F4F6",
"[.\tc #2E2E2D",
"}.\tc #AAAFB0",
"|.\tc #667375",
"1.\tc #2B3739",
"2.\tc #0D1314",
"3.\tc #040707",
"4.\tc #020304",
"5.\tc #010203",
"6.\tc #030606",
"7.\tc #0A1213",
"8.\tc #223638",
"9.\tc #5C7375",
"0.\tc #D3D9DB",
"a.\tc #585858",
"b.\tc #B4B9BA",
"c.\tc #9DB2B2",
"d.\tc #5C7377",
"e.\tc #283739",
"f.\tc #162021",
"g.\tc #111B1C",
"h.\tc #0F1A1B",
"i.\tc #111E1F",
"j.\tc #233537",
"k.\tc #566F73",
"l.\tc #9CB6B6",
"m.\tc #E3EEEE",
"n.\tc #7F7F80",
"o.\tc #0CFDFA",
"p.\tc #373736",
"q.\tc #898989",
"r.\tc #AEB7B9",
"s.\tc #93A4A4",
"t.\tc #6B8185",
"u.\tc #658287",
"v.\tc #608287",
"w.\tc #5E7E83",
"x.\tc #91A5AA",
"y.\tc #D9E4E6",
"z.\tc #8B8B8B",
"A.\tc #0AE1DF",
"B.\tc #E0E0E0",
"C.\tc #040404",
"D.\tc #515151",
"E.\tc #989898",
"F.\tc #C2C2C2",
"G.\tc #060606",
"H.\tc #06AFB1",
"I.\tc #535352",
"J.\tc #8C8C8C",
"K.\tc #E8E8E8",
"L.\tc #010101",
"M.\tc #333333",
"N.\tc #404041",
"O.\tc #555554",
"P.\tc #3D3D3C",
"Q.\tc #555653",
"R.\tc #343434",
"S.\tc #424243",
"T.\tc #121213",
"U.\tc #4A4A4B",
"V.\tc #0D0D0C",
"W.\tc #0A0A0B",
"                                                                ",
"                . + + + + + + .                                 ",
"            + + @ # $ % % & * = + +                             ",
"          + - $ ; > , \' \' , ) ! ~ { + @ ] @ @                   ",
"        + - ^ /             ( _ : < [ + @ @ } +                 ",
"      + - |                 1 2 3 4 5 # + } + ] }               ",
"    + - 6               7 7 8 9 0 a b c d + } @ @ ]             ",
"    + $ e             @ f f 8 g h i j k l + @ @ m @ @           ",
"  . @ ;             @ ] n o @ h g 9 p q r s t f @ @ @ @         ",
"  + u v             @ ] n @ ] @ g g w x y z A @ @ @ @ ] +       ",
"  + $ B         @ @ } @ @ f @ @ @ g C D E % F @ @ @ f + +       ",
"  + % G       @ f f } @ ] @ @ @ @ g H I J K L @ @ f + + + +     ",
"  + % G     7 ] n n @ f @ @ @ @ @ g H M J N L @ f + + + f +     ",
"  + & O     7 ] o @ ] @ @ @ + @ @ @ P Q R S L f + + + n f }     ",
"  + { T U 1 8 g @ ] @ + @ + @ + V W X Y Z } F + + + n n f f }   ",
"  . `  ...+.@.g ] @ + @ + @ + @ #.$.%.&.*.+ =.+ + + + n ] } }   ",
"    + & -.;.0 >.g #.@ + @ + V #.g ,.\'.).!.+ + + f +   @ } }     ",
"    + { ~.{.].^.P g #.#.#.@ #./.(._.:.<.[.=.+ n f }   f @ ]     ",
"    } + [ }.|.1.2.3.4.5./.P 6.7.8.9.0.a.+ + n n f f }   @       ",
"    @   + [ b.c.d.e.f.g.h.i.j.k.l.m.a.+ n.o.+ n ] } }   @       ",
"    @   + + p.q.r.s.t.u.v.w.x.y.z.[.+ { A.A.B.+ } } f           ",
"        + + + + C.D.E.F.N S } + + =.G.H.H.I.J.K.L.]             ",
"          + + + t + + + + + + =.+ + n + M.{ I.J.K.+             ",
"          + + + + + ] + + ] + + + + + n + M.N.O.J.K.+           ",
"            + + + + + ] ] + + + f +   @ } + M.N.I.J.K.+         ",
"              + + + + @ } + + n f }   f @ ] + M.N.I.J.K.+       ",
"                + + + + @ + n n f f }   @     + M.P.Q.J.K.+     ",
"                  + + + @ + + n ] } }   @       + R.P.Q.J.K.+   ",
"                    + @ + @   @ } } f             + R.S.Q.J.B.+ ",
"                              f @ ]                 + R.S.Q.J.T.",
"                                @                     + R.S.U.V.",
"                                @                       + W.W.  "
};
static Fl_Pixmap image_read_pic(idata_read_pic);

static const char *idata_read_pic1[] = {
"32 32 11 1",
" \tc None",
".\tc #FFFFFF",
"+\tc #000000",
"@\tc #2F2F2F",
"#\tc #0A0A0A",
"$\tc #6E6E6E",
"%\tc #737373",
"&\tc #313131",
"*\tc #272727",
"=\tc #121212",
"-\tc #0C0C0C",
"                                ",
"        .++++++.                ",
"      ++++....++++              ",
"     +...........++....         ",
"    +...      +....+++.+        ",
"   +..        +..+.++.+..       ",
"  +..       ++.++.+.++.++.      ",
"  +..      +..++.++..+++.+.     ",
" .+.      ....+.+++..+..+++.    ",
" ++.      +..+.+++++.++++++.+   ",
" +..    ++.++.++@+++..+.++.++   ",
" +..   +..++.++@@#++..+@+.++++  ",
" +..  ....+.++..@.++..++.+++.+  ",
" +..  +..+.++.+...++..+.+++..+  ",
" ++.++.++.++.+.+.+.+.+++++..$.. ",
" .+...++.++.+.+.+.+..+.++++.++. ",
"  +...+.++.+.+.+.++..+++.+ ++.  ",
"  ++.+.++.+++.+++++.+.+..+ .+.  ",
"  .+..++++++++++++.+++..$.. +   ",
"  . +....++++++...++..+.%+. .   ",
"  . +++..........+++...++..     ",
"    ++++++....+++.+..+..+.      ",
"     +++.++++++.++.++&+..+      ",
"     +++++.++.+++++.+*++..+     ",
"      +++++..+++.+ +.++++..+    ",
"       +++++.++..+ .+.+.++..+   ",
"        ++++.+..$.. +  +.++..+  ",
"         +++.++.++. .   +.++..+ ",
"          +.+. +++.      +.++..+",
"               .+.        +.++.=",
"                +          +...-",
"                @           +## "
};
static Fl_Pixmap image_read_pic1(idata_read_pic1);

static void cb_pb_operation1(Fl_RaiseButton*, void*) {
  processOperation(CHIP_ERASE);
}

static const char *idata_erase_pic[] = {
"32 32 15 1",
" \tc None",
".\tc #2F2F2F",
"+\tc #9F9FA3",
"@\tc #575757",
"#\tc #7F7F7F",
"$\tc #C0C0FF",
"%\tc #DBDBDB",
"&\tc #000000",
"*\tc #8080FF",
"=\tc #BFBFBF",
"-\tc #000080",
";\tc #FFFFFF",
">\tc #FFC0C0",
",\tc #C00000",
"\'\tc #800000",
"                                ",
"                                ",
"                ..              ",
"               .++@.#..         ",
"        $$    .#%%. ..@&        ",
"       $**$   .#%.+..@&#@       ",
"      $****$..@..+..@&@..#      ",
"     $******$+@.+....+..=..     ",
"    $********$.+......++....    ",
"    -*********$............#&   ",
"    &-*********$..........+&&   ",
"     &-*********$........+&&&&  ",
"      &-*********$......+&&&+&  ",
"      .&-*******;;>...&+&&&%+@  ",
"    ..@.&-*****;;,,>.&+&&&%%++@ ",
"   .++@.#&-***;;,,,,>#&&&&&%#@@ ",
"  .#%%.#.&&-*;;,,,,,,>&&+& .@@  ",
"  .#%.#&&.&&-;,,,,,,,,>%+@ +.#  ",
"  @..#&&&&&&&\',,,,,,,,,>++@ .   ",
"  . &&#&&&&&&&\',,,,,,,,,>@@ .   ",
"  . &&&#&&&&&&&\',,,,,,,>>>+     ",
"    &&&&#&&&&&&&\',,,,,>>>>      ",
"     &&&&#&&&&#&&\',,,>>>>&      ",
"     &&&&&#&&#&&&&\',>>>>&       ",
"      &&&&&##&&&+&&\'>>>&        ",
"       &&&&.@&&%+@ &\'>&         ",
"        &&&&.&%%++@ .           ",
"         &&&.&&%#@@ .           ",
"          &.&. .@@+             ",
"               +.#              ",
"                .               ",
"                .               "
};
static Fl_Pixmap image_erase_pic(idata_erase_pic);

static const char *idata_erase_pic1[] = {
"32 32 9 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #DCDCDC",
"#\tc #8D8D8D",
"$\tc #2F2F2F",
"%\tc #6E6E6E",
"&\tc #393939",
"*\tc #0D0D0D",
"                                ",
"                                ",
"                ..              ",
"               .+++++++         ",
"        ++    ++++. ..+.        ",
"       +..+   .++.+.@+.++       ",
"      ++..++..+..+..+.+..+      ",
"     ++.##..++..+....+..+.+     ",
"    ++.####..+.+..$$..++...+    ",
"    .++#####..+..$$$$......+.   ",
"    ..++#####..+..$$$$$$..+..   ",
"     ..++#####..+..$$$$..+....  ",
"      ..++#####..+..$+..+...+.  ",
"      +..++###..+++....+...++.  ",
"    ..+...++#..++..+..+...++%++ ",
"   .++..+..++.++....++.....+..+ ",
"  ++++.++...+++..&&..+..+. ..+  ",
"  .++.+..+...+..&&&&..+++. +.+  ",
"  +..+.........+&&&&&..++++ .   ",
"  + ..+.......+++&&&&&..+.* +   ",
"  + ...+.......+++&&&..++++     ",
"    ....+.......+++&..++++      ",
"     ....+....+..++..++++.      ",
"     .....+..+....+.++++.       ",
"      .....++...+...+++.        ",
"       .....+..++. ..+.         ",
"        ....+.++%++ +           ",
"         ...+..+..+ +           ",
"          .+.+ ...+             ",
"               +.+              ",
"                .               ",
"                $               "
};
static Fl_Pixmap image_erase_pic1(idata_erase_pic1);

static void cb_pb_operation2(Fl_RaiseButton*, void*) {
  processOperation(CHIP_BLANCK_CHECK);
}

static const char *idata_check_pic[] = {
"32 32 252 2",
"  \tc None",
". \tc #385467",
"+ \tc #0A3F68",
"@ \tc #0D4068",
"# \tc #B9BDBE",
"$ \tc #C9CDCF",
"% \tc #D6D9DB",
"& \tc #C9D3D9",
"* \tc #9AB1C0",
"= \tc #819EAD",
"- \tc #C8CACA",
"; \tc #DDE1E4",
"> \tc #D8E1E6",
", \tc #CFDCE3",
"\' \tc #C9D8E2",
") \tc #BCD1DD",
"! \tc #ADC7D5",
"~ \tc #9CBBCB",
"{ \tc #84A7BA",
"] \tc #668EA4",
"^ \tc #677076",
"/ \tc #2F2F2F",
"( \tc #CFD1D3",
"_ \tc #E5EBEE",
": \tc #D2E1E9",
"< \tc #B3CDDB",
"[ \tc #9CBED1",
"} \tc #84AEC6",
"| \tc #5495B5",
"1 \tc #5295B6",
"2 \tc #3885AD",
"3 \tc #4187AC",
"4 \tc #4C86A6",
"5 \tc #427797",
"6 \tc #9FA6AE",
"7 \tc #575757",
"8 \tc #7F7F7F",
"9 \tc #BABFC2",
"0 \tc #E0E8EA",
"a \tc #C8DAE3",
"b \tc #A8C8D8",
"c \tc #7FAFC7",
"d \tc #5594B5",
"e \tc #FFFFFF",
"f \tc #136E9D",
"g \tc #0F699A",
"h \tc #166A99",
"i \tc #1F6C99",
"j \tc #2C6F97",
"k \tc #24668D",
"l \tc #525456",
"m \tc #000000",
"n \tc #8E9CA2",
"o \tc #D2DBE0",
"p \tc #C3D7E0",
"q \tc #90B9CE",
"r \tc #65A1BD",
"s \tc #3A86AD",
"t \tc #0D5F92",
"u \tc #0C5C8F",
"v \tc #0D5C8F",
"w \tc #105E90",
"x \tc #145E8C",
"y \tc #18547A",
"z \tc #305777",
"A \tc #0F4269",
"B \tc #AEC2CD",
"C \tc #C8D8E0",
"D \tc #A2C2D3",
"E \tc #659EBD",
"F \tc #3B88AC",
"G \tc #1A72A1",
"H \tc #0F6A9A",
"I \tc #0D5F91",
"J \tc #0C5C8E",
"K \tc #0C5B8E",
"L \tc #0E5C8F",
"M \tc #0F5C8E",
"N \tc #105581",
"O \tc #10446E",
"P \tc #4C4F51",
"Q \tc #09395E",
"R \tc #6A8998",
"S \tc #BCCED8",
"T \tc #B4CDDA",
"U \tc #82AFC7",
"V \tc #3E87AE",
"W \tc #2278A3",
"X \tc #0F6A9B",
"Y \tc #0C6395",
"Z \tc #0D6093",
"` \tc #0D5E91",
" .\tc #0E5E91",
"..\tc #0D5484",
"+.\tc #0D4671",
"@.\tc #243F55",
"#.\tc #9F9FA3",
"$.\tc #BFBFBF",
"%.\tc #093E67",
"&.\tc #82A3B3",
"*.\tc #B7CCD7",
"=.\tc #8EB6CB",
"-.\tc #5A96B6",
";.\tc #2176A1",
">.\tc #116B9B",
",.\tc #0C6295",
"\'.\tc #0D5E90",
").\tc #0E5D90",
"!.\tc #0E5587",
"~.\tc #0B446C",
"{.\tc #123B5D",
"].\tc #093E66",
"^.\tc #7DA0B1",
"/.\tc #A6C1D0",
"(.\tc #72A5C0",
"_.\tc #4184A9",
":.\tc #156D9C",
"<.\tc #0D6698",
"[.\tc #196595",
"}.\tc #0E5E90",
"|.\tc #0E5485",
"1.\tc #0C3B62",
"2.\tc #6D93A8",
"3.\tc #98B7C9",
"4.\tc #619AB6",
"5.\tc #2D78A1",
"6.\tc #126999",
"7.\tc #0C5F92",
"8.\tc #176494",
"9.\tc #0D5081",
"0.\tc #093961",
"a.\tc #0A3860",
"b.\tc #093D65",
"c.\tc #58849E",
"d.\tc #89ADC1",
"e.\tc #5790AF",
"f.\tc #25739C",
"g.\tc #0F6596",
"h.\tc #0E5B8E",
"i.\tc #0C4D7B",
"j.\tc #08365E",
"k.\tc #0B3558",
"l.\tc #062A43",
"m.\tc #467490",
"n.\tc #789FB6",
"o.\tc #4986A6",
"p.\tc #1D6C98",
"q.\tc #0C5F91",
"r.\tc #0C5D90",
"s.\tc #0D5D90",
"t.\tc #0D5A8C",
"u.\tc #0E5889",
"v.\tc #0B4773",
"w.\tc #073056",
"x.\tc #193145",
"y.\tc #052337",
"z.\tc #255672",
"A.\tc #5B88A1",
"B.\tc #4780A0",
"C.\tc #196693",
"D.\tc #0C5A8D",
"E.\tc #0C5A8C",
"F.\tc #0C5689",
"G.\tc #0C578A",
"H.\tc #0D578A",
"I.\tc #0E5787",
"J.\tc #0E507C",
"K.\tc #0A3D66",
"L.\tc #073055",
"M.\tc #243947",
"N.\tc #DBDBDB",
"O.\tc #000101",
"P.\tc #356786",
"Q.\tc #3B7395",
"R.\tc #1C628E",
"S.\tc #0E5A8A",
"T.\tc #0E598A",
"U.\tc #0D588A",
"V.\tc #1F6291",
"W.\tc #0B5183",
"X.\tc #0B5082",
"Y.\tc #0F5383",
"Z.\tc #0F4C7A",
"`.\tc #0D456E",
" +\tc #083659",
".+\tc #03192A",
"++\tc #222324",
"@+\tc #00060A",
"#+\tc #10425C",
"$+\tc #225A7F",
"%+\tc #185883",
"&+\tc #0E5281",
"*+\tc #0D5382",
"=+\tc #1B517C",
"-+\tc #0A416B",
";+\tc #08365B",
">+\tc #082A48",
",+\tc #1A374C",
"\'+\tc #0A395E",
")+\tc #0A4370",
"!+\tc #0D4879",
"~+\tc #114A7C",
"{+\tc #1E5582",
"]+\tc #1D5380",
"^+\tc #1E5481",
"/+\tc #1E5380",
"(+\tc #1E5280",
"_+\tc #1E517E",
":+\tc #1C4B77",
"<+\tc #18436B",
"[+\tc #072A4E",
"}+\tc #052141",
"|+\tc #020C16",
"1+\tc #454545",
"2+\tc #282F35",
"3+\tc #053057",
"4+\tc #0A3E69",
"5+\tc #0A416E",
"6+\tc #08416F",
"7+\tc #06406E",
"8+\tc #073F6C",
"9+\tc #083D6C",
"0+\tc #083C6A",
"a+\tc #063763",
"b+\tc #052E58",
"c+\tc #072B53",
"d+\tc #051E40",
"e+\tc #4D5255",
"f+\tc #272F35",
"g+\tc #052448",
"h+\tc #053054",
"i+\tc #05325B",
"j+\tc #063660",
"k+\tc #05335D",
"l+\tc #04325D",
"m+\tc #04305B",
"n+\tc #052951",
"o+\tc #052346",
"p+\tc #06213E",
"q+\tc #020B10",
"r+\tc #363B3E",
"s+\tc #000306",
"t+\tc #082A49",
"u+\tc #06264B",
"v+\tc #072949",
"w+\tc #052545",
"x+\tc #000102",
"y+\tc #000407",
"z+\tc #242728",
"A+\tc #2B2B2B",
"B+\tc #031B2D",
"C+\tc #2B2D2E",
"              . + + + + +                                       ",
"          @ + # $ % & * = + +                                   ",
"        + - ; > , \' ) ! ~ { ] + ^ /                             ",
"      + ( _ : < [ } | 1 2 3 4 5 + 6 7 / 8 / /                   ",
"    + 9 0 a b c d e e f g h i j k + l   / / 7 m                 ",
"  @ n o p q r s e e e e t u v w x y z / / 7 m 8 7               ",
"  A B C D E F G H e e I J K K L M N O P 7 m 7 / / 8             ",
"Q R S T U V W X Y Z ` u u u v  . ...+.@./ #./ / $./ /           ",
"%.&.*.=.-.;.>.,.Z  .\'.u v v ). . .!.~.{./ / #.#./ / / /         ",
"].^./.(._.:.<.e e e e e [.}. . . .|.+ 1./ / / / / / / 8 m       ",
"%.2.3.4.5.6.Y 7. .e e e 8.}. . .L 9.0.a./ / / / / / #.m m       ",
"b.c.d.e.f.g.7.`  .e e e v ). . .h.i.j.k./ / / / / #.m m m m     ",
"l.m.n.o.p.q.u r.s.e e e t.v v }.u.v.w.x./ / / / #.m m m #.m     ",
"y.z.A.B.C.J K D.E.e e e F.G.H.I.J.K.L.M./ / m #.m m m N.#.7     ",
"  O.P.Q.R.S.T.U.V.e e e W.X.Y.Z.`. +.+++/ m #.m m m N.N.#.#.7   ",
"  @+#+$+%+&+*+e e e e e e e =+-+;+>+,+/ m 8 m m m m m N.8 7 7   ",
"    m \'+)+!+~+{+]+^+/+(+_+:+<+[+}+|+1+m #.m m m #.m   / 7 7     ",
"    2+m 3+4+5+6+7+8+9+0+a+b+c+d+m e+m 8 m m m N.#.7   #./ 8     ",
"    7 f+m g+h+i+j+k+l+m+n+o+p+q+r+m #.m m m N.N.#.#.7   /       ",
"    /   s+m m m t+u+v+w+x+m y+z+m 8 m m m m m N.8 7 7   /       ",
"    /   m m y+A+m m m m B+C+m m 8 m m m #.m   / 7 7 #.          ",
"        m m m m 8 m m m m m m 8 m m m N.#.7   #./ 8             ",
"          m m m m 8 m m m m 8 m m m N.N.#.#.7   /               ",
"          m m m m m 8 m m 8 m m m m m N.8 7 7   /               ",
"            m m m m m 8 8 m m m #.m   / 7 7 #.                  ",
"              m m m m / 7 m m N.#.7   #./ 8                     ",
"                m m m m / m N.N.#.#.7   /                       ",
"                  m m m / m m N.8 7 7   /                       ",
"                    m / m /   / 7 7 #.                          ",
"                              #./ 8                             ",
"                                /                               ",
"                                /                               "
};
static Fl_Pixmap image_check_pic(idata_check_pic);

static const char *idata_check_pic1[] = {
"32 32 45 1",
" \tc None",
".\tc #4D4D4D",
"+\tc #333333",
"@\tc #000000",
"#\tc #FFFFFF",
"$\tc #F9F9F9",
"%\tc #4A4A4A",
"&\tc #EDEDED",
"*\tc #313131",
"=\tc #C6C6C6",
"-\tc #2C2C2C",
";\tc #2E2E2E",
">\tc #3D3D3D",
",\tc #555555",
"\'\tc #181818",
")\tc #AEAEAE",
"!\tc #818181",
"~\tc #323232",
"{\tc #707070",
"]\tc #4E4E4E",
"^\tc #646464",
"/\tc #282828",
"(\tc #575757",
"_\tc #484848",
":\tc #2F2F2F",
"<\tc #D9D9D9",
"[\tc #898989",
"}\tc #BABABA",
"|\tc #868686",
"1\tc #212121",
"2\tc #909090",
"3\tc #7C7C7C",
"4\tc #ACACAC",
"5\tc #626262",
"6\tc #DADADA",
"7\tc #3B3B3B",
"8\tc #1C1C1C",
"9\tc #0A0A0A",
"0\tc #9D9D9D",
"a\tc #A1A1A1",
"b\tc #6E6E6E",
"c\tc #737373",
"d\tc #232323",
"e\tc #929292",
"f\tc #303030",
"       .+++++                   ",
"     @@######@$                 ",
"    @##########@#@              ",
"   @####@@@@@@##@######         ",
"  @####@@##@@@@#%@# @@#@        ",
" @###@@@####@@@@&@#@@#@##       ",
" @###@@@@##@@@@*=-@##@#@@#      ",
";####@@@@@@@>,\')#!@@@#@@#@#     ",
"~###@@@@@@@@@@*{##@@@@##@@@#    ",
"~##]@@@#####@@{^##@%@@@@@@@#@   ",
"~##/@@@@@###@@({##@@_:::@@#@@   ",
"*##<@@@(@###@@[}##@@|::@@#@@@@  ",
"1##2@@@3@###@45##6@@7#@@#@@@#@  ",
"8###@@9@@###@02##a@##@@#@@@##@  ",
" @##@@@@@###@@@(#@@@#@#@@@##b## ",
" @###@@#######@c#@#d@#@@@@@#@@# ",
"  @##e@@@@@@@@@@@@#@#@@@#@ @@#  ",
"  #@###@@@@@@@f@@#@#@@@##@ #@#  ",
"  ##@####@@####@#@#@@@##b## @   ",
"  # @@@@####@@@#@#@@@@@#@@# #   ",
"  # @@@#@@@@##@@#@@@#@ @@@#     ",
"    @@@@#@@@@@@#@@@##@ #@#      ",
"     @@@@#@@@@#@@@##b## @       ",
"     @@@@@#@@#@@@@@#@@# #       ",
"      @@@@@##@@@#@ @@@#         ",
"       @@@@@#@@##@ #@#          ",
"        @@@@#@##b## @           ",
"         @@@#@@#@@# #           ",
"          @#@# @@@#             ",
"               #@#              ",
"                @               ",
"                :               "
};
static Fl_Pixmap image_check_pic1(idata_check_pic1);

static void cb_pb_operation3(Fl_RaiseButton*, void*) {
  processOperation(CHIP_WRITE);
}

static const char *idata_write_pic[] = {
"32 32 109 2",
"  \tc None",
". \tc #2F2F2F",
"+ \tc #9F9FA3",
"@ \tc #575757",
"# \tc #7F7F7F",
"$ \tc #4E2604",
"% \tc #562E14",
"& \tc #DBDBDB",
"* \tc #000000",
"= \tc #5A2E0C",
"- \tc #D69A74",
"; \tc #E6B294",
"> \tc #CA8244",
", \tc #66320C",
"\' \tc #623614",
") \tc #F2C2A4",
"! \tc #FEDAC4",
"~ \tc #F6A25C",
"{ \tc #EEAA74",
"] \tc #DE8E4C",
"^ \tc #D6A284",
"/ \tc #F69E54",
"( \tc #EE7A14",
"_ \tc #FEDAA4",
": \tc #F6B27C",
"< \tc #EE9A54",
"[ \tc #82461C",
"} \tc #BFBFBF",
"| \tc #BA8264",
"1 \tc #D2763C",
"2 \tc #E66E04",
"3 \tc #EA6E04",
"4 \tc #EE7E14",
"5 \tc #FEB67C",
"6 \tc #8A5F3C",
"7 \tc #522604",
"8 \tc #6E3204",
"9 \tc #A64E04",
"0 \tc #F27604",
"a \tc #FA7A04",
"b \tc #FA8614",
"c \tc #FABE7C",
"d \tc #EE9E54",
"e \tc #824A1C",
"f \tc #7E3A04",
"g \tc #FE7E04",
"h \tc #FE8A14",
"i \tc #F29E54",
"j \tc #93521D",
"k \tc #562604",
"l \tc #9E561C",
"m \tc #FE8204",
"n \tc #FE8E1C",
"o \tc #854B19",
"p \tc #FA7E04",
"q \tc #9A5214",
"r \tc #964E14",
"s \tc #FA8A1C",
"t \tc #010000",
"u \tc #F67A04",
"v \tc #A25A1C",
"w \tc #F28214",
"x \tc #E6924C",
"y \tc #A66C3B",
"z \tc #0C0B0A",
"A \tc #D28644",
"B \tc #010101",
"C \tc #0F0F0E",
"D \tc #EE7204",
"E \tc #F6A65C",
"F \tc #FADACC",
"G \tc #704225",
"H \tc #7A7978",
"I \tc #F28E44",
"J \tc #FAD2B4",
"K \tc #B27664",
"L \tc #080706",
"M \tc #622E0C",
"N \tc #966654",
"O \tc #C27E5C",
"P \tc #DA9E7C",
"Q \tc #FACEB4",
"R \tc #F2CABC",
"S \tc #72462C",
"T \tc #8A5644",
"U \tc #965E3C",
"V \tc #BA7254",
"W \tc #EEC2A4",
"X \tc #F6CEBC",
"Y \tc #B67A6C",
"Z \tc #6E320C",
"` \tc #824E3C",
" .\tc #EEC6B4",
"..\tc #7E523C",
"+.\tc #DADADA",
"@.\tc #9C9B9F",
"#.\tc #763E1C",
"$.\tc #D29674",
"%.\tc #BA9684",
"&.\tc #AE7264",
"*.\tc #9E9EA2",
"=.\tc #6E5244",
"-.\tc #5A4E44",
";.\tc #313131",
">.\tc #D9D9D9",
",.\tc #818181",
"\'.\tc #5B5B5B",
").\tc #060604",
"!.\tc #121214",
"                                                                ",
"                                                                ",
"                                . .                             ",
"                              . + + @ . # . .                   ",
"            $ $ %           . # & & .   . . @ *                 ",
"          = - ; > ,         . # & . + . . @ * # @               ",
"        \' ) ! ~ { ] =   . . @ . . + . . @ * @ . . #             ",
"      = ^ ! / ( _ : < [ + + @ . + . . . . + . . } . .           ",
"      = | 1 2 3 4 _ 5 < 6 & . + . . . . . . + + . . . .         ",
"        7 8 9 0 a b _ c d e # . . . . . . . . . . . . # *       ",
"          7 f 9 a g h _ 5 i j . . . . . . . . . . . + * *       ",
"            k f 9 g g h _ 5 / l . . . . . . . . . + * * * *     ",
"            . k f 9 m m n _ 5 / o . . . . . . . + * * * + *     ",
"            . # 7 f 9 p m h _ 5 / l * . . . * + * * * & + @     ",
"        . . @ . . 7 f 9 m m n _ 5 / q * . * + * * * & & + + @   ",
"      . + + @ . # . k f 9 g g h _ 5 < r * # * * * * * & # @ @   ",
"    . # & & . # . * . 7 f 9 m p s _ 5 i q * * * + *   . @ @     ",
"    . # & . # * * . * t k f 9 p u b _ 5 / v * & + @   + . #     ",
"    @ . . # * * * * * * * k f 9 0 0 w _ : x y & + + @   .       ",
"    .   * * # * * * * * * z k f 9 0 0 ( c { A q # @ @   .       ",
"    .   * * * # * * * * * B C k f 9 3 3 D E F ; G @ +           ",
"        * * * * # * * * * * * H k f 9 3 2 I J F K #             ",
"          * * * * # * * * * # * L 7 M N O P ) Q R S             ",
"          * * * * * # * * # * * * * = T U V - W X Y             ",
"            * * * * * # # * * * + *   Z ` U V - X  ...          ",
"              * * * * . @ * * +.+ @   @.. #.` V $.%.&.          ",
"                * * * * . * & +.*.+ @   .     #.=.-.-.          ",
"                  * * * ;.* * >.,.\'.@   .           ).!.        ",
"                    * . * .   . @ @ +                           ",
"                              + . #                             ",
"                                .                               ",
"                                .                               "
};
static Fl_Pixmap image_write_pic(idata_write_pic);

static const char *idata_write_pic1[] = {
"32 32 12 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #2B2B2B",
"#\tc #DCDCDC",
"$\tc #757575",
"%\tc #2F2F2F",
"&\tc #E9E9E9",
"*\tc #494949",
"=\tc #6E6E6E",
"-\tc #0A0A0A",
";\tc #C0C0C0",
"                                ",
"                                ",
"                ..              ",
"               .+++++++         ",
"      ..@     ++++. ..+.        ",
"     .+++.    .++.+.#+.++       ",
"    .++.++. ..+..+..+.+..+      ",
"   $+++.+++.++..+....+..+.+     ",
"   +++...+++.+.+..%%..++...+    ",
"    ...+..+++.+..%%%%......+.   ",
"     +&.+..+++...%%%%%%%..+..   ",
"      *..+..+++...%%%%%..+....  ",
"      +...+..+++...+%+..+...+.  ",
"      .+...+..+++..++..+...++.  ",
"    ..+.....+..+++..&.+...++=++ ",
"   .++..+....+..+++..+.....+..+ ",
"  ++++.+..+.-.+..+++....+. ..+  ",
"  .++.+..+..+..+..++++.++. +.+  ",
"  +..+.......+..+..+++.++++ .   ",
"  + ..+.......+..+..++....+ +   ",
"  + ...+..........+..+++..+     ",
"    ....+......+.+.+..++.+      ",
"     ....+....+..+.++++++.      ",
"     .....+..+....++..;+++      ",
"      .....++...+. ..+.++++     ",
"       .....+..++. +.++++++     ",
"        ....+.++.++ +  ++++     ",
"         ...+..+..+ +     .+    ",
"          .+.+ ...+             ",
"               +.+              ",
"                .               ",
"                %               "
};
static Fl_Pixmap image_write_pic1(idata_write_pic1);

static void cb_pb_operation4(Fl_RaiseButton*, void*) {
  processOperation(CHIP_VERIFY);
}

static const char *idata_verify_pic[] = {
"32 32 49 1",
" \tc None",
".\tc #2F2F2F",
"+\tc #9F9FA3",
"@\tc #575757",
"#\tc #7F7F7F",
"$\tc #DBDBDB",
"%\tc #000000",
"&\tc #FFFFFF",
"*\tc #F2F7EF",
"=\tc #BFBFBF",
"-\tc #F9F9F9",
";\tc #C6C6C6",
">\tc #7B7B7B",
",\tc #555555",
"\'\tc #6E6E6E",
")\tc #DFDFDF",
"!\tc #ECECEC",
"~\tc #430F0F",
"{\tc #1A320F",
"]\tc #D9D9D9",
"^\tc #102705",
"/\tc #F0C9C3",
"(\tc #F6F6F6",
"_\tc #646464",
":\tc #ECD3D1",
"<\tc #FEFCFC",
"[\tc #979797",
"}\tc #1F2E19",
"|\tc #F9DCDB",
"1\tc #DCDCDC",
"2\tc #7E7E7E",
"3\tc #142F08",
"4\tc #BC5555",
"5\tc #F4E9E9",
"6\tc #F2F2F2",
"7\tc #9A9A9A",
"8\tc #353834",
"9\tc #1F3F10",
"0\tc #62615F",
"a\tc #291F0E",
"b\tc #3D3E32",
"c\tc #724343",
"d\tc #643D3D",
"e\tc #5A4641",
"f\tc #C2BDBB",
"g\tc #878787",
"h\tc #674242",
"i\tc #673F3F",
"j\tc #381918",
"                                ",
"                                ",
"                ..              ",
"               .++@.#..         ",
"              .#$$. ..@%        ",
"              .#$.+..@%#@       ",
"            ..@..+..@%@..#      ",
"           .++&&&&&*.+..=..     ",
"          .#&&&&&&&&&.++....    ",
"          .#-;>,\')&&&!.....#%   ",
"        ..@..~....&&&&{...+%%   ",
"       .++@.#.....&&&]^..+%%%%  ",
"      .#$$.+...../&&(_..+%%%+%  ",
"      .#$.#...%.:<&&[}%+%%%$+@  ",
"    ..@..#.%.%|&&&123%+%%%$$++@ ",
"   .++@.#.%.45&&6789%#%%%%%$#@@ ",
"  .#$$.#.%.%.&&&0a.%+%%%+% .@@  ",
"  .#$.#%%.%%%&&&b.%#%%%$+@ +.#  ",
"  @..#%%%%%%%cde%%+%%%$$++@ .   ",
"  . %%#%%%%%%%%%%#%%%%%$#@@ .   ",
"  . %%%#%%%%&&&f#%%%+% .@@+     ",
"    %%%%#%%%&&&g%%%$+@ +.#      ",
"     %%%%#%%%hij%%$$++@ .       ",
"     %%%%%#%%#%%%%%$#@@ .       ",
"      %%%%%##%%%+% .@@+         ",
"       %%%%.@%%$+@ +.#          ",
"        %%%%.%$$++@ .           ",
"         %%%.%%$#@@ .           ",
"          %.%. .@@+             ",
"               +.#              ",
"                .               ",
"                .               "
};
static Fl_Pixmap image_verify_pic(idata_verify_pic);

static const char *idata_verify_pic1[] = {
"32 32 8 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"@\tc #DCDCDC",
"#\tc #0B0B0B",
"$\tc #2F2F2F",
"%\tc #0F0F0F",
"&\tc #6E6E6E",
"                                ",
"                                ",
"                ..              ",
"               .+++++++         ",
"              ++++. ..+.        ",
"              .++.+.@+.++       ",
"            .....#..+.+..+      ",
"           .+.++++++.+..+.+     ",
"          +++++++++++.++...+    ",
"          .+++...+++++.....+.   ",
"        ..+.......++++.+..+..   ",
"       .++..+.+$..++++...+....  ",
"      ++++.+..+..++++...+...+.  ",
"      .++.+.....+++++..+...++.  ",
"    ..+..+....+++++%..+...++&++ ",
"   .++..+..+++++++...+.....+..+ ",
"  ++++.+..+..+++....+...+. ..+  ",
"  .++.+..+...+++...+...++. +.+  ",
"  +..+.......+....+...++&++ .   ",
"  + ..+..........+.....+..+ +   ",
"  + ...+....+++++...+. ...+     ",
"    ....+...++++...++. +.+      ",
"     ....+........++&++ .       ",
"     .....+..+.....+..+ +       ",
"      .....++...+. ...+         ",
"       .....+..++. +.+          ",
"        ....+.++&++ .           ",
"         ...+..+..+ +           ",
"          .+.+ ...+             ",
"               +.+              ",
"                .               ",
"                $               "
};
static Fl_Pixmap image_verify_pic1(idata_verify_pic1);

static void cb_pb_operation5(Fl_RaiseButton* o, void*) {
  if (o->value()) {
    for (int i=PB_OPER_FIRST; i<PB_NONE; i++) {
        if (i != PB_TEST) {
            pb_operation[i]->deactivate();
        }
    }
    pb_operation[PB_RESET]->activate();
    if (!processOperation(CHIP_TEST_ON)) {
        o->value(0);
        o->do_callback();
    }
} else {
    for (int i=PB_OPER_FIRST; i<PB_NONE; i++) {
        if (i != PB_TEST) {
            pb_operation[i]->activate();
        }
    }
    pb_operation[PB_RESET]->deactivate();
    processOperation(CHIP_TEST_OFF);
};
}

static const char *idata_test_pic[] = {
"32 32 148 2",
"Qt c None",
".o c #000000",
"ab c #010101",
"#7 c #020202",
".# c #020204",
".5 c #040404",
"al c #050505",
"am c #060606",
".6 c #070709",
"af c #080808",
"## c #090909",
"ag c #0a0a0a",
"a# c #0c0c0c",
"#i c #101012",
"#5 c #151515",
"#Z c #171717",
"#O c #181818",
"a. c #19191b",
"#P c #1a1a1a",
"#Q c #1b1b1b",
"#E c #1c1c1c",
"ao c #1c1c1d",
"#F c #1e1e1e",
"#G c #1f1f1f",
"#H c #202020",
"#s c #222222",
"ac c #222224",
"#t c #232323",
"#u c #252525",
"#o c #262626",
"#p c #272727",
"#e c #292929",
".2 c #2a2a2a",
".N c #2b2b2b",
"aj c #2b2b2c",
".O c #2d2d2d",
".P c #2e2e2e",
".h c #2f2f2f",
".c c #303030",
".4 c #393939",
".f c #585858",
"#D c #595958",
".F c #5b5b5c",
".W c #656566",
"#8 c #686869",
"#n c #747474",
"#m c #7c7c7c",
".v c #808080",
"ae c #848486",
".u c #858584",
"ak c #878788",
".1 c #898987",
"ai c #8c8c8c",
"#l c #8c8c8e",
".k c #8e8e8d",
"aq c #8e8e8e",
"#9 c #8e8e8f",
"#Y c #929293",
"ap c #939393",
".V c #969694",
"an c #979797",
"#N c #9a9a9a",
"ah c #9c9c9c",
"#X c #9c9c9e",
"#c c #9f9f9e",
"aa c #a0a0a0",
".Q c #a0a0a4",
"#6 c #a4a4a4",
".9 c #a4a4a5",
"#4 c #a7a7a6",
"ad c #a9a9a8",
"#0 c #a9a9a9",
"#W c #ababad",
"#C c #acacad",
"#k c #adadac",
"#R c #adadad",
"#3 c #aeaeac",
"#d c #afafad",
".e c #b0b0b0",
"#g c #b1b1b0",
"#b c #b1b1b1",
".X c #b1b1b2",
"#2 c #b3b3b1",
"#M c #b4b4b4",
"#r c #b4b4b5",
"#B c #b5b5b3",
"#A c #b6b6b4",
"#v c #b6b6b6",
"#q c #b7b7b6",
"#j c #b8b8b7",
"#a c #bababa",
"#V c #bbbbba",
".M c #bcbcbc",
".0 c #bdbdbc",
".n c #bdbdbd",
".8 c #bdbdbf",
"#L c #bebebc",
"#U c #bfbfbe",
".g c #bfbfbf",
".R c #c0c0c0",
"#T c #c1c1c0",
".7 c #c1c1c2",
".3 c #c1c1c3",
"#K c #c3c3c4",
".Z c #c4c4c4",
".t c #c5c5c4",
".m c #c6c6c4",
"#z c #c6c6c5",
".Y c #c7c7c5",
"#J c #c7c7c6",
".L c #c7c7c7",
"#f c #cacac9",
".K c #cacacb",
"#y c #cbcbcb",
".b c #cbcbcc",
".E c #cccccc",
".J c #cccccd",
".C c #cfcfcf",
"#h c #d0d0cf",
"#x c #d1d1cf",
".B c #d1d1d1",
"#I c #d2d2d1",
"#1 c #d2d2d2",
"#. c #d3d3d2",
".A c #d3d3d4",
".z c #d5d5d4",
".D c #d5d5d5",
".U c #d7d7d6",
".I c #d7d7d7",
".H c #d8d8d8",
".r c #d9d9d8",
".q c #dadad8",
"ar c #dadada",
".T c #dadadc",
".y c #dbdbda",
".G c #dddddc",
".i c #dededc",
".x c #dfdfde",
".S c #dfdfe0",
".s c #e1e1e0",
"#S c #e1e1e1",
".l c #e4e4e4",
".w c #e8e8e6",
".p c #e9e9e7",
".a c #f0f0ee",
".j c #f0f0ef",
".d c #f2f2f0",
"#w c #ffffff",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.#.#QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQt.#.a.b.#QtQtQt.c.cQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQt.#.#QtQtQt.#.d.e.#QtQt.c.#.#.f.c.g.h.hQtQtQtQtQtQtQtQtQt",
"QtQtQt.#.i.d.#Qt.#.#.j.k.#.#.c.#.l.m.#.n.h.h.f.oQtQtQtQtQtQtQtQt",
"QtQtQt.#.d.i.p.#.d.d.q.r.s.t.#.l.m.u.#.h.h.f.o.v.fQtQtQtQtQtQtQt",
"QtQtQtQt.#.w.x.i.s.y.z.A.B.C.D.E.F.#.h.h.f.o.f.c.c.vQtQtQtQtQtQt",
"QtQtQtQtQt.#.i.G.H.I.A.B.J.K.L.M.#.N.O.P.h.Q.c.c.R.h.hQtQtQtQtQt",
"QtQtQtQt.#.d.S.T.U.V.W.W.X.Y.Z.0.1.#.2.N.O.P.Q.3.h.h.h.hQtQtQtQt",
"QtQt.#.#.#.d.y.I.V.4.5.6.k.K.7.8.9.#.#.#.2.N.O.P.h.h.h.g.oQtQtQt",
"Qt.#.a.d.d.q.z#..W.5.f.c##.l.0#a#b#c#d#b.##e.2.N.O.P.g.o.oQtQtQt",
"Qt.##f#g.k.r.A#h.W.6.f.c#i.d.M#j#k#l#m#n.##o#p#e.2#a.o.o.o.oQtQt",
"QtQt.#.#.#.s.B.J#d.k###i.d.q#q#r#l.#.#.##s#t#u#o#v.o.o.o#w.oQtQt",
"QtQtQtQt.#.t#x#y#z.K.l.d.r#A#B#C#D.##E#F#G#H#s#b.o.o.o#w#w.fQtQt",
"QtQtQtQt.c.##I#J#K.7#L.M#q#M.X#N.##O#P#Q#E#F#R.o.o.o#w#w#w#S.fQt",
"QtQtQt.c.#.l#J#T#U.g#V#j#r#W#X.X#Y.##Z#O#P#0.o.o.o.o.o#1#S.f.fQt",
"QtQt.c.#.l#z.F.#.1.9#2#3#l#D.##N#4#m.##5#6.o.o.o#w.oQt.c.f.fQtQt",
"QtQt.c.#.m.u.##7.#.##8#9a..#a#.##m#n.#aa.o.o.o#w#w.fQt.Q.c.vQtQt",
"QtQt.f.c.#.#.o.oabacadae.#af##ag.#.#ah.o.o.o#w#w#w#1.fQt.cQtQtQt",
"QtQt.cQt.o.oai.o.oaj.mak.#alamaf##an.o.o.o.o.o#1#1.f.fQt.cQtQtQt",
"QtQt.cQt.o.o.oai.o.o.#aoab#7.5alap.o.o.o#w.oQt.c.f.f.QQtQtQtQtQt",
"QtQtQtQt.o.o.o.oai.o.o.o.o.oabaq.o.o.o#w#w.fQt.Q.c.vQtQtQtQtQtQt",
"QtQtQtQtQt.o.o.o.oai.o.o.o.oai.o.o.oarar#bai.fQt.cQtQtQtQtQtQtQt",
"QtQtQtQtQt.o.o.o.o.oai.o.oai.o.o.o.o.o#bai.f.fQt.cQtQtQtQtQtQtQt",
"QtQtQtQtQtQt.o.o.o.o.oaiai.o.o.o#w.oQt.c.f.f.QQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.o.o.o.o.c.f.o.o#war.fQt.Q.c.vQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt.o.o.o.o.f.o#war#bai.fQt.cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQt.o.o.o.f.o.o#bai.f.fQt.cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.o.f.o.cQt.o.f.f.QQtQtQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Q.o.vQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.oQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.oQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt"
};
static Fl_Pixmap image_test_pic(idata_test_pic);

static const char *idata_test_pic1[] = {
"32 32 26 1",
"   c None",
".  c #000000",
"+  c #FFFFFF",
"@  c #00007D",
"#  c #D1D1D1",
"$  c #B7B792",
"%  c #86866D",
"&  c #FFFFDC",
"*  c #7D7D96",
"=  c #2A2A2A",
"-  c #060606",
";  c #0101AF",
">  c #020202",
",  c #B8B8EA",
"\'  c #CECE1F",
")  c #7D7D63",
"!  c #4747C4",
"~  c #5D5D5D",
"{  c #1B1B1B",
"]  c #FFFF7D",
"^  c #171700",
"/  c #141400",
"(  c #F4F4C3",
"_  c #303000",
":  c #4F4F1E",
"<  c #EDEDBB",
"                                ",
"          ..                    ",
"         .++.   ++              ",
"    ..   .++.  +..+.+.+         ",
"   .++. ..+.....++.+..+.        ",
"   .+++.++++++.+++...+.++       ",
"    .++++..@#+++..$%+.+..+      ",
"     .+&++++++*+..+..+..+.+     ",
"    .+++++..+++++.++..++...+    ",
"  ...+.++...++.++..........+.   ",
" .++++.+..+..+.+++++.+=-..+..   ",
" .++.+;+..+..+.+++++.+>..+....  ",
"  ...+,+++..++.++....+..+...+.  ",
"    .++++++++.\'++.+++..+...++.  ",
"    ..+)!....~++..+{..+...+++++ ",
"   +.++++++++++++....+.....++.+ ",
"  +.++..+++++].+++..+...+. ..+  ",
"  +.++.....+....++.+...++. +.+  ",
"  +^......++./(...+...+++++ _   ",
"  + ..+...++.:...+.....++.+ +   ",
"  + ...+........+...+. ...+     ",
"    ....+......+...++. +.+      ",
"     ....+....+...+++++ _       ",
"     .....+..+.....++.+ +       ",
"      .....++...+. ...+         ",
"       .....+..++. +.+          ",
"        ....+.+++++ _           ",
"         ...+..++.+ +           ",
"          .+.+ ..<+             ",
"               +.+              ",
"                .               ",
"                .               "
};
static Fl_Pixmap image_test_pic1(idata_test_pic1);

static void cb_pb_operation6(Fl_RaiseButton* o, void*) {
  processOperation (
    o->value()
        ? CHIP_TEST_RESET_ON
        : CHIP_TEST_RESET_OFF
);
}

static const char *idata_test_pic_reset[] = {
"32 32 176 2",
".m c None",
".l c #000000",
".u c #000002",
"aM c #010101",
"aF c #020202",
"aG c #040404",
"aH c #050505",
"aC c #060606",
"#I c #098100",
"ah c #222222",
"#8 c #252525",
"#3 c #262626",
"#4 c #272727",
"a. c #27272b",
"#U c #292929",
"#x c #2a2a2a",
"#i c #2b2b2b",
"#j c #2d2d2d",
"#k c #2e2e2e",
".J c #2f2f2f",
".A c #303030",
"#h c #373737",
"#g c #3d3d3d",
".B c #4d4f50",
"#s c #4e4e4e",
"#P c #4f4f4f",
"#E c #515150",
".H c #585858",
"aa c #5b5b4e",
"#f c #5b5c4e",
".q c #5f6132",
"#Y c #656561",
"#r c #666662",
"#e c #686856",
".w c #69695e",
".C c #6f6d74",
".r c #747256",
".Q c #75724d",
".z c #767478",
"ak c #787a4b",
".L c #797980",
".8 c #7a784b",
".p c #7a7a4d",
"a# c #7c7c7b",
".x c #7e7e7b",
"aS c #7f7f7f",
".Z c #808080",
"ac c #810000",
".7 c #81815e",
"aP c #838383",
"#T c #848484",
"aN c #858585",
".t c #85858b",
"#D c #86867e",
"#L c #868686",
".y c #86868c",
".D c #86888c",
".k c #88868c",
".Y c #888863",
"#5 c #88887f",
"#V c #88888c",
".S c #8a8c8e",
"#M c #8c8a8e",
"aL c #8c8c8c",
".j c #8c8c8e",
".9 c #8e8e64",
"aT c #8e8e8e",
"#z c #8f8f95",
"#o c #909091",
"#q c #929288",
"#O c #939388",
"#N c #939392",
".3 c #939492",
".T c #949392",
".i c #949492",
"av c #969696",
"aj c #979589",
"ag c #979797",
".s c #979889",
"aB c #9c9c80",
".U c #9c9c97",
".4 c #9c9e97",
"#w c #9d9d9d",
".E c #9d9e9b",
"#c c #9e9c97",
".h c #9e9e97",
"#n c #9e9e9c",
"aD c #9e9e9e",
"#l c #a0a0a4",
"ar c #a1a1a1",
".F c #a2a09a",
"#X c #a2a396",
"## c #a3a29b",
"#d c #a3a395",
"#6 c #a3a3a3",
".1 c #a6a693",
".R c #a6a6ad",
".v c #a7a785",
".5 c #a7a79c",
".V c #a7a99d",
"#W c #a9a79c",
".g c #a9a99d",
".o c #aba785",
"#A c #acacb4",
"au c #adad9b",
"as c #adadad",
"ai c #b1b1b1",
".M c #b2b2a8",
".6 c #b3b4a4",
".W c #b4b3a4",
".f c #b4b4a4",
"#. c #b4b4a8",
"aR c #b5b5b5",
"#9 c #b6b6b6",
"#2 c #bababa",
"aQ c #bbbbbb",
".P c #bdbdbd",
"aO c #bebebe",
".X c #bfbfad",
".e c #bfbfae",
".I c #bfbfbf",
".0 c #c0c0ae",
"#m c #c0c0c0",
"#v c #c1c1c1",
"#y c #c1c1c3",
"aK c #c2c2c2",
"#t c #c4c4c4",
".O c #c5c5b1",
"ab c #c5c5c5",
"aI c #c7c7c7",
"#K c #c8c8c8",
"aJ c #c9c9c9",
".d c #cacab8",
"af c #cbcbcb",
"#7 c #cdcdcd",
"#Z c #d0d0d0",
"#F c #d1d1d1",
".K c #d2d2c1",
"#u c #d2d2d2",
"al c #d3d3d3",
".c c #d4d2c4",
"#S c #d4d4d4",
"aA c #d8d8d8",
"aE c #d9d9d9",
".G c #dadada",
"#1 c #dbdbdb",
".b c #dcdcce",
"aq c #dedede",
"at c #e1e1e1",
"az c #e2e2e2",
"ae c #e3e3e3",
"#Q c #e6e6e6",
".2 c #e6e6ed",
".a c #e7e6db",
".n c #e7e6dc",
"#0 c #e7e7e7",
".N c #e9e9d4",
"ap c #e9e9e9",
"#b c #eaeae9",
"ay c #ebebeb",
"#p c #ecece7",
"#C c #ecece9",
"#J c #ededed",
"ad c #eeeeee",
".# c #f1f1eb",
"#R c #f1f1f1",
"ao c #f2f2f2",
"aw c #f6f6f6",
"an c #f8f8f8",
"ax c #f9f9f9",
"#B c #f9f9ff",
"Qt c #f9fbf9",
"#H c #fbfbfb",
"am c #fdfdfd",
"#G c #fefefe",
"#a c #ffffff",
"Qt.#.a.b.c.d.e.f.g.h.i.j.k.l.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m",
".#.n.b.o.p.q.r.s.h.i.j.k.t.u.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m",
".a.b.v.p.l.l.l.w.x.j.y.t.y.z.l.m.A.A.m.m.m.m.m.m.m.m.m.m.m.m.m.m",
".b.o.p.l.m.m.m.l.B.C.t.D.j.E.F.l.l.G.H.A.I.J.J.m.m.m.m.m.m.m.m.m",
".K.p.l.m.m.m.m.m.l.L.y.j.i.h.M.N.O.l.A.P.J.J.H.l.m.m.m.m.m.m.m.m",
".d.Q.l.m.m.m.m.m.l.R.S.T.U.V.W.X.Y.l.P.J.J.H.l.Z.H.m.m.m.m.m.m.m",
".0.1.l.m.m.m.m.m.l.2.3.4.5.6.7.8.9.l.J.J.H.l.H.A.A.Z.m.m.m.m.m.m",
".f#.##.l.m.m.m.l#a#b#c.5#d#e#f#g#h#i#j#k.J#l.A.A#m.J.J.m.m.m.m.m",
".g.h#n#o.l.l.l#a#p#c.g#q#r#s#t#u#v#w#x#i#j#k#l#y.J.J.J.J.m.m.m.m",
".h.i.j#z#A#B#a#C.U.V#D#E#F#G#G#H#I#J#K#L#x#i#j#k.J.J.J.I.l.m.m.m",
".i.j.y.t.y#M#N.h.5#O#P#Q#a#a#a#I#I#R#Q#S#T#U#x#i#j#k.I.l.l.m.m.m",
".j#V.t.k.j.T#c#W#X#Y#Z#a#a#a#I#I#I#I#0#1#2#3#4#U#x#2.l.l.l.l.m.m",
".y.t.y.j#N.4.5.W#5#6#a#a#a#a#a#I#I#R#I.G#7.Z#8#3#9.l.l.l#a.l.m.m",
".l.la.a##c#W.f.7aaab#Gac#a#a#G#H#Iadae#Iafagahai.l.l.l#a#a.H.m.m",
".l.l.l.waj.f.7ak#gal#Hacamam#Hanaoapaq#I#Karas.l.l.l#a#a#aat.H.m",
".m.m.m.lau.X.p.lav#vawacaxanacaoayazaA#Iabav.l.l.l.l.l#uat.H.H.m",
".m.m.A.laB.8.9.laCaD#J#Rac#RacacazaE#Z#K#v.Z.l.l#a.l.m.A.H.H.m.m",
".m.m.A.G.l.l.laFaGaHaI#Q#0acacacac#ZaJaK#9.l.l#a#a.H.m#l.A.Z.m.m",
".m.m.H.A.AaL.l.laMaFaN#S#1.Gacac#7#KaKaO.Z.l#a#a#a#u.H.m.A.m.m.m",
".m.m.A.m.l.laL.l.l.laMaPaQ#7ac#Kab#vaRaS.l.l.l#u#u.H.H.m.A.m.m.m",
".m.m.A.m.l.l.laL.l.l.l.laM.Zavarav.Z.l.l#a.l.m.A.H.H#l.m.m.m.m.m",
".m.m.m.m.l.l.l.laL.l.l.l.l.laMaT.l.l.l#a#a.H.m#l.A.Z.m.m.m.m.m.m",
".m.m.m.m.m.l.l.l.laL.l.l.l.laL.l.l.l.G.GaiaL.H.m.A.m.m.m.m.m.m.m",
".m.m.m.m.m.l.l.l.l.laL.l.laL.l.l.l.l.laiaL.H.H.m.A.m.m.m.m.m.m.m",
".m.m.m.m.m.m.l.l.l.l.laLaL.l.l.l#a.l.m.A.H.H#l.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.l.l.l.l.A.H.l.l#a.G.H.m#l.A.Z.m.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.m.l.l.l.l.H.l#a.GaiaL.H.m.A.m.m.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.m.m.l.l.l.H.l.laiaL.H.H.m.A.m.m.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.m.m.m.l.H.l.A.m.l.H.H#l.m.m.m.m.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.m.m.m.m.m.m.m.m#l.l.Z.m.m.m.m.m.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.l.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m",
".m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m.l.m.m.m.m.m.m.m.m.m.m.m.m.m.m.m"
};
static Fl_Pixmap image_test_pic_reset(idata_test_pic_reset);

static const char *idata_test_pic_reset1[] = {
"32 32 48 1",
" \tc None",
".\tc #F9FBF9",
"+\tc #F1F1EB",
"@\tc #E7E6DB",
"#\tc #DCDCCE",
"$\tc #D4D2C4",
"%\tc #CACAB8",
"&\tc #BFBFAE",
"*\tc #B4B4A4",
"=\tc #A9A99D",
"-\tc #9E9E97",
";\tc #949492",
">\tc #8C8C8E",
",\tc #88868C",
"\'\tc #000000",
")\tc #FFFFFF",
"!\tc #FFFF00",
"~\tc #A60000",
"{\tc #000012",
"]\tc #0C0029",
"^\tc #617AFF",
"/\tc #00000F",
"(\tc #EEFFFF",
"_\tc #FFABFF",
":\tc #002529",
"<\tc #7367B3",
"[\tc #D2D2C1",
"}\tc #000042",
"|\tc #040012",
"1\tc #7B0048",
"2\tc #000059",
"3\tc #C0C0AE",
"4\tc #CEFFFF",
"5\tc #0B0000",
"6\tc #AC8700",
"7\tc #2A2A2A",
"8\tc #060606",
"9\tc #252529",
"0\tc #310029",
"a\tc #000412",
"b\tc #560B48",
"c\tc #920066",
"d\tc #86868C",
"e\tc #D1FFFF",
"f\tc #00D066",
"g\tc #A4A4A4",
"h\tc #303000",
"i\tc #EDEDBB",
".+@#$%&*=-;>,\'                  ",
"+))!\'\'~))){])\'                  ",
"@))!\'\'\')))^/))\' ))              ",
"#!!\'   \'(_):<))\'\'))\')\')         ",
"[\'\'     \')}|\'\')))\'\')\'\')\'        ",
"%!\'     \')\'12))))\')\'\')\'))       ",
"3)\'     \')\'4))\'5)\'\'\')\')\'\')      ",
"*))\'   \'))\'))\'\'\'\'\'\'\'\')\'\')\')     ",
"=\'))\'\'\'))\')\'\'\'))))\'\'\'\'))\'\'\')    ",
"-\'\')))))\')\'\'))))\')))\'\'\'\'\'\'\')\'   ",
";{\'\'\'\'\'\')6\'))))\'\'))))\'78\'\')\'\'   ",
">9/0abc))\'))))\'\'\'\')))\'\'\'\')\'\'\'\'  ",
"d)))ef))\'\')))))\'\')\')))\'\')\'\'\')\'  ",
"\'\'\'))))\'\'))\'))))\'))\'))\')\'\'\'))\'  ",
"\'\'\')))\'!\'))\')))))))\')))\'\'\'))))) ",
"   \'))!\')))\'))\'))))\'))\'\'\'\'\'))\') ",
"  )\')!)\'\')))\')\'\'))))))\'\')\' \'\')  ",
"  \')\'\'\'\'\'\')))\'\'\'\')g))\'\'))\' )\')  ",
"  )\'\')\'\'\'\'))))\'\')))))\'))))) h   ",
"  ) \'\')\'\'\'\')))\')))))\'\'\'))\') )   ",
"  ) \'\'\')\'\'\'\'\')))))\'\')\' \'\'\')     ",
"    \'\'\'\')\'\'\'\'\'\')\'\'\'))\' )\')      ",
"     \'\'\'\')\'\'\'\')\'\'\'))))) h       ",
"     \'\'\'\'\')\'\')\'\'\'\'\'))\') )       ",
"      \'\'\'\'\'))\'\'\')\' \'\'\')         ",
"       \'\'\'\'\')\'\'))\' )\')          ",
"        \'\'\'\')\'))))) h           ",
"         \'\'\')\'\'))\') )           ",
"          \')\') \'\'i)             ",
"               )\')              ",
"                \'               ",
"                \'               "
};
static Fl_Pixmap image_test_pic_reset1(idata_test_pic_reset1);

Fl_RaiseButton *pb_operation[8]={(Fl_RaiseButton *)0};

static void cb_pb_operation7(Fl_RaiseButton*, void*) {
  processOperation(CHIP_CALIBRATE);
}

static const char *idata_calibrate[] = {
"32 32 29 1",
". c None",
"# c #000000",
"g c #0000ff",
"c c #004000",
"b c #008000",
"l c #008080",
"a c #00c000",
"q c #00c0c0",
"u c #00ff00",
"t c #00ffff",
"k c #585858",
"o c #800000",
"m c #808000",
"j c #808080",
"h c #a0a0a4",
"n c #c05800",
"r c #c0c000",
"i c #c0c0c0",
"f c #c0c0ff",
"y c #c0ffc0",
"x c #c0ffff",
"p c #ff0000",
"s c #ff8000",
"w c #ffa858",
"A c #ffc0c0",
"z c #ffdca8",
"v c #ffff00",
"e c #ffffc0",
"d c #ffffff",
"..###############...............",
"###aaaaaaaaaaaaa###############.",
"#aaabbbbbbbbbbbc#dddddddddddddd#",
"#eebbfgbbhbhbbbc#iiiiiiiiiiiiij#",
"#abbbbhbjjjjjbbc#jjjjjjjjjjjjij#",
"#eehhhhhjkkk#hbc############dij#",
"#abbbbbbjkkk#bbc############dij#",
"#eehhhhhjkkk#hbc##l#b#m#n#o#dij#",
"#abbbbhb#####bbc##l#b#m#n#o#dij#",
"#eebbbhbbhbhbbbc############dij#",
"#abbbbhbbhbhhpbc##q#a#r#s#d#dij#",
"#eebbjjjbhbhbobc##q#a#r#s#d#dij#",
"#bbbbjk#hhhhbbbc############dij#",
"#bbbb###bhbhbfbc##t#u#v#w#p#dij#",
"###abhbbbhbhhgbc##t#u#v#w#p#dij#",
"#d#abqbhhhbhbbbc############dij#",
"#d#abqbhbbbhhfbc##x#y#e#z#A#dij#",
"#d#abbbhbbbhbgbc##x#y#e#z#A#dij#",
"#d#abbjjjbjjjbbc############dij#",
"#d#abhjkjhjkjhbc############dij#",
"#d#abbjk#bjk#bbc#ddddddddddddij#",
"#d#abhjk#hjk#hbc#iiiiiiiiiiiiij#",
"#d#abb###b###bbc#jijijijibubiij#",
"#d#abbbhbbbhbbbc#iiiiiiiiiiiiij#",
"#j#abbbbbbbbbbbc#jjjjjjjjjjjjjj#",
".##ccccccccccccc###############.",
"..###############iihjk#.........",
".........#kjhiiddiihjk#.........",
"......####################......",
".....#dddddddddddddddddddd#.....",
".....#jjjjjjjjjjjjjjjjjjjj#.....",
".....######################....."
};
static Fl_Pixmap image_calibrate(idata_calibrate);

static const char *idata_calibrate1[] = {
"32 32 13 1",
"   c None",
".  c #000000",
"+  c #FFFFFF",
"@  c #1A1A1A",
"#  c #262626",
"$  c #E5E5E5",
"%  c #999999",
"&  c #585858",
"*  c #4C4C4C",
"=  c #656565",
"-  c #515151",
";  c #444444",
">  c #A5A5A5",
"  ...............               ",
"...+++++++++++++............... ",
".+@+.............++++++++++++++.",
".++..+...+.+..+#.+$$$$$$$$$$.$%.",
"......+.+++++.+#.++++++++++..++.",
".++++++++..+.++#............+++.",
"........+.&+.+.#............+$+.",
".+++++++++++.++#..+.+.+.+.+.+$+.",
"......+......++#..+.+.+.+.+.+$+.",
".++.*.+..+.+..+#............+$+.",
"......+..+.++.+#..+.+.+.+.+.+$+.",
".++..+++.+.+..+#..+.+.+.+.+.+$+.",
".....++.++++..+#............+$+.",
".+++.....+.+.++#..+.+.+.+.+.+$+.",
"...+.+=..+.++.+#..+.+.+.+.+.+$+.",
".+.+.+.+++.+..+#............+$+.",
".+.+.+.+...++++#..+.+.+.+.+.+$+.",
".+.+...+...+..+#..+.+.+.+.+.+$+.",
".+.+..+++.+++.+#............+$+.",
".+.+.++.+++.+++#............+$+.",
".+.+..++..++...#.++++++++++++++.",
".+.+.+++.+++.++#.+......-.+.;++.",
".+.+.....+...++#.++.+.+.+...+++.",
".+.+.++++++++++#.++++++++++++++.",
".+.+++++++++++++.++++++++++++++.",
" ..+.#########++............... ",
"  ...............+++++.         ",
"         .++++++++++++.         ",
"      ....................      ",
"     .++++++++++++++++++++.     ",
"     .+>>>>>>>>>>>>>>>>>>+.     ",
"     ......................     "
};
static Fl_Pixmap image_calibrate1(idata_calibrate1);

Fl_Double_Window* make_flP5() {
  Fl_Double_Window* w;
  int i;

for (i=0;i<LAST_PIN;i++) {
    ch_pinNumber[i] = 0;
    tb_pinInvert[i] = 0;
    bx_pinName[i] = 0;
}
for (i=0;i<LAST_PARAM;i++) {
    tx_devParam[i] = 0;
}
for (i=0;i<LAST_PROP_DLY;i++) {
    tx_propDelay[i] = 0;
}
  { Fl_Double_Window* o = flP5 = new Fl_Double_Window(630, 445, "flP5 - Fast Light Parallel Port Production PIC Programmer");
    w = o;
    { Fl_Tabs* o = new Fl_Tabs(365, 25, 260, 415);
      o->box(FL_UP_BOX);
      { Fl_Group* o = t_devcfg = new Fl_Group(365, 50, 260, 390, "Device");
        o->tooltip("Device Configuration");
        { Fl_Group* o = new Fl_Group(370, 55, 250, 25);
          { Fl_RaiseButton* o = new Fl_RaiseButton(370, 55, 25, 25);
            o->tooltip("Import the device settings from a file.");
            o->box(FL_FLAT_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->image(image_cfgopen);
            o->deimage(image_cfgopen1);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_BLACK);
            o->callback((Fl_Callback*)cb_);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            o->when(FL_WHEN_RELEASE);
            o->hilighted_box(FL_THIN_UP_BOX);
          }
          { Fl_Group* o = g_devCfgNewEditCopy = new Fl_Group(395, 55, 75, 25);
            { Fl_RaiseButton* o = new Fl_RaiseButton(395, 55, 25, 25);
              o->tooltip("Insert a new device.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_filenew);
              o->deimage(image_filenew1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_1);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(420, 55, 25, 25);
              o->tooltip("Edit current device settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_edit);
              o->deimage(image_edit1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_2);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(445, 55, 25, 25);
              o->tooltip("Clone current device settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_editcopy);
              o->deimage(image_editcopy1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_3);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            o->end();
          }
          { Fl_Box* o = new Fl_Box(471, 55, 3, 25, "label");
            o->box(FL_THIN_UP_BOX);
            o->labeltype(FL_NO_LABEL);
          }
          { Fl_Group* o = g_devCfgStoreMGR = new Fl_Group(475, 55, 145, 25);
            { Fl_RaiseButton* o = new Fl_RaiseButton(475, 55, 25, 25);
              o->tooltip("Save current device settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_cfgsave);
              o->deimage(image_cfgsave1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_4);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(595, 55, 25, 25);
              o->tooltip("Remove/discard current device settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_editdelete);
              o->deimage(image_editdelete1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_5);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = g_devcfg = new Fl_Group(370, 85, 250, 45);
          o->deactivate();
          { Fl_Input* o = tx_devName = new Fl_Input(485, 85, 135, 20, "Device Name:");
            o->tooltip("The name of the device.");
          }
          { Fl_Sorted_Choice* o = ch_devProgSpec = new Fl_Sorted_Choice(485, 110, 135, 20, "Vendor && Family:");
            o->tooltip("The programming specifications describing how to program the device.");
            o->box(FL_FLAT_BOX);
            o->down_box(FL_BORDER_BOX);
            o->color(FL_BACKGROUND2_COLOR);
            o->selection_color(FL_SELECTION_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->textcolor(0);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
            o->menu(menu_ch_devProgSpec);
            o->item_pixmap(mini_device);
            // o->folder_pixmap(mini_folder);
          }
          o->end();
        }
        { Fl_Tabs* o = new Fl_Tabs(370, 135, 250, 300);
          o->box(FL_UP_BOX);
          { Fl_Group* o = new Fl_Group(370, 160, 250, 275, "General");
            { Fl_Group* o = g_devgencfg = new Fl_Group(375, 165, 240, 265);
              o->deactivate();
              { Fl_Group* o = new Fl_Group(375, 165, 240, 85);
                { Fl_Group* o = new Fl_Group(375, 165, 240, 20);
                { Fl_Sorted_Choice* o = ch_devMemType = new Fl_Sorted_Choice(505, 165, 110, 20, "Memory Type:");
                o->tooltip("The type of memory in the PIC. This can have the values \'eprom\', \'flash\',\
 or \'flashe\'. \'eprom\' can be used for any eprom/OTP device. \'flash\' can \
be used for any type of electronically erasable device \'flashe\' is similar t\
o \'flash\' but in the programming cycle, the END_PROG command is required.");
                o->box(FL_FLAT_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->textcolor(0);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_RELEASE);
                o->menu(menu_ch_devMemType);
                o->item_pixmap(mini_device);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 190, 240, 20);
                { Fl_Input* o = new Fl_Input(505, 190, 60, 20, "Word Size:");
                o->tooltip("The size of an instruction word in bits.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_WORD_SIZE]=o;
                }
                { Fl_Box* o = new Fl_Box(565, 190, 50, 20, "bits");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 210, 240, 20);
                { Fl_Input* o = new Fl_Input(505, 210, 60, 20, "Code Size:");
                o->tooltip("The number of words of code space.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_CODE_SIZE]=o;
                }
                { Fl_Box* o = new Fl_Box(565, 210, 50, 20, "words");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 230, 240, 20);
                { Fl_Input* o = new Fl_Input(505, 230, 60, 20, "Eeprom Size:");
                o->tooltip("The number of bytes of data EEPROM. If the device doesn\'t have a data EEPROM\
, this must be set to 0.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_EEPROM_SIZE]=o;
                }
                { Fl_Box* o = new Fl_Box(565, 230, 50, 20, "words");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                o->end();
              }
              { Fl_Group* o = new Fl_Group(375, 255, 240, 90);
                { Fl_Group* o = new Fl_Group(375, 255, 240, 20);
                { Fl_Input* o = new Fl_Input(505, 255, 60, 20, "Programming Count:");
                o->tooltip("The maximum number of times to attempt to program a memory location before re\
porting an error. Defined in the programming spec.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_PROG_COUNT]=o;
                }
                { Fl_Box* o = new Fl_Box(565, 255, 50, 20, "(=N)");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 280, 240, 20);
                { Fl_Input* o = new Fl_Input(505, 280, 60, 20, "Programming Mult.:");
                o->tooltip("The multiplier for the number of times to overprogram. Defined in the program\
ming spec.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_PROG_MULT]=o;
                }
                { Fl_Box* o = new Fl_Box(565, 280, 50, 20, "(*N)");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 305, 240, 20);
                { Fl_Box* o = new Fl_Box(565, 305, 50, 20, "[uS]");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                { Fl_Input* o = new Fl_Input(505, 305, 60, 20, "Programming Time:");
                o->tooltip("The number of microseconds in each programming attempt for one memory locatio\
n. To be on the safe side, the maximum value from the datasheet should be used\
 for flash devices.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_PROG_TIME]=o;
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 325, 240, 20);
                { Fl_Box* o = new Fl_Box(565, 325, 50, 20, "[uS]");
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                { Fl_Input* o = new Fl_Input(505, 325, 60, 20, "Erase Time:");
                o->tooltip("The number of microseconds that a bulk erase takes.");
                o->type(2);
                o->labelcolor(FL_FOREGROUND_COLOR);
                tx_devParam[PAR_ERASE_TIME]=o;
                }
                o->end();
                }
                o->end();
              }
              { Fl_Group* o = new Fl_Group(375, 350, 240, 80);
                { Fl_Group* o = new Fl_Group(375, 350, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color((Fl_Color)41);
                { Fl_Box* o = new Fl_Box(495, 350, 60, 20, "Vmin [V]");
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(555, 350, 60, 20, "Vmax [V]");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(375, 350, 120, 20, "Voltage");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 370, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Input* o = new Fl_Input(495, 370, 60, 20);
                o->tooltip("The minimum value for Vpp.");
                o->type(1);
                tx_devParam[PAR_VPP_MIN]=o;
                }
                { Fl_Input* o = new Fl_Input(555, 370, 60, 20);
                o->tooltip("The maximum value for Vpp.");
                o->type(1);
                tx_devParam[PAR_VPP_MAX]=o;
                }
                { Fl_Box* o = new Fl_Box(375, 370, 120, 20, "Vpp [VIHH]");
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 390, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Input* o = new Fl_Input(495, 390, 60, 20);
                o->tooltip("The minimum value for Vdd.");
                o->type(1);
                tx_devParam[PAR_VDD_MIN]=o;
                }
                { Fl_Input* o = new Fl_Input(555, 390, 60, 20);
                o->tooltip("The maximum value for Vdd.");
                o->type(1);
                tx_devParam[PAR_VDD_MAX]=o;
                }
                { Fl_Box* o = new Fl_Box(375, 390, 120, 20, "Vdd [Read/Verify]");
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 410, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Input* o = new Fl_Input(495, 410, 60, 20);
                o->tooltip("The minimum value for Vdd during programming.");
                o->type(1);
                tx_devParam[PAR_VDDP_MIN]=o;
                }
                { Fl_Input* o = new Fl_Input(555, 410, 60, 20);
                o->tooltip("The maximum value for Vdd during programming.");
                o->type(1);
                tx_devParam[PAR_VDDP_MAX]=o;
                }
                { Fl_Box* o = new Fl_Box(375, 410, 120, 20, "Vdd [Write/Progr.]");
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                o->end();
              }
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(370, 160, 250, 275, "Cfg. Words");
            o->hide();
            { Fl_Group* o = g_devcfgwords = new Fl_Group(375, 165, 240, 265);
              o->deactivate();
              { Fl_Group* o = g_devConfigWordsEdit = new Fl_Group(375, 165, 240, 125);
                { Fl_Group* o = new Fl_Group(375, 165, 240, 40);
                { Fl_Group* o = new Fl_Group(375, 165, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color((Fl_Color)41);
                { Fl_Box* o = new Fl_Box(505, 165, 55, 20, "Mask");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(560, 165, 55, 20, "Save");
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 185, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Input* o = tx_devCfgWord[0] = new Fl_Input(505, 185, 55, 20);
                o->tooltip("A bitmask of all valid (non-reserved) configuration bits.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[1] = new Fl_Input(560, 185, 55, 20);
                o->tooltip("A bitmask of persistent bits in  the  configuration word.  These bits will be\
 saved before and restored after a chip erase. They will also not  be  modifia\
ble when programming the device.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Box* o = new Fl_Box(375, 185, 130, 20, "Configuration word");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 210, 240, 80);
                { Fl_Group* o = new Fl_Group(375, 210, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color((Fl_Color)41);
                { Fl_Box* o = new Fl_Box(450, 210, 55, 20, "Mask");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(505, 210, 55, 20, "On");
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(560, 210, 55, 20, "Off");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 230, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Box* o = new Fl_Box(375, 230, 75, 20, "Code prot.");
                o->tooltip("Code protection bit(s).");
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                { Fl_Input* o = tx_devCfgWord[2] = new Fl_Input(450, 230, 55, 20);
                o->tooltip("A bitmask of all the code protection bits.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[3] = new Fl_Input(505, 230, 55, 20);
                o->tooltip("The value of the code protection bits when all memory is code protected.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[4] = new Fl_Input(560, 230, 55, 20);
                o->tooltip("The value of the code protection bits when no memory is code protected.");
                o->labeltype(FL_NO_LABEL);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 250, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Box* o = new Fl_Box(375, 250, 75, 20, "Data prot.");
                o->tooltip("Data memory code protection bit(s).");
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                { Fl_Input* o = tx_devCfgWord[5] = new Fl_Input(450, 250, 55, 20);
                o->tooltip("A bitmask of the bit(s) that enable data memory code protection.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[6] = new Fl_Input(505, 250, 55, 20);
                o->tooltip("The value of the data memory code protection bit(s) when data code protection\
 is enabled.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[7] = new Fl_Input(560, 250, 55, 20);
                o->tooltip("The value of the data memory code protection bit(s) when data code protection\
 is disabled.");
                o->labeltype(FL_NO_LABEL);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 270, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Box* o = new Fl_Box(375, 270, 75, 20, "Bkg. Debug");
                o->tooltip("On-chip background debugger bit(s).");
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                { Fl_Input* o = tx_devCfgWord[8] = new Fl_Input(450, 270, 55, 20);
                o->tooltip("A bitmask for the bit(s) which enable the on-chip background debugger.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[9] = new Fl_Input(505, 270, 55, 20);
                o->tooltip("The value of the background debugger bits when the debugger is enabled.");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devCfgWord[10] = new Fl_Input(560, 270, 55, 20);
                o->tooltip("The value of the background debugger bits when the debugger is disabled.");
                o->labeltype(FL_NO_LABEL);
                }
                o->end();
                }
                o->end();
                }
                o->end();
              }
              { Fl_Group* o = g_devConfigWordsToolBar = new Fl_Group(590, 295, 25, 135);
                { Fl_RaiseButton* o = new Fl_RaiseButton(590, 295, 25, 25);
                o->tooltip("Insert the settings for a new configuration word.");
                o->box(FL_FLAT_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->image(image_filenew);
                o->deimage(image_filenew1);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_6);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                o->when(FL_WHEN_RELEASE);
                o->hilighted_box(FL_THIN_UP_BOX);
                }
                { Fl_Group* o = g_devConfigWordsNewEditCopy = new Fl_Group(590, 320, 25, 50);
                o->deactivate();
                { Fl_RaiseButton* o = new Fl_RaiseButton(590, 320, 25, 25);
                o->tooltip("Edit current configuration word settings.");
                o->box(FL_FLAT_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->image(image_edit);
                o->deimage(image_edit1);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_7);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                o->when(FL_WHEN_RELEASE);
                o->hilighted_box(FL_THIN_UP_BOX);
                }
                { Fl_RaiseButton* o = new Fl_RaiseButton(590, 345, 25, 25);
                o->tooltip("Clone current configuration word settings.");
                o->box(FL_FLAT_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->image(image_editcopy);
                o->deimage(image_editcopy1);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_8);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                o->when(FL_WHEN_RELEASE);
                o->hilighted_box(FL_THIN_UP_BOX);
                }
                o->end();
                }
                { Fl_Box* o = new Fl_Box(590, 371, 25, 3, "label");
                o->box(FL_THIN_UP_BOX);
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_RaiseButton* o = new Fl_RaiseButton(590, 375, 25, 25);
                o->tooltip("Save current configuration word settings.");
                o->box(FL_FLAT_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->image(image_cfgsave);
                o->deimage(image_cfgsave1);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_9);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                o->when(FL_WHEN_RELEASE);
                o->hilighted_box(FL_THIN_UP_BOX);
                }
                { Fl_RaiseButton* o = new Fl_RaiseButton(590, 405, 25, 25);
                o->tooltip("Remove the last configuration word in the list.");
                o->box(FL_FLAT_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->image(image_editdelete);
                o->deimage(image_editdelete1);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_a);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                o->when(FL_WHEN_RELEASE);
                o->hilighted_box(FL_THIN_UP_BOX);
                }
                o->end();
              }
              o->end();
            }
            { Fl_Hold_Browser* o = ls_devConfigWords = new Fl_Hold_Browser(375, 295, 215, 135);
              o->type(2);
              o->box(FL_DOWN_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              o->selection_color(FL_SELECTION_COLOR);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->textfont(4);
              o->textsize(12);
              o->callback((Fl_Callback*)cb_ls_devConfigWords);
              o->align(FL_ALIGN_BOTTOM);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->add("@u w# | cw mask| cw save| cp mask| cp all | cp none| dp mask| dp on  | dp off | bd mask| bd on  | bd off ");
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(370, 160, 250, 275, "Misc.");
            o->hide();
            { Fl_Group* o = g_devmiscellanea = new Fl_Group(375, 165, 240, 265);
              o->deactivate();
              { Fl_Check_Button* o = tb_devExperimental = new Fl_Check_Button(375, 165, 240, 20, "Experimental");
                o->down_box(FL_DOWN_BOX);
              }
              { Fl_Group* o = new Fl_Group(375, 185, 240, 40);
                { Fl_Group* o = new Fl_Group(375, 205, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Input* o = tx_devIDWord[0] = new Fl_Input(455, 205, 80, 20);
                o->tooltip("Device ID value");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Input* o = tx_devIDWord[1] = new Fl_Input(535, 205, 80, 20);
                o->tooltip("Device ID mask");
                o->labeltype(FL_NO_LABEL);
                }
                { Fl_Box* o = new Fl_Box(375, 205, 80, 20, "Device ID");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(375, 185, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color((Fl_Color)41);
                { Fl_Box* o = new Fl_Box(455, 185, 80, 20, "Value");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(535, 185, 80, 20, "Mask");
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                o->end();
                }
                o->end();
              }
              o->end();
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = t_progcfg = new Fl_Group(365, 50, 260, 390, "Programmer");
        o->tooltip("Programmer Configuration");
        o->align(FL_ALIGN_CENTER);
        o->hide();
        { Fl_Group* o = new Fl_Group(370, 55, 250, 25);
          { Fl_RaiseButton* o = new Fl_RaiseButton(370, 55, 25, 25);
            o->tooltip("Import the programmer settings from a file.");
            o->box(FL_FLAT_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->image(image_cfgopen);
            o->deimage(image_cfgopen1);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_BLACK);
            o->callback((Fl_Callback*)cb_b);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            o->when(FL_WHEN_RELEASE);
            o->hilighted_box(FL_THIN_UP_BOX);
          }
          { Fl_Group* o = g_progCfgNewEditCopy = new Fl_Group(395, 55, 80, 25);
            { Fl_RaiseButton* o = new Fl_RaiseButton(395, 55, 25, 25);
              o->tooltip("Insert a new programmer.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_filenew);
              o->deimage(image_filenew1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_c);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(420, 55, 25, 25);
              o->tooltip("Edit current programmer settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_edit);
              o->deimage(image_edit1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_d);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(445, 55, 25, 25);
              o->tooltip("Clone current programmer settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_editcopy);
              o->deimage(image_editcopy1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_e);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            o->end();
          }
          { Fl_Box* o = new Fl_Box(471, 55, 3, 25, "label");
            o->box(FL_THIN_UP_BOX);
            o->labeltype(FL_NO_LABEL);
          }
          { Fl_Group* o = g_pogStoreMGR = new Fl_Group(475, 55, 145, 25);
            { Fl_RaiseButton* o = new Fl_RaiseButton(475, 55, 25, 25);
              o->tooltip("Save current programmer settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_cfgsave);
              o->deimage(image_cfgsave1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_f);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(595, 55, 25, 25);
              o->tooltip("Remove/discard current programmer settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_editdelete);
              o->deimage(image_editdelete1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_10);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = g_progcfg = new Fl_Group(370, 85, 250, 350);
          o->deactivate();
          { Fl_Group* o = new Fl_Group(370, 85, 250, 20);
            { Fl_Input* o = tx_programmerName = new Fl_Input(495, 85, 125, 20, "Programmer Name:");
              o->tooltip("The name of the programming device.");
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(370, 115, 250, 200);
            o->align(129);
            { Fl_Group* o = new Fl_Group(370, 115, 250, 20);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)41);
              { Fl_Box* o = new Fl_Box(370, 115, 170, 20, "Pin Name");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
              }
              { Fl_Box* o = new Fl_Box(540, 115, 40, 20, "Invert");
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
              }
              { Fl_Box* o = new Fl_Box(580, 115, 40, 20, "Pin #");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 135, 250, 20);
              o->tooltip("The pin used to control the clock signal.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 135, 20, 20);
                o->tooltip("The pin used to control the clock signal.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[ICSP_CLOCK]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 135, 40, 20);
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_CHANGED);
                o->menu(menu_);
                ch_pinNumber[ICSP_CLOCK]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 135, 170, 20, "ICSP Clock");
                o->tooltip("The pin used to control the clock signal.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[ICSP_CLOCK]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 155, 250, 20);
              o->tooltip("The pin from which to read the data read from\\nthe programmed device.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 155, 20, 20);
                o->tooltip("The pin from which to read the data read from the programmed device.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[ICSP_DATA_IN]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 155, 40, 20);
                o->tooltip("The pin from which to read the data read from the programmed device.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_11);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_RELEASE);
                o->menu(menu_1);
                ch_pinNumber[ICSP_DATA_IN]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 155, 170, 20, "ICSP Data In");
                o->tooltip("The pin from which to read the data read from the programmed device.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[ICSP_DATA_IN]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 175, 250, 20);
              o->tooltip("The pin used to send the command/data to\\nprogram the device.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 175, 20, 20);
                o->tooltip("The pin used to send the command/data to program the device.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[ICSP_DATA_OUT]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 175, 40, 20);
                o->tooltip("The pin used to send the command/data to program the device.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_12);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_RELEASE);
                o->menu(menu_2);
                ch_pinNumber[ICSP_DATA_OUT]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 175, 170, 20, "ICSP Data Out");
                o->tooltip("The pin used to send the command/data to program the device.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[ICSP_DATA_OUT]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 195, 250, 20);
              o->tooltip("The pin which controls the Vdd power on/off.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 195, 20, 20);
                o->tooltip("The pin which controls the Vpp power on.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[ICSP_VDD_ON]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 195, 40, 20);
                o->tooltip("The pin which controls the Vpp power on.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_13);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_RELEASE);
                o->menu(menu_3);
                ch_pinNumber[ICSP_VDD_ON]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 195, 170, 20, "A) ICSP Vdd On");
                o->tooltip("The pin which controls the Vdd power on/off.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[ICSP_VDD_ON]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 215, 250, 20);
              o->tooltip("The pin which controls the Vpp power on/off.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 215, 20, 20);
                o->tooltip("The pin which controls the Vpp power on/off.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[ICSP_VPP_ON]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 215, 40, 20);
                o->tooltip("The pin which controls the Vpp power on/off.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_14);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_RELEASE);
                o->menu(menu_4);
                ch_pinNumber[ICSP_VPP_ON]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 215, 170, 20, "B) ICSP Vpp On");
                o->tooltip("The pin which controls the Vpp power on/off.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[ICSP_VPP_ON]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 235, 250, 20);
              o->tooltip("The pin used to select the minimum value of Vdd.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 235, 20, 20);
                o->tooltip("The pin used to select the minimum value of Vdd.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[SEL_MIN_VDD]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 235, 40, 20);
                o->tooltip("The pin used to select the minimum value of Vdd.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_15);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_CHANGED);
                o->menu(menu_5);
                ch_pinNumber[SEL_MIN_VDD]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 235, 170, 20, "C) Selects Minimum Vdd");
                o->tooltip("The pin used to select the minimum value of Vdd.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[SEL_MIN_VDD]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 255, 250, 20);
              o->tooltip("The pin used to select the programming value\\nof Vdd.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 255, 20, 20);
                o->tooltip("The pin used to select the programming value of Vdd.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[SEL_PRG_VDD]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 255, 40, 20);
                o->tooltip("The pin used to select the programming value of Vdd.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_16);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_CHANGED);
                o->menu(menu_6);
                ch_pinNumber[SEL_PRG_VDD]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 255, 170, 20, "D) Selects Program Vdd");
                o->tooltip("The pin used to select the programming value of Vdd.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[SEL_PRG_VDD]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 275, 250, 20);
              o->tooltip("The pin used to select the maximum value of Vdd.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 275, 20, 20);
                o->tooltip("The pin used to select the maximum value of Vdd.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[SEL_MAX_VDD]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 275, 40, 20);
                o->tooltip("The pin used to select the maximum value of Vdd.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_17);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_CHANGED);
                o->menu(menu_7);
                ch_pinNumber[SEL_MAX_VDD]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 275, 170, 20, "E) Selects Maximum Vdd");
                o->tooltip("The pin used to select the maximum value of Vdd.");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[SEL_MAX_VDD]=o;
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 295, 250, 20);
              o->tooltip("The pin used to select the value of Vpp.");
              o->box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              { Fl_Check_Button* o = new Fl_Check_Button(550, 295, 20, 20);
                o->tooltip("The pin used to select the value of Vpp.");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                tb_pinInvert[SEL_VIHH_VPP]=o;
              }
              { Fl_Sorted_Choice* o = new Fl_Sorted_Choice(580, 295, 40, 20);
                o->tooltip("The pin used to select the value of Vpp.");
                o->box(FL_NO_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NO_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_18);
                o->align(FL_ALIGN_LEFT);
                o->when(FL_WHEN_CHANGED);
                o->menu(menu_8);
                ch_pinNumber[SEL_VIHH_VPP]=o;
              }
              { Fl_Box* o = new Fl_Box(370, 295, 170, 20, "F) Selects VIH/VIL Vpp");
                o->tooltip("The pin used to select the value of Vpp (VIH~=13V; VIL=Vdd).");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
                bx_pinName[SEL_VIHH_VPP]=o;
              }
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(370, 325, 250, 110);
            { Fl_Group* o = new Fl_Group(370, 325, 250, 20);
              { Fl_Box* o = new Fl_Box(370, 325, 95, 20, "Vdd=Vdd min.");
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
              }
              { Fl_Box* o = new Fl_Box(465, 325, 15, 20, "if:");
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
              }
              { Fl_Check_Button* o = tb_vddMinCond[0] = new Fl_Check_Button(510, 325, 20, 20, "C=");
                o->tooltip("Minimum Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              { Fl_Check_Button* o = tb_vddMinCond[1] = new Fl_Check_Button(555, 325, 20, 20, "D=");
                o->tooltip("Programming Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              { Fl_Check_Button* o = tb_vddMinCond[2] = new Fl_Check_Button(600, 325, 20, 20, "E=");
                o->tooltip("Maximum Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 345, 250, 20);
              { Fl_Box* o = new Fl_Box(370, 345, 95, 20, "Vdd=Vdd prg.");
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
              }
              { Fl_Box* o = new Fl_Box(465, 345, 15, 20, "if:");
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
              }
              { Fl_Check_Button* o = tb_vddProgCond[0] = new Fl_Check_Button(510, 345, 20, 20, "C=");
                o->tooltip("Minimum Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              { Fl_Check_Button* o = tb_vddProgCond[1] = new Fl_Check_Button(555, 345, 20, 20, "D=");
                o->tooltip("Programming Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              { Fl_Check_Button* o = tb_vddProgCond[2] = new Fl_Check_Button(600, 345, 20, 20, "E=");
                o->tooltip("Maximum Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(370, 365, 250, 20);
              { Fl_Box* o = new Fl_Box(370, 365, 95, 20, "Vdd=Vdd max.");
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
              }
              { Fl_Box* o = new Fl_Box(465, 365, 15, 20, "if:");
                o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
              }
              { Fl_Check_Button* o = tb_vddMaxCond[0] = new Fl_Check_Button(510, 365, 20, 20, "C=");
                o->tooltip("Minimum Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              { Fl_Check_Button* o = tb_vddMaxCond[1] = new Fl_Check_Button(555, 365, 20, 20, "D=");
                o->tooltip("Programming Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              { Fl_Check_Button* o = tb_vddMaxCond[2] = new Fl_Check_Button(600, 365, 20, 20, "E=");
                o->tooltip("Maximum Vdd Selected");
                o->down_box(FL_DOWN_BOX);
                o->align(FL_ALIGN_LEFT);
                o->deactivate();
              }
              o->end();
            }
            { Fl_Check_Button* o = tb_vppOffCond = new Fl_Check_Button(370, 390, 250, 20, "Set (F) OFF before setting (B) OFF");
              o->tooltip("Some programmers switch ICSP Vpp OFF by putting it to GND. Enabling this caus\
es the disconnection of ICSP Vpp from VIHH before putting it to GND.");
              o->down_box(FL_DOWN_BOX);
              o->deactivate();
            }
            { Fl_Check_Button* o = tb_saVddVppControl = new Fl_Check_Button(370, 415, 250, 20, "(B) can be set ON even if (A) is OFF");
              o->tooltip("The programming specifications for some devices (i.e. PIC12C5xx) require that\
 ICSP Vpp rises to VIHH before the ICSP Vdd is ON. To allow this the programme\
r must control the ICSP Vdd and the ICSP Vpp independently from each other.");
              o->down_box(FL_DOWN_BOX);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = t_settings = new Fl_Group(365, 50, 260, 390, "Settings");
        o->hide();
        { Fl_Group* o = new Fl_Group(370, 55, 250, 25);
          { Fl_RaiseButton* o = new Fl_RaiseButton(370, 55, 25, 25);
            o->tooltip("Import the general settings from a file.");
            o->box(FL_FLAT_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->image(image_cfgopen);
            o->deimage(image_cfgopen1);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_BLACK);
            o->callback((Fl_Callback*)cb_19);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            o->when(FL_WHEN_RELEASE);
            o->hilighted_box(FL_THIN_UP_BOX);
          }
          { Fl_Group* o = g_settingsNewEditCopy = new Fl_Group(395, 55, 80, 25);
            { Fl_RaiseButton* o = new Fl_RaiseButton(395, 55, 25, 25);
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_filenew);
              o->deimage(image_filenew1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_1a);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->deactivate();
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(420, 55, 25, 25);
              o->tooltip("Edit the general settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_edit);
              o->deimage(image_edit1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_1b);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(445, 55, 25, 25);
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_editcopy);
              o->deimage(image_editcopy1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_1c);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->deactivate();
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            o->end();
          }
          { Fl_Box* o = new Fl_Box(471, 55, 3, 25, "label");
            o->box(FL_THIN_UP_BOX);
            o->labeltype(FL_NO_LABEL);
          }
          { Fl_Group* o = g_settingsStoreMGR = new Fl_Group(475, 55, 145, 25);
            o->deactivate();
            { Fl_RaiseButton* o = new Fl_RaiseButton(475, 55, 25, 25);
              o->tooltip("Save the general settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_cfgsave);
              o->deimage(image_cfgsave1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_1d);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            { Fl_RaiseButton* o = new Fl_RaiseButton(595, 55, 25, 25);
              o->tooltip("Revert/reset the general settings.");
              o->box(FL_FLAT_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->image(image_editdelete);
              o->deimage(image_editdelete1);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_BLACK);
              o->callback((Fl_Callback*)cb_1e);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->when(FL_WHEN_RELEASE);
              o->hilighted_box(FL_THIN_UP_BOX);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = g_settings = new Fl_Group(370, 85, 250, 150);
          o->deactivate();
          { Fl_Group* o = g_prop_delays = new Fl_Group(370, 85, 250, 150);
            o->box(FL_BORDER_FRAME);
            o->color(FL_FOREGROUND_COLOR);
            { Fl_Input* o = new Fl_Input(425, 110, 55, 20, "Default:");
              o->tooltip("Default propagation delay on all signals");
              tx_propDelay[PD_DEFAULT]=o;
            }
            { Fl_Input* o = new Fl_Input(555, 110, 60, 20, "Additional:");
              o->tooltip("Additional propagation delay on all signals");
              tx_propDelay[PD_ADDITIONAL]=o;
            }
            { Fl_Group* o = new Fl_Group(370, 135, 250, 100);
              { Fl_Group* o = new Fl_Group(380, 135, 240, 20);
                o->box(FL_BORDER_BOX);
                o->color((Fl_Color)41);
                { Fl_Box* o = new Fl_Box(395, 135, 45, 20, "All");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(440, 135, 45, 20, "Clk");
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(380, 135, 15, 20);
                o->box(FL_FLAT_BOX);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(485, 135, 45, 20, "Data");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(530, 135, 45, 20, "Vpp");
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                { Fl_Box* o = new Fl_Box(575, 135, 45, 20, "Vdd");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->labelcolor(FL_BACKGROUND2_COLOR);
                }
                o->end();
              }
              { Fl_Group* o = new Fl_Group(370, 155, 250, 20);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Input* o = new Fl_Input(395, 155, 45, 20);
                o->tooltip("Propagation delay on all read signals");
                o->type(1);
                tx_propDelay[PD_RD_ALL]=o;
                }
                { Fl_Input* o = new Fl_Input(575, 155, 45, 20);
                o->tooltip("Propagation delay on Vdd read signals");
                o->type(1);
                tx_propDelay[PD_RD_VDD]=o;
                }
                { Fl_Box* o = new Fl_Box(370, 155, 25, 20, "R");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                { Fl_Input* o = new Fl_Input(440, 155, 45, 20);
                o->tooltip("Propagation delay on clock read signals");
                o->type(1);
                tx_propDelay[PD_RD_CLK]=o;
                }
                { Fl_Input* o = new Fl_Input(485, 155, 45, 20);
                o->tooltip("Propagation delay on data read signals");
                o->type(1);
                tx_propDelay[PD_RD_DAT]=o;
                }
                { Fl_Input* o = new Fl_Input(530, 155, 45, 20);
                o->tooltip("Propagation delay on Vpp read signals");
                o->type(1);
                tx_propDelay[PD_RD_VPP]=o;
                }
                o->end();
              }
              { Fl_Group* o = new Fl_Group(370, 175, 250, 60);
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                { Fl_Group* o = new Fl_Group(395, 175, 225, 20);
                { Fl_Input* o = new Fl_Input(395, 175, 45, 20);
                o->tooltip("Propagation delay on all write signals");
                o->type(1);
                tx_propDelay[PD_WR_ALL]=o;
                }
                { Fl_Input* o = new Fl_Input(575, 175, 45, 20);
                o->tooltip("Propagation delay on Vdd write signals");
                o->type(1);
                tx_propDelay[PD_WR_VDD]=o;
                }
                { Fl_Input* o = new Fl_Input(440, 175, 45, 20);
                o->tooltip("Propagation delay on clock write signals");
                o->type(1);
                tx_propDelay[PD_WR_CLK]=o;
                }
                { Fl_Input* o = new Fl_Input(485, 175, 45, 20);
                o->tooltip("Propagation delay on data write signals");
                o->type(1);
                tx_propDelay[PD_WR_DAT]=o;
                }
                { Fl_Input* o = new Fl_Input(530, 175, 45, 20);
                o->tooltip("Propagation delay on Vpp write signals");
                o->type(1);
                tx_propDelay[PD_WR_VPP]=o;
                }
                o->end();
                }
                { Fl_Box* o = new Fl_Box(370, 175, 25, 60, "w");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                { Fl_Group* o = new Fl_Group(395, 195, 225, 20);
                { Fl_Input* o = new Fl_Input(575, 195, 45, 20);
                o->tooltip("Propagation delay on Vdd write low to high signals transition");
                o->type(1);
                tx_propDelay[PD_LH_WR_VDD]=o;
                }
                { Fl_Input* o = new Fl_Input(440, 195, 45, 20);
                o->tooltip("Propagation delay on clock write low to high signals transition");
                o->type(1);
                tx_propDelay[PD_LH_WR_CLK]=o;
                }
                { Fl_Input* o = new Fl_Input(485, 195, 45, 20);
                o->tooltip("Propagation delay on data write low to high signals transition");
                o->type(1);
                tx_propDelay[PD_LH_WR_DAT]=o;
                }
                { Fl_Input* o = new Fl_Input(530, 195, 45, 20);
                o->tooltip("Propagation delay on Vpp write low to high signals transition");
                o->type(1);
                tx_propDelay[PD_LH_WR_VPP]=o;
                }
                { Fl_Box* o = new Fl_Box(395, 195, 45, 20, "L->H");
                o->box(FL_BORDER_FRAME);
                o->color(FL_FOREGROUND_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                { Fl_Group* o = new Fl_Group(395, 215, 225, 20);
                { Fl_Input* o = new Fl_Input(575, 215, 45, 20);
                o->tooltip("Propagation delay on Vdd write high to low signals transition");
                o->type(1);
                tx_propDelay[PD_HL_WR_VDD]=o;
                }
                { Fl_Input* o = new Fl_Input(440, 215, 45, 20);
                o->tooltip("Propagation delay on clock write high to low signals transition");
                o->type(1);
                tx_propDelay[PD_HL_WR_CLK]=o;
                }
                { Fl_Input* o = new Fl_Input(485, 215, 45, 20);
                o->tooltip("Propagation delay on data write high to low signals transition");
                o->type(1);
                tx_propDelay[PD_HL_WR_DAT]=o;
                }
                { Fl_Input* o = new Fl_Input(530, 215, 45, 20);
                o->tooltip("Propagation delay on Vpp write high to low signals transition");
                o->type(1);
                tx_propDelay[PD_HL_WR_VPP]=o;
                }
                { Fl_Box* o = new Fl_Box(395, 215, 45, 20, "H->L");
                o->box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
                }
                o->end();
                }
                o->end();
              }
              o->end();
            }
            { Fl_Box* o = new Fl_Box(370, 85, 250, 20, "Propagation delays (nS)");
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)41);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(-2, -2, 634, 22);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Menu_Bar* o = mb_menuBar = new Fl_Menu_Bar(-2, -2, 634, 20);
        o->box(FL_FLAT_BOX);
        o->menu(menu_mb_menuBar);
      }
      o->end();
    }
    { Fl_Progress* o = p_progress = new Fl_Progress(35, 420, 325, 20);
      o->box(FL_THIN_DOWN_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labelfont(4);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = new Fl_Group(0, 25, 360, 20);
      { Fl_Sorted_Choice* o = ch_devices = new Fl_Sorted_Choice(35, 25, 150, 20, "Dev:");
        o->box(FL_FLAT_BOX);
        o->down_box(FL_BORDER_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_ch_devices);
        o->align(FL_ALIGN_LEFT);
        o->when(FL_WHEN_RELEASE_ALWAYS);
        o->item_pixmap(mini_device);
        // o->folder_pixmap(mini_folder);
      }
      { Fl_Sorted_Choice* o = ch_programmers = new Fl_Sorted_Choice(225, 25, 135, 20, "Prog:");
        o->box(FL_FLAT_BOX);
        o->down_box(FL_BORDER_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_ch_programmers);
        o->align(FL_ALIGN_LEFT);
        o->when(FL_WHEN_RELEASE);
        o->item_pixmap(mini_programmer);
        // o->folder_pixmap(mini_folder);
      }
      o->end();
    }
    { Fl_Browser* o = ls_memdump = new Fl_Browser(35, 50, 325, 365);
      o->textfont(4);
      o->textsize(12);
      o->has_scrollbar(Fl_Browser_::BOTH_ALWAYS);
    }
    { Fl_Pack* o = p_toolbar = new Fl_Pack(0, 50, 36, 365);
      { Fl_RaiseButton* o = new Fl_RaiseButton(0, 50, 35, 35);
        o->tooltip("Load an HEX file to the memory buffer.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_fileopen);
        o->deimage(image_fileopen1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_1f);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_RaiseButton* o = new Fl_RaiseButton(0, 85, 35, 35);
        o->tooltip("Save the memory buffer to an HEX file.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_filesave);
        o->deimage(image_filesave1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_20);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_Box* o = new Fl_Box(0, 121, 35, 3);
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_NO_LABEL);
      }
      { Fl_RaiseButton* o = pb_operation[0] = new Fl_RaiseButton(0, 125, 35, 35);
        o->tooltip("Load the content of the Device memory into the memory buffer.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_read_pic);
        o->deimage(image_read_pic1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_RaiseButton* o = pb_operation[1] = new Fl_RaiseButton(0, 160, 35, 35);
        o->tooltip("Erase the content of the Device memory.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_erase_pic);
        o->deimage(image_erase_pic1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation1);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_RaiseButton* o = pb_operation[2] = new Fl_RaiseButton(0, 195, 35, 35);
        o->tooltip("Perform a blanck check of the Device memory.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_check_pic);
        o->deimage(image_check_pic1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation2);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_RaiseButton* o = pb_operation[3] = new Fl_RaiseButton(0, 230, 35, 35);
        o->tooltip("Load the content of the memory buffer into the Device memory.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_write_pic);
        o->deimage(image_write_pic1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation3);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_RaiseButton* o = pb_operation[4] = new Fl_RaiseButton(0, 265, 35, 35);
        o->tooltip("Compare the content of the Device\'s memory with the content of the memory bu\
ffer.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_verify_pic);
        o->deimage(image_verify_pic1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation4);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_Box* o = new Fl_Box(0, 301, 35, 3);
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_NO_LABEL);
      }
      { Fl_RaiseButton* o = pb_operation[5] = new Fl_RaiseButton(0, 305, 35, 35);
        o->tooltip("Switch on/off the Vdd line to enter in the On Circuit Test mode.");
        o->type(1);
        o->box(FL_FLAT_BOX);
        o->down_box(FL_PLASTIC_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color((Fl_Color)3);
        o->image(image_test_pic);
        o->deimage(image_test_pic1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation5);
        o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_CHANGED);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_RaiseButton* o = pb_operation[6] = new Fl_RaiseButton(1, 340, 35, 35);
        o->tooltip("Put the Vpp line to GND to reset the device.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_test_pic_reset);
        o->deimage(image_test_pic_reset1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation6);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_CHANGED);
        o->deactivate();
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      { Fl_Box* o = new Fl_Box(0, 376, 35, 3);
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_NO_LABEL);
      }
      { Fl_RaiseButton* o = pb_operation[7] = new Fl_RaiseButton(0, 380, 35, 35);
        o->tooltip("Start programmer calibration procedure.");
        o->box(FL_FLAT_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_calibrate);
        o->deimage(image_calibrate1);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_pb_operation7);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
        o->hilighted_box(FL_THIN_UP_BOX);
      }
      o->end();
    }
    o->end();
  }
  loadPreferences();

flP5->position (
    (Fl::w()/2 - flP5->w()/2),
    (Fl::h()/2 - flP5->h()/2)
);


make_report_window();
  return w;
}

Fl_Double_Window *w_calibration=(Fl_Double_Window *)0;

Fl_Wizard *wz_calibration=(Fl_Wizard *)0;

Fl_Group *g_warning=(Fl_Group *)0;

Fl_Group *g_vpp=(Fl_Group *)0;

static void cb_g_vpp(Fl_Group*, void*) {
  pb_calCancel->hide();
pb_calSkip->hide();
pb_calPrec->show();
pb_calPrec->label("@<");
pb_calPrec->deactivate();
if (!io->production()) {
    pb_calNext->label("Vdd Write/Prog. @>");
} else {
    pb_calNext->label("Vdd Maximum @>");
}
io->vdd(IO::VDD_TO_OFF);
io->vdd(IO::VDD_TO_PRG);
io->vpp(IO::VPP_TO_VIH);
}

Fl_Group *g_vddmax=(Fl_Group *)0;

static void cb_g_vddmax(Fl_Group*, void*) {
  pb_calPrec->label("@< Vpp VIHH");
pb_calPrec->activate();
pb_calNext->label("Vdd Write/Prog. @>");
io->vdd(IO::VDD_TO_MAX);
io->vdd(IO::VDD_TO_ON);
io->vpp(IO::VPP_TO_VDD);
}

Fl_Group *g_vddp=(Fl_Group *)0;

static void cb_g_vddp(Fl_Group*, void*) {
  if (!io->production()) {
    pb_calPrec->label("@< Vpp VIHH");
    pb_calNext->label("Finish @>");
} else {
    pb_calPrec->label("@< Vdd Maximum");
    pb_calNext->label("Vdd Minimum @>");
}
pb_calPrec->activate();
io->vdd(IO::VDD_TO_PRG);
io->vdd(IO::VDD_TO_ON);
io->vpp(IO::VPP_TO_VDD);
}

Fl_Group *g_vddmin=(Fl_Group *)0;

static void cb_g_vddmin(Fl_Group*, void*) {
  pb_calPrec->label("@< Vdd Write/Prog.");
pb_calPrec->activate();
pb_calNext->label("Finish @>");
io->vdd(IO::VDD_TO_MIN);
io->vdd(IO::VDD_TO_ON);
io->vpp(IO::VPP_TO_VDD);
}

Fl_Group *g_calFinish=(Fl_Group *)0;

static void cb_g_calFinish(Fl_Group*, void*) {
  io->vpp(IO::VPP_TO_GND);
io->vdd(IO::VDD_TO_OFF);
pb_calPrec->label("@<");
pb_calPrec->deactivate();
pb_calNext->label("Done @>");
}

Fl_Button *pb_calNext=(Fl_Button *)0;

static void cb_pb_calNext(Fl_Button*, bool * v) {
  if (!io->production() && wz_calibration->value()==g_vddp) {
    wz_calibration->value(g_calFinish);
    wz_calibration->value()->do_callback();
} else if (!io->production() && wz_calibration->value()==g_vpp) {
    wz_calibration->value(g_vddp);
    wz_calibration->value()->do_callback();
} else if (wz_calibration->value()==g_calFinish) {
    wz_calibration->value(g_warning);
    *v = true;
    w_calibration->hide();
} else {
    wz_calibration->next();
    wz_calibration->value()->do_callback();
};
}

Fl_Button *pb_calCancel=(Fl_Button *)0;

static void cb_pb_calCancel(Fl_Button*, bool * v) {
  if (wz_calibration->value()==g_warning) {
    wz_calibration->value(g_warning);
    *v = false;
    w_calibration->hide();
};
}

Fl_Button *pb_calSkip=(Fl_Button *)0;

static void cb_pb_calSkip(Fl_Button*, bool * v) {
  if (wz_calibration->value()==g_warning) {
    wz_calibration->value(g_warning);
    *v = true;
    w_calibration->hide();
};
}

Fl_Button *pb_calPrec=(Fl_Button *)0;

static void cb_pb_calPrec(Fl_Button*, bool * v) {
  if (!io->production() && wz_calibration->value()==g_vddp) {
    wz_calibration->value(g_vpp);
    wz_calibration->value()->do_callback();
} else if (wz_calibration->value()==g_warning) {
    wz_calibration->value(g_warning);
    *v = false;
    w_calibration->hide();
} else {
    wz_calibration->prev();
    wz_calibration->value()->do_callback();
};
}

bool make_calibration_window(bool force,const char *devname,double vppmin,double vppmax,double vddpmin,double vddpmax,double vddmin,double vddmax) {
  Fl_Double_Window* w;
  static char cvppmin[10],
            cvppmax[10],
            cvddpmin[10],
            cvddpmax[10],
            cvddmin[10],
            cvddmax[10];

bool proceed = false;

sprintf(cvppmin,"%4.2lf",vppmin);
sprintf(cvppmax,"%4.2lf",vppmax);
sprintf(cvddpmin,"%4.2lf",vddpmin);
sprintf(cvddpmax,"%4.2lf",vddpmax);
sprintf(cvddmin,"%4.2lf",vddmin);
sprintf(cvddmax,"%4.2lf",vddmax);
  { Fl_Double_Window* o = w_calibration = new Fl_Double_Window(300, 200, "flP5 - Programmer Calibration");
    w = o;
    { Fl_Box* o = new Fl_Box(0, 0, 300, 35, "Programmer Calibration");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(1);
      o->labelsize(24);
      o->labelcolor((Fl_Color)1);
    }
    { Fl_Wizard* o = wz_calibration = new Fl_Wizard(5, 35, 290, 130);
      o->box(FL_NO_BOX);
      o->color((Fl_Color)3);
      { Fl_Group* o = g_warning = new Fl_Group(5, 35, 290, 130);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)3);
        { Fl_Group* o = new Fl_Group(15, 50, 270, 55);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)3);
          { Fl_Box* o = new Fl_Box(20, 55, 260, 45, "OOOOOOOO");
            o->box(FL_DOWN_BOX);
            o->labeltype(FL_SHADOW_LABEL);
            o->labelfont(14);
            o->labelsize(36);
            o->labelcolor((Fl_Color)36);
            o->align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE);
            o->label(devname);
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(15, 110, 270, 45, "WARNING: DISCONNECT THE CHIP FROM THE ZIF OR ICSP SOCKET");
          o->box(FL_PLASTIC_THIN_DOWN_BOX);
          o->color((Fl_Color)3);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(1);
          o->labelsize(16);
          o->labelcolor((Fl_Color)41);
          o->align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(150, 40, 135, 10, "flP5 Digital Voltmeter");
          o->labelfont(14);
          o->labelsize(10);
          o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = g_vpp = new Fl_Group(5, 35, 290, 130);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_g_vpp);
        o->hide();
        { Fl_Box* o = new Fl_Box(10, 115, 280, 40, "Vpp VIHH");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(1);
          o->labelsize(34);
          o->labelcolor((Fl_Color)41);
        }
        { Fl_Group* o = new Fl_Group(15, 50, 270, 55);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)3);
          { Fl_Group* o = new Fl_Group(20, 55, 260, 45);
            o->box(FL_DOWN_BOX);
            { Fl_Box* o = new Fl_Box(20, 55, 115, 45, "12.75");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              o->label(cvppmin);
            }
            { Fl_Box* o = new Fl_Box(165, 55, 115, 45, "13.25");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              o->label(cvppmax);
            }
            { Fl_Box* o = new Fl_Box(135, 55, 30, 45, "\367");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(150, 40, 135, 10, "flP5 Digital Voltmeter");
          o->labelfont(14);
          o->labelsize(10);
          o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = g_vddmax = new Fl_Group(5, 35, 290, 130);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_g_vddmax);
        o->align(FL_ALIGN_RIGHT);
        o->hide();
        { Fl_Box* o = new Fl_Box(10, 115, 280, 40, "Vdd Maximum");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(1);
          o->labelsize(34);
          o->labelcolor((Fl_Color)41);
          o->align(FL_ALIGN_WRAP);
        }
        { Fl_Group* o = new Fl_Group(15, 50, 270, 55);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)3);
          o->labelcolor(FL_FOREGROUND_COLOR);
          { Fl_Group* o = new Fl_Group(20, 55, 260, 45);
            o->box(FL_DOWN_BOX);
            { Fl_Box* o = new Fl_Box(20, 55, 260, 45, "5.25");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              o->label(cvddmax);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(150, 40, 135, 10, "flP5 Digital Voltmeter");
          o->labelfont(14);
          o->labelsize(10);
          o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = g_vddp = new Fl_Group(5, 35, 290, 130);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_g_vddp);
        o->hide();
        { Fl_Box* o = new Fl_Box(10, 115, 280, 40, "Vdd Write/Prog.");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(1);
          o->labelsize(34);
          o->labelcolor((Fl_Color)41);
        }
        { Fl_Group* o = new Fl_Group(15, 50, 270, 55);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)3);
          { Fl_Group* o = new Fl_Group(20, 55, 260, 45);
            o->box(FL_DOWN_BOX);
            { Fl_Box* o = new Fl_Box(20, 55, 115, 45, "12.75");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              o->label(cvddpmin);
            }
            { Fl_Box* o = new Fl_Box(165, 55, 115, 45, "13.25");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              o->label(cvddpmax);
            }
            { Fl_Box* o = new Fl_Box(135, 55, 30, 45, "\367");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(150, 40, 135, 10, "flP5 Digital Voltmeter");
          o->labelfont(14);
          o->labelsize(10);
          o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = g_vddmin = new Fl_Group(5, 35, 290, 130);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_g_vddmin);
        o->hide();
        { Fl_Box* o = new Fl_Box(10, 115, 280, 40, "Vdd Minimum");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(1);
          o->labelsize(34);
          o->labelcolor((Fl_Color)41);
        }
        { Fl_Group* o = new Fl_Group(15, 50, 270, 55);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)3);
          { Fl_Group* o = new Fl_Group(20, 55, 260, 45);
            o->box(FL_DOWN_BOX);
            { Fl_Box* o = new Fl_Box(20, 55, 260, 45, "5.25");
              o->labeltype(FL_SHADOW_LABEL);
              o->labelfont(14);
              o->labelsize(36);
              o->labelcolor((Fl_Color)36);
              o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              o->label(cvddmin);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(150, 40, 135, 10, "flP5 Digital Voltmeter");
          o->labelfont(14);
          o->labelsize(10);
          o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = g_calFinish = new Fl_Group(5, 35, 290, 130);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_g_calFinish);
        o->hide();
        { Fl_Group* o = new Fl_Group(15, 50, 270, 55);
          o->box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)3);
          { Fl_Box* o = new Fl_Box(20, 55, 260, 45, "FINISH");
            o->box(FL_DOWN_BOX);
            o->labeltype(FL_SHADOW_LABEL);
            o->labelfont(14);
            o->labelsize(36);
            o->labelcolor((Fl_Color)36);
            o->align(129|FL_ALIGN_INSIDE);
          }
          o->end();
        }
        { Fl_Box* o = new Fl_Box(150, 40, 135, 10, "flP5 Digital Voltmeter");
          o->labelfont(14);
          o->labelsize(10);
          o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        }
        { Fl_Box* o = new Fl_Box(10, 115, 280, 40, "NOW YOU CAN (RE)CONNECT THE CHIP INTO THE ZIF/ICSP SOCKET");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(1);
          o->labelsize(16);
          o->labelcolor((Fl_Color)41);
          o->align(129|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = pb_calNext = new Fl_Button(150, 170, 145, 25, "Vpp VIHH @>");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_pb_calNext, (void*)(&proceed));
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = pb_calCancel = new Fl_Button(5, 170, 145, 25, "@< Cancel");
      o->tooltip("Cancel current operation.");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_pb_calCancel, (void*)(&proceed));
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = pb_calSkip = new Fl_Button(80, 170, 70, 25, "Skip @>");
      o->tooltip("Skip calibration. Perform operation.");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_pb_calSkip, (void*)(&proceed));
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      o->hide();
    }
    { Fl_Button* o = pb_calPrec = new Fl_Button(5, 170, 145, 25, "@<");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_pb_calPrec, (void*)(&proceed));
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      o->hide();
    }
    o->set_modal();
    o->end();
  }
  pb_calCancel->show();
// pb_calSkip->show();
pb_calPrec->hide();
// if (force) {
//     pb_calSkip->deactivate();
// }
w_calibration->position (
    flP5->x() + (flP5->w()/2 - w_calibration->w()/2),
    flP5->y() + (flP5->h()/2 - w_calibration->h()/2)
);
w_calibration->show();

while (w_calibration->visible()) {
    Fl::wait();
}

delete w_calibration;

return proceed;
}

Fl_Double_Window *w_report=(Fl_Double_Window *)0;

Fl_Button *pb_discard=(Fl_Button *)0;

static void cb_pb_discard(Fl_Button*, void*) {
  load_item = false;
w_report->hide();
}

Fl_Return_Button *pb_load=(Fl_Return_Button *)0;

static void cb_pb_load(Fl_Return_Button*, void*) {
  load_item = true;
w_report->hide();
}

Fl_Browser *ls_report=(Fl_Browser *)0;

Fl_Double_Window* make_report_window(void) {
  Fl_Double_Window* w;
  if (w_report) {
    return w_report;
}
  { Fl_Double_Window* o = w_report = new Fl_Double_Window(300, 200, "flP5 - Import Report");
    w = o;
    { Fl_Button* o = pb_discard = new Fl_Button(5, 170, 140, 25, "Discard");
      o->callback((Fl_Callback*)cb_pb_discard);
    }
    { Fl_Return_Button* o = pb_load = new Fl_Return_Button(155, 170, 140, 25, "Load");
      o->callback((Fl_Callback*)cb_pb_load);
    }
    { Fl_Browser* o = ls_report = new Fl_Browser(5, 20, 290, 145, "Device: Microchip/PIC/PIC16F877");
      o->labelfont(1);
      o->labelsize(16);
      o->textfont(4);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    o->set_modal();
    o->end();
  }
  w_report->hide();
  return w;
}

Fl_Double_Window *w_copyright=(Fl_Double_Window *)0;

static void cb_OK(Fl_Return_Button*, void*) {
  w_copyright->hide();
delete w_copyright;
w_copyright = 0;
}

Fl_Double_Window* make_copyright_window(char *copyright) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = w_copyright = new Fl_Double_Window(350, 350, "flP5 Copyright");
    w = o;
    { Fl_Return_Button* o = new Fl_Return_Button(5, 320, 340, 25, "OK");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK);
    }
    { Fl_Help_View* o = new Fl_Help_View(5, 5, 340, 310);
      o->box(FL_THIN_DOWN_BOX);
      o->value(copyright);
    }
    o->set_modal();
    o->end();
  }
  w_copyright->position (
    flP5->x() + (flP5->w()/2 - w_copyright->w()/2),
    flP5->y() + (flP5->h()/2 - w_copyright->h()/2)
);
w_copyright->show();

// while (w_copyright->visible()) {
//     Fl::wait();
// }
//
// delete w_copyright;
// w_copyright = 0;
  return w;
}

bool show_report_window(const char *title) {
  ls_report->label(title);
w_report->position (
    flP5->x() + (flP5->w()/2 - w_report->w()/2),
    flP5->y() + (flP5->h()/2 - w_report->h()/2)
);
w_report->show();

while (w_report->visible()) {
    Fl::wait();
}
return load_item;
}

Fl_Double_Window *w_regcheck=(Fl_Double_Window *)0;

Fl_Group *g_regform=(Fl_Group *)0;

Fl_Button *pb_reglater=(Fl_Button *)0;

static void cb_pb_reglater(Fl_Button*, void*) {
  w_regcheck->hide();
}

Fl_Return_Button *pb_regnow=(Fl_Return_Button *)0;

static void cb_pb_regnow(Fl_Return_Button*, void*) {
  #if defined(CHECK_REGISTRATION)
int prodCode, regKey;

if (
    sscanf(tx_paypal_code->value(),"%x",&prodCode)==1 &&
    sscanf(tx_reg_key->value(),"%x",&regKey)==1 &&
    checkRegistration(prodCode,regKey)
) {
    app.set("transactionCode",prodCode);
    app.set("registrationKey",regKey);
    w_regcheck->hide();
} else {
    fl_beep(FL_BEEP_ERROR);
}
#endif
}

Fl_Input *tx_paypal_code=(Fl_Input *)0;

Fl_Input *tx_reg_key=(Fl_Input *)0;

Fl_Box *bx_countdown=(Fl_Box *)0;

void make_regcheck_window(void) {
  Fl_Double_Window* w;
  #if defined(CHECK_REGISTRATION)

int transactionCode, registrationKey;

if (
    app.get("transactionCode",transactionCode,0) &&
    app.get("registrationKey",registrationKey,0) &&
    checkRegistration(transactionCode,registrationKey)
) {
    return;
}
  { Fl_Double_Window* o = w_regcheck = new Fl_Double_Window(300, 200, "flP5 - Registration");
    w = o;
    o->box(FL_UP_BOX);
    { Fl_Group* o = g_regform = new Fl_Group(5, 80, 290, 115);
      { Fl_Button* o = pb_reglater = new Fl_Button(5, 170, 140, 25, "Register Later");
        o->callback((Fl_Callback*)cb_pb_reglater);
      }
      { Fl_Return_Button* o = pb_regnow = new Fl_Return_Button(155, 170, 140, 25, "Register Now");
        o->callback((Fl_Callback*)cb_pb_regnow);
      }
      { Fl_Input* o = tx_paypal_code = new Fl_Input(5, 105, 290, 20, "Product Code:");
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Input* o = tx_reg_key = new Fl_Input(5, 145, 290, 20, "Registration Key:");
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Box* o = new Fl_Box(5, 82, 290, 2);
        o->box(FL_DOWN_BOX);
        o->labeltype(FL_NO_LABEL);
      }
      o->end();
    }
    { Fl_Box* o = new Fl_Box(5, 5, 290, 25, "The program is not registered");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)40);
      o->labeltype(FL_SHADOW_LABEL);
      o->labelfont(1);
      o->labelsize(20);
      o->labelcolor(FL_BACKGROUND2_COLOR);
    }
    { Fl_Box* o = bx_countdown = new Fl_Box(5, 80, 290, 115, "99");
      o->box(FL_FLAT_BOX);
      o->labeltype(FL_SHADOW_LABEL);
      o->labelfont(1);
      o->labelsize(100);
      o->labelcolor((Fl_Color)1);
      o->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      o->hide();
    }
    { Fl_Box* o = new Fl_Box(5, 30, 290, 50, "To make this window disappear definitely, at the end of the countdown, please\
 insert a valid product code and registration key pair.");
      o->align(FL_ALIGN_WRAP);
    }
    o->set_modal();
    o->clear_border();
    o->end();
  }
  w_regcheck->position (
    flP5->x() + (flP5->w()/2 - w_regcheck->w()/2),
    flP5->y() + (flP5->h()/2 - w_regcheck->h()/2)
);
g_regform->hide();
bx_countdown->label("--");
bx_countdown->show();
w_regcheck->show();

Fl::add_timeout(1.0,registrationCountDown,(void*)30);

while (w_regcheck->visible()) {
    Fl::wait();
}

delete w_regcheck;

#endif // CHECK_REGISTRATION
}

void registrationCountDown(void *count) {
  int remain = (int)count;
static char scount[3];

sprintf(scount,"%2d",remain);
bx_countdown->label(scount);
remain--;
if (remain) {
    Fl::add_timeout(1.0,registrationCountDown,(void *)remain);
} else {
    bx_countdown->hide();
    g_regform->show();
}
}
