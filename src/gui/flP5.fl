# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cxx}
decl {/* Copyright (C) 2003-2010  Francesco Bradascio <fbradasc@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */} {private local
} 

decl {/* Copyright (C) 2003-2010  Francesco Bradascio <fbradasc@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */} {public local
} 

decl {\#include "proto_flP5.h"} {public local
} 

decl {\#include <FL/Fl_Choice.H>} {public local
} 

decl {\#include <FL/Fl_Check_Button.H>} {public local
} 

decl {\#include <FL/Fl_Box.H>} {public local
} 

decl {\#include <FL/Fl_Input.H>} {public local
} 

decl {\#include <FL/fl_ask.H>} {public local
} 

decl {bool load_item=false;} {private local
} 

decl {Fl_Choice *ch_pinNumber[9];} {public local
} 

decl {Fl_Check_Button *tb_pinInvert[9];} {public local
} 

decl {Fl_Box *bx_pinName[9];} {public local
} 

decl {Fl_Input *tx_devParam[LAST_PARAM];} {public local
} 

decl {Fl_Input *tx_propDelay[LAST_PROP_DLY];} {public local
} 

decl {Fl_Input *tx_devCfgWord[LAST_CONFIG_WORD];} {public local
} 

decl {\#include <FL/Fl_RaiseButton.H>} {public local
} 

decl {\#include "pixmaps/mini_folder.xpm"} {private local
} 

decl {Fl_Pixmap *mini_folder = new Fl_Pixmap(mini_folder_xpm);} {private local
} 

decl {\#include "pixmaps/mini_device.xpm"} {private local
} 

decl {Fl_Pixmap *mini_device = new Fl_Pixmap(mini_device_xpm);} {private local
} 

decl {\#include "pixmaps/mini_programmer.xpm"} {private local
} 

decl {Fl_Pixmap *mini_programmer = new Fl_Pixmap(mini_programmer_xpm);} {private local
} 

Function {make_flP5()} {
  callback {processOperation(CHIP_VERIFY);} open
} {
  code {int i;

for (i=0;i<LAST_PIN;i++) {
    ch_pinNumber[i] = 0;
    tb_pinInvert[i] = 0;
    bx_pinName[i] = 0;
}
for (i=0;i<LAST_PARAM;i++) {
    tx_devParam[i] = 0;
}
for (i=0;i<LAST_PROP_DLY;i++) {
    tx_propDelay[i] = 0;
}} {}
  Fl_Window flP5 {
    label {flP5 - Fast Light Parallel Port Production PIC Programmer} open
    xywh {490 255 630 445} type Double visible
  } {
    Fl_Tabs {} {open
      private xywh {365 25 260 415} box UP_BOX
    } {
      Fl_Group t_devcfg {
        label Device open
        tooltip {Device Configuration} xywh {365 50 260 390}
      } {
        Fl_Group {} {open
          private xywh {370 55 250 25}
        } {
          Fl_Button {} {
            callback {deviceConfigCB(CFG_IMPORT);
ch_devices->do_callback();
g_devcfg->deactivate();
g_devgencfg->deactivate();
g_devcfgwords->deactivate();
g_devmiscellanea->deactivate();
g_devCfgNewEditCopy->activate();
t_devcfg->redraw();}
            private tooltip {Import the device settings from a file.} image {./pixmaps/cfgopen.xpm} deimage {./pixmaps/cfgopen-desel.xpm} xywh {370 55 25 25} box FLAT_BOX align 16
            code0 {o->hilighted_box(FL_THIN_UP_BOX);}
            class Fl_RaiseButton
          }
          Fl_Group g_devCfgNewEditCopy {open
            xywh {395 55 75 25}
          } {
            Fl_Button {} {
              callback {g_devcfg->activate();
g_devgencfg->activate();
g_devcfgwords->activate();
g_devmiscellanea->activate();
g_devCfgNewEditCopy->deactivate();
deviceConfigCB(CFG_NEW);}
              private tooltip {Insert a new device.} image {./pixmaps/filenew.xpm} deimage {./pixmaps/filenew-desel.xpm} xywh {395 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {g_devcfg->activate();
g_devgencfg->activate();
g_devcfgwords->activate();
g_devmiscellanea->activate();
g_devCfgNewEditCopy->deactivate();
deviceConfigCB(CFG_EDIT);}
              private tooltip {Edit current device settings.} image {./pixmaps/edit.xpm} deimage {./pixmaps/edit-desel.xpm} xywh {420 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {g_devcfg->activate();
g_devgencfg->activate();
g_devcfgwords->activate();
g_devmiscellanea->activate();
g_devCfgNewEditCopy->deactivate();
deviceConfigCB(CFG_COPY);}
              private tooltip {Clone current device settings.} image {./pixmaps/editcopy.xpm} deimage {./pixmaps/editcopy-desel.xpm} xywh {445 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
          }
          Fl_Box {} {
            label label
            private xywh {471 55 3 25} box THIN_UP_BOX labeltype NO_LABEL
          }
          Fl_Group g_devCfgStoreMGR {open
            xywh {475 55 145 25}
          } {
            Fl_Button {} {
              callback {if (deviceConfigCB(CFG_SAVE)) {
    g_devcfg->deactivate();
    g_devgencfg->deactivate();
    g_devcfgwords->deactivate();
    g_devmiscellanea->deactivate();
    g_devCfgNewEditCopy->activate();
    t_devcfg->redraw();
    ch_devices->do_callback();
}}
              private tooltip {Save current device settings.} image {./pixmaps/cfgsave.xpm} deimage {./pixmaps/cfgsave-desel.xpm} xywh {475 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {if (deviceConfigCB(CFG_DELETE)) {
    g_devcfg->deactivate();
    g_devgencfg->deactivate();
    g_devcfgwords->deactivate();
    g_devmiscellanea->deactivate();
    g_devCfgNewEditCopy->activate();
    t_devcfg->redraw();
}}
              private tooltip {Remove/discard current device settings.} image {./pixmaps/editdelete.xpm} deimage {./pixmaps/editdelete-desel.xpm} xywh {595 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
          }
        }
        Fl_Group g_devcfg {open
          xywh {370 85 250 45} deactivate
        } {
          Fl_Input tx_devName {
            label {Device Name:}
            tooltip {The name of the device.} xywh {485 85 135 20}
          }
          Fl_Choice ch_devProgSpec {
            label {Vendor && Family:} open
            tooltip {The programming specifications describing how to program the device.} xywh {485 110 135 20} down_box BORDER_BOX
            code0 {\#include <FL/Fl_Sorted_Choice.H>}
            code1 {o->item_pixmap(mini_device);}
            code2 {// o->folder_pixmap(mini_folder);}
            class Fl_Sorted_Choice
          } {
            Submenu {} {
              label Microchip open
              private xywh {0 0 100 20}
            } {
              MenuItem {} {
                label {Microchip PIC}
                user_data {"Microchip/PIC"} user_data_type {const char*}
                private xywh {15 15 100 20}
              }
            }
          }
        }
        Fl_Tabs {} {open
          private xywh {370 135 250 300} box UP_BOX
        } {
          Fl_Group {} {
            label General open selected
            private xywh {370 160 250 275}
          } {
            Fl_Group g_devgencfg {open
              xywh {375 165 240 265} deactivate
            } {
              Fl_Group {} {open
                private xywh {375 165 240 85}
              } {
                Fl_Group {} {open
                  private xywh {375 165 240 20}
                } {
                  Fl_Choice ch_devMemType {
                    label {Memory Type:} open
                    tooltip {The type of memory in the PIC. This can have the values 'eprom', 'flash', or 'flashe'. 'eprom' can be used for any eprom/OTP device. 'flash' can be used for any type of electronically erasable device 'flashe' is similar to 'flash' but in the programming cycle, the END_PROG command is required.} xywh {505 165 110 20} down_box BORDER_BOX
                    code0 {\#include <FL/Fl_Sorted_Choice.H>}
                    code1 {o->item_pixmap(mini_device);}
                    class Fl_Sorted_Choice
                  } {
                    MenuItem {} {
                      label ROM
                      user_data {"rom"} user_data_type {const char*}
                      private xywh {10 10 100 20}
                    }
                    MenuItem {} {
                      label EPROM
                      user_data {"eprom"} user_data_type {const char*}
                      private xywh {10 10 100 20}
                    }
                    MenuItem {} {
                      label FLASH
                      user_data {"flash"} user_data_type {const char*}
                      private xywh {10 10 100 20}
                    }
                    MenuItem {} {
                      label {FLASH E/P}
                      user_data {"flashe"} user_data_type {const char*}
                      private xywh {10 10 100 20}
                    }
                  }
                }
                Fl_Group {} {open
                  private xywh {375 190 240 20}
                } {
                  Fl_Input {} {
                    label {Word Size:}
                    private tooltip {The size of an instruction word in bits.} xywh {505 190 60 20} type Int
                    code0 {tx_devParam[PAR_WORD_SIZE]=o;}
                  }
                  Fl_Box {} {
                    label bits
                    private xywh {565 190 50 20} align 16
                  }
                }
                Fl_Group {} {open
                  private xywh {375 210 240 20}
                } {
                  Fl_Input {} {
                    label {Code Size:}
                    private tooltip {The number of words of code space.} xywh {505 210 60 20} type Int
                    code0 {tx_devParam[PAR_CODE_SIZE]=o;}
                  }
                  Fl_Box {} {
                    label words
                    private xywh {565 210 50 20} align 16
                  }
                }
                Fl_Group {} {open
                  private xywh {375 230 240 20}
                } {
                  Fl_Input {} {
                    label {Eeprom Size:}
                    private tooltip {The number of bytes of data EEPROM. If the device doesn't have a data EEPROM, this must be set to 0.} xywh {505 230 60 20} type Int
                    code0 {tx_devParam[PAR_EEPROM_SIZE]=o;}
                  }
                  Fl_Box {} {
                    label words
                    private xywh {565 230 50 20} align 16
                  }
                }
              }
              Fl_Group {} {open
                private xywh {375 255 240 90}
              } {
                Fl_Group {} {open
                  private xywh {375 255 240 20}
                } {
                  Fl_Input {} {
                    label {Programming Count:}
                    private tooltip {The maximum number of times to attempt to program a memory location before reporting an error. Defined in the programming spec.} xywh {505 255 60 20} type Int
                    code0 {tx_devParam[PAR_PROG_COUNT]=o;}
                  }
                  Fl_Box {} {
                    label {(=N)}
                    private xywh {565 255 50 20} align 16
                  }
                }
                Fl_Group {} {open
                  private xywh {375 280 240 20}
                } {
                  Fl_Input {} {
                    label {Programming Mult.:}
                    private tooltip {The multiplier for the number of times to overprogram. Defined in the programming spec.} xywh {505 280 60 20} type Int
                    code0 {tx_devParam[PAR_PROG_MULT]=o;}
                  }
                  Fl_Box {} {
                    label {(*N)}
                    private xywh {565 280 50 20} align 16
                  }
                }
                Fl_Group {} {open
                  private xywh {375 305 240 20}
                } {
                  Fl_Box {} {
                    label {[uS]}
                    private xywh {565 305 50 20} align 16
                  }
                  Fl_Input {} {
                    label {Programming Time:}
                    private tooltip {The number of microseconds in each programming attempt for one memory location. To be on the safe side, the maximum value from the datasheet should be used for flash devices.} xywh {505 305 60 20} type Int
                    code0 {tx_devParam[PAR_PROG_TIME]=o;}
                  }
                }
                Fl_Group {} {open
                  private xywh {375 325 240 20}
                } {
                  Fl_Box {} {
                    label {[uS]}
                    private xywh {565 325 50 20} align 16
                  }
                  Fl_Input {} {
                    label {Erase Time:}
                    private tooltip {The number of microseconds that a bulk erase takes.} xywh {505 325 60 20} type Int
                    code0 {tx_devParam[PAR_ERASE_TIME]=o;}
                  }
                }
              }
              Fl_Group {} {open
                private xywh {375 350 240 80}
              } {
                Fl_Group {} {open
                  private xywh {375 350 240 20} box BORDER_BOX color 41
                } {
                  Fl_Box {} {
                    label {Vmin [V]}
                    private xywh {495 350 60 20} labelcolor 7
                  }
                  Fl_Box {} {
                    label {Vmax [V]}
                    private xywh {555 350 60 20} box BORDER_FRAME color 0 labelcolor 7
                  }
                  Fl_Box {} {
                    label Voltage
                    private xywh {375 350 120 20} box BORDER_FRAME color 0 labelcolor 7
                  }
                }
                Fl_Group {} {open
                  private xywh {375 370 240 20} box BORDER_BOX color 7
                } {
                  Fl_Input {} {
                    private tooltip {The minimum value for Vpp.} xywh {495 370 60 20} type Float
                    code0 {tx_devParam[PAR_VPP_MIN]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {The maximum value for Vpp.} xywh {555 370 60 20} type Float
                    code0 {tx_devParam[PAR_VPP_MAX]=o;}
                  }
                  Fl_Box {} {
                    label {Vpp [VIHH]}
                    private xywh {375 370 120 20} align 20
                  }
                }
                Fl_Group {} {open
                  private xywh {375 390 240 20} box BORDER_BOX color 7
                } {
                  Fl_Input {} {
                    private tooltip {The minimum value for Vdd.} xywh {495 390 60 20} type Float
                    code0 {tx_devParam[PAR_VDD_MIN]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {The maximum value for Vdd.} xywh {555 390 60 20} type Float
                    code0 {tx_devParam[PAR_VDD_MAX]=o;}
                  }
                  Fl_Box {} {
                    label {Vdd [Read/Verify]}
                    private xywh {375 390 120 20} align 20
                  }
                }
                Fl_Group {} {open
                  private xywh {375 410 240 20} box BORDER_BOX color 7
                } {
                  Fl_Input {} {
                    private tooltip {The minimum value for Vdd during programming.} xywh {495 410 60 20} type Float
                    code0 {tx_devParam[PAR_VDDP_MIN]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {The maximum value for Vdd during programming.} xywh {555 410 60 20} type Float
                    code0 {tx_devParam[PAR_VDDP_MAX]=o;}
                  }
                  Fl_Box {} {
                    label {Vdd [Write/Progr.]}
                    private xywh {375 410 120 20} align 20
                  }
                }
              }
            }
          }
          Fl_Group {} {
            label {Cfg. Words} open
            private xywh {370 160 250 275} hide
          } {
            Fl_Group g_devcfgwords {open
              xywh {375 165 240 265} deactivate
            } {
              Fl_Group g_devConfigWordsEdit {open
                xywh {375 165 240 125}
              } {
                Fl_Group {} {open
                  private xywh {375 165 240 40}
                } {
                  Fl_Group {} {open
                    private xywh {375 165 240 20} box BORDER_BOX color 41
                  } {
                    Fl_Box {} {
                      label Mask
                      private xywh {450 165 55 20} box BORDER_FRAME color 0 labelcolor 7
                    }
                    Fl_Box {} {
                      label Save
                      private xywh {505 165 55 20} color 0 labelcolor 7
                    }
                    Fl_Box {} {
                      label Default
                      private xywh {560 165 55 20} box BORDER_FRAME color 0 labelcolor 7
                    }
                  }
                  Fl_Group {} {open
                    private xywh {375 185 240 20} box BORDER_BOX color 7
                  } {
                    Fl_Box {} {
                      label {Conf. word}
                      private xywh {375 185 75 20} box BORDER_FRAME color 0 align 20
                    }
                    Fl_Input {} {
                      tooltip {A bitmask of all valid (non-reserved) configuration bits.} xywh {450 185 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_MASK]=o;}
                    }
                    Fl_Input {} {
                      tooltip {A bitmask of persistent bits in  the  configuration word.  These bits will be saved before and restored after a chip erase. They will also not  be  modifiable when programming the device.} xywh {505 185 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_SAVE]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The default value of the configuration bits after an erase.} xywh {560 185 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_DEFV]=o;}
                    }
                  }
                }
                Fl_Group {} {open
                  private xywh {375 210 240 80}
                } {
                  Fl_Group {} {open
                    private xywh {375 210 240 20} box BORDER_BOX color 41
                  } {
                    Fl_Box {} {
                      label Mask
                      private xywh {450 210 55 20} box BORDER_FRAME color 0 labelcolor 7
                    }
                    Fl_Box {} {
                      label On
                      private xywh {505 210 55 20} color 0 labelcolor 7
                    }
                    Fl_Box {} {
                      label Off
                      private xywh {560 210 55 20} box BORDER_FRAME color 0 labelcolor 7
                    }
                  }
                  Fl_Group {} {open
                    private xywh {375 230 240 20} box BORDER_BOX color 7
                  } {
                    Fl_Box {} {
                      label {Code prot.}
                      private tooltip {Code protection bit(s).} xywh {375 230 75 20} color 0 align 20
                    }
                    Fl_Input {} {
                      tooltip {A bitmask of all the code protection bits.} xywh {450 230 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_CP_MASK]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The value of the code protection bits when all memory is code protected.} xywh {505 230 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_CP_ALL]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The value of the code protection bits when no memory is code protected.} xywh {560 230 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_CP_NONE]=o;}
                    }
                  }
                  Fl_Group {} {open
                    private xywh {375 250 240 20} box BORDER_BOX color 7
                  } {
                    Fl_Box {} {
                      label {Data prot.}
                      private tooltip {Data memory code protection bit(s).} xywh {375 250 75 20} color 0 align 20
                    }
                    Fl_Input {} {
                      tooltip {A bitmask of the bit(s) that enable data memory code protection.} xywh {450 250 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_DP_MASK]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The value of the data memory code protection bit(s) when data code protection is enabled.} xywh {505 250 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_DP_ON]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The value of the data memory code protection bit(s) when data code protection is disabled.} xywh {560 250 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_DP_OFF]=o;}
                    }
                  }
                  Fl_Group {} {open
                    private xywh {375 270 240 20} box BORDER_BOX color 7
                  } {
                    Fl_Box {} {
                      label {Bkg. Debug}
                      private tooltip {On-chip background debugger bit(s).} xywh {375 270 75 20} color 0 align 20
                    }
                    Fl_Input {} {
                      tooltip {A bitmask for the bit(s) which enable the on-chip background debugger.} xywh {450 270 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_BD_MASK]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The value of the background debugger bits when the debugger is enabled.} xywh {505 270 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_BD_ON]=o;}
                    }
                    Fl_Input {} {
                      tooltip {The value of the background debugger bits when the debugger is disabled.} xywh {560 270 55 20} labeltype NO_LABEL
                      code0 {tx_devCfgWord[CW_BD_OFF]=o;}
                    }
                  }
                }
              }
              Fl_Group g_devConfigWordsToolBar {
                xywh {590 295 25 135}
              } {
                Fl_Button {} {
                  callback {g_devConfigWordsEdit->activate();
g_devConfigWordsNewEditCopy->deactivate();
cfgWordsCB(CFG_NEW);}
                  private tooltip {Insert the settings for a new configuration word.} image {./pixmaps/filenew.xpm} deimage {./pixmaps/filenew-desel.xpm} xywh {590 295 25 25} box FLAT_BOX align 16
                  code0 {o->hilighted_box(FL_THIN_UP_BOX);}
                  class Fl_RaiseButton
                }
                Fl_Group g_devConfigWordsNewEditCopy {open
                  xywh {590 320 25 50} deactivate
                } {
                  Fl_Button {} {
                    callback {if (ls_devConfigWords->value()>1) {
    g_devConfigWordsEdit->activate();
    g_devConfigWordsNewEditCopy->deactivate();
    cfgWordsCB(CFG_EDIT);
}}
                    private tooltip {Edit current configuration word settings.} image {./pixmaps/edit.xpm} deimage {./pixmaps/edit-desel.xpm} xywh {590 320 25 25} box FLAT_BOX align 16
                    code0 {o->hilighted_box(FL_THIN_UP_BOX);}
                    class Fl_RaiseButton
                  }
                  Fl_Button {} {
                    callback {if (ls_devConfigWords->value()>1) {
    g_devConfigWordsEdit->activate();
    g_devConfigWordsNewEditCopy->deactivate();
    cfgWordsCB(CFG_COPY);
}}
                    private tooltip {Clone current configuration word settings.} image {./pixmaps/editcopy.xpm} deimage {./pixmaps/editcopy-desel.xpm} xywh {590 345 25 25} box FLAT_BOX align 16
                    code0 {o->hilighted_box(FL_THIN_UP_BOX);}
                    class Fl_RaiseButton
                  }
                }
                Fl_Box {} {
                  label label
                  private xywh {590 371 25 3} box THIN_UP_BOX labeltype NO_LABEL
                }
                Fl_Button {} {
                  callback {if (cfgWordsCB(CFG_SAVE)) {
    g_devConfigWordsEdit->deactivate();
    g_devConfigWordsNewEditCopy->activate();
    g_devcfgwords->redraw();
}}
                  private tooltip {Save current configuration word settings.} image {./pixmaps/cfgsave.xpm} deimage {./pixmaps/cfgsave-desel.xpm} xywh {590 375 25 25} box FLAT_BOX align 16
                  code0 {o->hilighted_box(FL_THIN_UP_BOX);}
                  class Fl_RaiseButton
                }
                Fl_Button {} {
                  callback {if (cfgWordsCB(CFG_DELETE)) {
    g_devConfigWordsEdit->deactivate();
    g_devConfigWordsNewEditCopy->activate();
    g_devcfgwords->redraw();
}}
                  private tooltip {Remove the last configuration word in the list.} image {./pixmaps/editdelete.xpm} deimage {./pixmaps/editdelete-desel.xpm} xywh {590 405 25 25} box FLAT_BOX align 16
                  code0 {o->hilighted_box(FL_THIN_UP_BOX);}
                  class Fl_RaiseButton
                }
              }
            }
            Fl_Browser ls_devConfigWords {
              callback {cfgWordsCB(CFG_LOAD);}
              xywh {375 295 215 135} type Hold box DOWN_BOX textfont 4 textsize 12
              code0 {\#include <FL/Fl_Hold_Browser.H>}
              code1 {o->add("@u w\# | cw mask| cw save| cw defv| cp mask| cp all | cp none| dp mask| dp on  | dp off | bd mask| bd on  | bd off ");}
              class Fl_Hold_Browser
            }
          }
          Fl_Group {} {
            label {Misc.} open
            private xywh {370 160 250 275} hide
          } {
            Fl_Group g_devmiscellanea {open
              xywh {375 165 240 265} deactivate
            } {
              Fl_Check_Button tb_devExperimental {
                label Experimental
                xywh {375 165 240 20} down_box DOWN_BOX
              }
              Fl_Group {} {open
                xywh {375 185 240 40}
              } {
                Fl_Group {} {open
                  private xywh {375 205 240 20} box BORDER_BOX color 7
                } {
                  Fl_Input {} {
                    tooltip {Device ID value} xywh {455 205 80 20} labeltype NO_LABEL
                    code0 {tx_devParam[PAR_DEVICE_ID]=o;}
                  }
                  Fl_Input {} {
                    tooltip {Device ID mask} xywh {535 205 80 20} labeltype NO_LABEL
                    code0 {tx_devParam[PAR_DEVICE_ID_MASK]=o;}
                  }
                  Fl_Box {} {
                    label {Device ID}
                    private xywh {375 205 80 20} box BORDER_FRAME color 0 align 20
                  }
                }
                Fl_Group {} {open
                  private xywh {375 185 240 20} box BORDER_BOX color 41
                } {
                  Fl_Box {} {
                    label Value
                    private xywh {455 185 80 20} box BORDER_FRAME color 0 labelcolor 7
                  }
                  Fl_Box {} {
                    label Mask
                    private xywh {535 185 80 20} color 0 labelcolor 7
                  }
                }
              }
              Fl_Group {} {open
                xywh {375 230 240 40}
              } {
                Fl_Group {} {open
                  private xywh {375 250 240 20} box BORDER_BOX color 7
                } {
                  Fl_Input {} {
                    tooltip {Write buffer size} xywh {455 250 80 20} labeltype NO_LABEL
                    code0 {tx_devParam[PAR_WRITE_BUF_SIZE]=o;}
                  }
                  Fl_Input {} {
                    tooltip {Erase buffer size} xywh {535 250 80 20} labeltype NO_LABEL
                    code0 {tx_devParam[PAR_ERASE_BUF_SIZE]=o;}
                  }
                  Fl_Box {} {
                    label {Buffer Size}
                    private xywh {375 250 80 20} box BORDER_FRAME color 0 align 20
                  }
                }
                Fl_Group {} {open
                  private xywh {375 230 240 20} box BORDER_BOX color 41
                } {
                  Fl_Box {} {
                    label Write
                    private xywh {455 230 80 20} box BORDER_FRAME color 0 labelcolor 7
                  }
                  Fl_Box {} {
                    label Erase
                    private xywh {535 230 80 20} color 0 labelcolor 7
                  }
                }
              }
            }
          }
        }
      }
      Fl_Group t_progcfg {
        label Programmer open
        tooltip {Programmer Configuration} xywh {365 50 260 390} align 0 hide
      } {
        Fl_Group {} {open
          private xywh {370 55 250 25}
        } {
          Fl_Button {} {
            callback {programmerConfigCB(CFG_IMPORT);
ch_programmers->do_callback();
g_progcfg->deactivate();
g_progCfgNewEditCopy->activate();
t_progcfg->redraw();}
            private tooltip {Import the programmer settings from a file.} image {./pixmaps/cfgopen.xpm} deimage {./pixmaps/cfgopen-desel.xpm} xywh {370 55 25 25} box FLAT_BOX align 16
            code0 {o->hilighted_box(FL_THIN_UP_BOX);}
            class Fl_RaiseButton
          }
          Fl_Group g_progCfgNewEditCopy {open
            xywh {395 55 80 25}
          } {
            Fl_Button {} {
              callback {g_progcfg->activate();
g_progCfgNewEditCopy->deactivate();
programmerConfigCB(CFG_NEW);}
              private tooltip {Insert a new programmer.} image {./pixmaps/filenew.xpm} deimage {./pixmaps/filenew-desel.xpm} xywh {395 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {g_progcfg->activate();
g_progCfgNewEditCopy->deactivate();
programmerConfigCB(CFG_EDIT);}
              private tooltip {Edit current programmer settings.} image {./pixmaps/edit.xpm} deimage {./pixmaps/edit-desel.xpm} xywh {420 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {g_progcfg->activate();
g_progCfgNewEditCopy->deactivate();
programmerConfigCB(CFG_COPY);}
              private tooltip {Clone current programmer settings.} image {./pixmaps/editcopy.xpm} deimage {./pixmaps/editcopy-desel.xpm} xywh {445 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
          }
          Fl_Box {} {
            label label
            private xywh {471 55 3 25} box THIN_UP_BOX labeltype NO_LABEL
          }
          Fl_Group g_pogStoreMGR {open
            xywh {475 55 145 25}
          } {
            Fl_Button {} {
              callback {if (programmerConfigCB(CFG_SAVE)) {
    g_progcfg->deactivate();
    g_progCfgNewEditCopy->activate();
    t_progcfg->redraw();
    ch_programmers->do_callback();
}}
              private tooltip {Save current programmer settings.} image {./pixmaps/cfgsave.xpm} deimage {./pixmaps/cfgsave-desel.xpm} xywh {475 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {if (programmerConfigCB(CFG_DELETE)) {
    g_progcfg->deactivate();
    g_progCfgNewEditCopy->activate();
    t_progcfg->redraw();
}}
              private tooltip {Remove/discard current programmer settings.} image {./pixmaps/editdelete.xpm} deimage {./pixmaps/editdelete-desel.xpm} xywh {595 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
          }
        }
        Fl_Group g_progcfg {open
          xywh {370 85 250 350} deactivate
        } {
          Fl_Group {} {open
            private xywh {370 85 250 20}
          } {
            Fl_Input tx_programmerName {
              label {Programmer Name:}
              tooltip {The name of the programming device.} xywh {495 85 125 20}
            }
          }
          Fl_Group {} {open
            private xywh {370 115 250 200} align 129
          } {
            Fl_Group {} {open
              private xywh {370 115 250 20} box BORDER_BOX color 41
            } {
              Fl_Box {} {
                label {Pin Name}
                private xywh {370 115 170 20} box BORDER_FRAME color 0 labelcolor 7
              }
              Fl_Box {} {
                label Invert
                private xywh {540 115 40 20} color 0 labelcolor 7
              }
              Fl_Box {} {
                label {Pin \#}
                private xywh {580 115 40 20} box BORDER_FRAME color 0 labelcolor 7
              }
            }
            Fl_Group {} {open
              private tooltip {The pin used to control the clock signal.} xywh {370 135 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin used to control the clock signal.} xywh {550 135 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("icspClock")]=o;}
              }
              Fl_Choice {} {
                private xywh {580 135 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL when 1
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("icspClock")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {ICSP Clock}
                private tooltip {The pin used to control the clock signal.} xywh {370 135 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("icspClock")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin from which to read the data read from\\nthe programmed device.} xywh {370 155 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin from which to read the data read from the programmed device.} xywh {550 155 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("icspDataIn")]=o;}
              }
              Fl_Choice {} {
                callback {bx_pinName[GET_PIN_IDX("icspDataIn")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("icspDataIn")]->redraw();}
                private tooltip {The pin from which to read the data read from the programmed device.} xywh {580 155 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("icspDataIn")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {ICSP Data In}
                private tooltip {The pin from which to read the data read from the programmed device.} xywh {370 155 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("icspDataIn")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin used to send the command/data to\\nprogram the device.} xywh {370 175 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin used to send the command/data to program the device.} xywh {550 175 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("icspDataOut")]=o;}
              }
              Fl_Choice {} {
                callback {bx_pinName[GET_PIN_IDX("icspDataOut")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("icspDataOut")]->redraw();}
                private tooltip {The pin used to send the command/data to program the device.} xywh {580 175 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("icspDataOut")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {ICSP Data Out}
                private tooltip {The pin used to send the command/data to program the device.} xywh {370 175 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("icspDataOut")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin which controls the Vdd power on/off.} xywh {370 195 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin which controls the Vpp power on.} xywh {550 195 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("icspVddOn")]=o;}
              }
              Fl_Choice {} {
                callback {bx_pinName[GET_PIN_IDX("icspVddOn")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("icspVddOn")]->redraw();}
                private tooltip {The pin which controls the Vpp power on.} xywh {580 195 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("icspVddOn")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {A) ICSP Vdd On}
                private tooltip {The pin which controls the Vdd power on/off.} xywh {370 195 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("icspVddOn")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin which controls the Vpp power on/off.} xywh {370 215 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin which controls the Vpp power on/off.} xywh {550 215 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("icspVppOn")]=o;}
              }
              Fl_Choice {} {
                callback {bx_pinName[GET_PIN_IDX("icspVppOn")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("icspVppOn")]->redraw();}
                private tooltip {The pin which controls the Vpp power on/off.} xywh {580 215 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("icspVppOn")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {B) ICSP Vpp On}
                private tooltip {The pin which controls the Vpp power on/off.} xywh {370 215 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("icspVppOn")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin used to select the minimum value of Vdd.} xywh {370 235 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin used to select the minimum value of Vdd.} xywh {550 235 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("selMinVdd")]=o;}
              }
              Fl_Choice {} {
                callback {if (o->value()) {
    tb_vddMinCond [0]->value(1);
    tb_vddMinCond [0]->deactivate();
    tb_vddProgCond[0]->activate();
    tb_vddMaxCond [0]->activate();
} else {
    tb_vddMinCond [0]->value(0);
    tb_vddProgCond[0]->value(0);
    tb_vddMaxCond [0]->value(0);
    tb_vddMinCond [0]->deactivate();
    tb_vddProgCond[0]->deactivate();
    tb_vddMaxCond [0]->deactivate();
}
tb_vddMinCond [0]->redraw();
tb_vddProgCond[0]->redraw();
tb_vddMaxCond [0]->redraw();
bx_pinName[GET_PIN_IDX("selMinVdd")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("selMinVdd")]->redraw();}
                private tooltip {The pin used to select the minimum value of Vdd.} xywh {580 235 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL when 1
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("selMinVdd")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {C) Selects Minimum Vdd}
                private tooltip {The pin used to select the minimum value of Vdd.} xywh {370 235 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("selMinVdd")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin used to select the programming value\\nof Vdd.} xywh {370 255 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin used to select the programming value of Vdd.} xywh {550 255 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("selProgVdd")]=o;}
              }
              Fl_Choice {} {
                callback {if (o->value()) {
    tb_vddMinCond [1]->activate();
    tb_vddProgCond[1]->value(1);
    tb_vddProgCond[1]->deactivate();
    tb_vddMaxCond [1]->activate();
} else {
    tb_vddMinCond [1]->value(0);
    tb_vddProgCond[1]->value(0);
    tb_vddMaxCond [1]->value(0);
    tb_vddMinCond [1]->deactivate();
    tb_vddProgCond[1]->deactivate();
    tb_vddMaxCond [1]->deactivate();
}
tb_vddMinCond [1]->redraw();
tb_vddProgCond[1]->redraw();
tb_vddMaxCond [1]->redraw();
bx_pinName[GET_PIN_IDX("selProgVdd")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("selProgVdd")]->redraw();}
                private tooltip {The pin used to select the programming value of Vdd.} xywh {580 255 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL when 1
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("selProgVdd")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {D) Selects Program Vdd}
                private tooltip {The pin used to select the programming value of Vdd.} xywh {370 255 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("selProgVdd")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin used to select the maximum value of Vdd.} xywh {370 275 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin used to select the maximum value of Vdd.} xywh {550 275 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("selMaxVdd")]=o;}
              }
              Fl_Choice {} {
                callback {if (o->value()) {
    tb_vddMinCond [2]->activate();
    tb_vddProgCond[2]->activate();
    tb_vddMaxCond [2]->value(1);
    tb_vddMaxCond [2]->deactivate();
} else {
    tb_vddMinCond [2]->value(0);
    tb_vddProgCond[2]->value(0);
    tb_vddMaxCond [2]->value(0);
    tb_vddMinCond [2]->deactivate();
    tb_vddProgCond[2]->deactivate();
    tb_vddMaxCond [2]->deactivate();
}
tb_vddMinCond [2]->redraw();
tb_vddProgCond[2]->redraw();
tb_vddMaxCond [2]->redraw();
bx_pinName[GET_PIN_IDX("selMaxVdd")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("selMaxVdd")]->redraw();}
                private tooltip {The pin used to select the maximum value of Vdd.} xywh {580 275 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL when 1
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("selMaxVdd")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {E) Selects Maximum Vdd}
                private tooltip {The pin used to select the maximum value of Vdd.} xywh {370 275 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("selMaxVdd")]=o;}
              }
            }
            Fl_Group {} {open
              private tooltip {The pin used to select the value of Vpp.} xywh {370 295 250 20} box BORDER_BOX color 7
            } {
              Fl_Check_Button {} {
                private tooltip {The pin used to select the value of Vpp.} xywh {550 295 20 20} down_box DOWN_BOX align 4
                code0 {tb_pinInvert[GET_PIN_IDX("selVihhVpp")]=o;}
              }
              Fl_Choice {} {
                callback {if (o->value()) {
    tb_vppOffCond->activate();
} else {
    tb_vppOffCond->value(0);
    tb_vppOffCond->deactivate();
}
tb_vppOffCond->redraw();
bx_pinName[GET_PIN_IDX("selVihhVpp")]->color(FL_WHITE);
bx_pinName[GET_PIN_IDX("selVihhVpp")]->redraw();}
                private tooltip {The pin used to select the value of Vpp.} xywh {580 295 40 20} box NO_BOX down_box BORDER_BOX labeltype NO_LABEL when 1
                code0 {\#include <FL/Fl_Sorted_Choice.H>}
                code1 {ch_pinNumber[GET_PIN_IDX("selVihhVpp")]=o;}
                class Fl_Sorted_Choice
              } {}
              Fl_Box {} {
                label {F) Selects VIH/VIL Vpp}
                private tooltip {The pin used to select the value of Vpp (VIH~=13V; VIL=Vdd).} xywh {370 295 170 20} box BORDER_BOX color 7 align 20
                code0 {bx_pinName[GET_PIN_IDX("selVihhVpp")]=o;}
              }
            }
          }
          Fl_Group {} {open
            private xywh {370 325 250 110}
          } {
            Fl_Group {} {open
              private xywh {370 325 250 20}
            } {
              Fl_Box {} {
                label {Vdd=Vdd min.}
                private xywh {370 325 95 20} color 0 align 20
              }
              Fl_Box {} {
                label {if:}
                private xywh {465 325 15 20} align 20
              }
              Fl_Check_Button {tb_vddMinCond[0]} {
                label {C=}
                tooltip {Minimum Vdd Selected} xywh {510 325 20 20} down_box DOWN_BOX align 4 deactivate
              }
              Fl_Check_Button {tb_vddMinCond[1]} {
                label {D=}
                tooltip {Programming Vdd Selected} xywh {555 325 20 20} down_box DOWN_BOX align 4 deactivate
              }
              Fl_Check_Button {tb_vddMinCond[2]} {
                label {E=}
                tooltip {Maximum Vdd Selected} xywh {600 325 20 20} down_box DOWN_BOX align 4 deactivate
              }
            }
            Fl_Group {} {open
              private xywh {370 345 250 20}
            } {
              Fl_Box {} {
                label {Vdd=Vdd prg.}
                private xywh {370 345 95 20} color 0 align 20
              }
              Fl_Box {} {
                label {if:}
                private xywh {465 345 15 20} align 20
              }
              Fl_Check_Button {tb_vddProgCond[0]} {
                label {C=}
                tooltip {Minimum Vdd Selected} xywh {510 345 20 20} down_box DOWN_BOX align 4 deactivate
              }
              Fl_Check_Button {tb_vddProgCond[1]} {
                label {D=}
                tooltip {Programming Vdd Selected} xywh {555 345 20 20} down_box DOWN_BOX align 4 deactivate
              }
              Fl_Check_Button {tb_vddProgCond[2]} {
                label {E=}
                tooltip {Maximum Vdd Selected} xywh {600 345 20 20} down_box DOWN_BOX align 4 deactivate
              }
            }
            Fl_Group {} {open
              private xywh {370 365 250 20}
            } {
              Fl_Box {} {
                label {Vdd=Vdd max.}
                private xywh {370 365 95 20} color 0 align 20
              }
              Fl_Box {} {
                label {if:}
                private xywh {465 365 15 20} align 20
              }
              Fl_Check_Button {tb_vddMaxCond[0]} {
                label {C=}
                tooltip {Minimum Vdd Selected} xywh {510 365 20 20} down_box DOWN_BOX align 4 deactivate
              }
              Fl_Check_Button {tb_vddMaxCond[1]} {
                label {D=}
                tooltip {Programming Vdd Selected} xywh {555 365 20 20} down_box DOWN_BOX align 4 deactivate
              }
              Fl_Check_Button {tb_vddMaxCond[2]} {
                label {E=}
                tooltip {Maximum Vdd Selected} xywh {600 365 20 20} down_box DOWN_BOX align 4 deactivate
              }
            }
            Fl_Check_Button tb_vppOffCond {
              label {Set (F) OFF before setting (B) OFF}
              tooltip {Some programmers switch ICSP Vpp OFF by putting it to GND. Enabling this causes the disconnection of ICSP Vpp from VIHH before putting it to GND.} xywh {370 390 250 20} down_box DOWN_BOX deactivate
            }
            Fl_Check_Button tb_saVddVppControl {
              label {(B) can be set ON even if (A) is OFF}
              tooltip {The programming specifications for some devices (i.e. PIC12C5xx) require that ICSP Vpp rises to VIHH before the ICSP Vdd is ON. To allow this the programmer must control the ICSP Vdd and the ICSP Vpp independently from each other.} xywh {370 415 250 20} down_box DOWN_BOX
            }
          }
        }
      }
      Fl_Group t_settings {
        label Settings open
        xywh {365 50 260 390} hide
      } {
        Fl_Group {} {open
          private xywh {370 55 250 25}
        } {
          Fl_Button {} {
            callback {generalSettingsCB(CFG_IMPORT);
g_settings->deactivate();
g_settingsNewEditCopy->activate();
t_settings->redraw();}
            private tooltip {Import the general settings from a file.} image {./pixmaps/cfgopen.xpm} deimage {./pixmaps/cfgopen-desel.xpm} xywh {370 55 25 25} box FLAT_BOX align 16
            code0 {o->hilighted_box(FL_THIN_UP_BOX);}
            class Fl_RaiseButton
          }
          Fl_Group g_settingsNewEditCopy {open
            xywh {395 55 80 25}
          } {
            Fl_Button {} {
              callback {g_settings->activate();
g_settingsNewEditCopy->deactivate();
g_settingsStoreMGR->activate();
generalSettingsCB(CFG_NEW);}
              private image {./pixmaps/filenew.xpm} deimage {./pixmaps/filenew-desel.xpm} xywh {395 55 25 25} box FLAT_BOX align 16 deactivate
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {g_settings->activate();
g_settingsNewEditCopy->deactivate();
g_settingsStoreMGR->activate();
generalSettingsCB(CFG_EDIT);}
              private tooltip {Edit the general settings.} image {./pixmaps/edit.xpm} deimage {./pixmaps/edit-desel.xpm} xywh {420 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {g_settings->activate();
g_settingsNewEditCopy->deactivate();
g_settingsStoreMGR->activate();
generalSettingsCB(CFG_COPY);}
              private image {./pixmaps/editcopy.xpm} deimage {./pixmaps/editcopy-desel.xpm} xywh {445 55 25 25} box FLAT_BOX align 16 deactivate
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
          }
          Fl_Box {} {
            label label
            private xywh {471 55 3 25} box THIN_UP_BOX labeltype NO_LABEL
          }
          Fl_Group g_settingsStoreMGR {open
            xywh {475 55 145 25} deactivate
          } {
            Fl_Button {} {
              callback {if (generalSettingsCB(CFG_SAVE)) {
    g_settings->deactivate();
    g_settingsNewEditCopy->activate();
    g_settingsStoreMGR->deactivate();
    t_settings->redraw();
}}
              private tooltip {Save the general settings.} image {./pixmaps/cfgsave.xpm} deimage {./pixmaps/cfgsave-desel.xpm} xywh {475 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
            Fl_Button {} {
              callback {if (generalSettingsCB(CFG_DELETE)) {
    g_settings->deactivate();
    g_settingsNewEditCopy->activate();
    g_settingsStoreMGR->deactivate();
    t_settings->redraw();
}}
              private tooltip {Revert/reset the general settings.} image {./pixmaps/editdelete.xpm} deimage {./pixmaps/editdelete-desel.xpm} xywh {595 55 25 25} box FLAT_BOX align 16
              code0 {o->hilighted_box(FL_THIN_UP_BOX);}
              class Fl_RaiseButton
            }
          }
        }
        Fl_Group g_settings {open
          xywh {370 85 250 150} deactivate
        } {
          Fl_Group g_prop_delays {open
            xywh {370 85 250 150} box BORDER_FRAME color 0
          } {
            Fl_Input {} {
              label {Default:}
              tooltip {Default propagation delay on all signals} xywh {425 110 55 20}
              code0 {tx_propDelay[PD_DEFAULT]=o;}
            }
            Fl_Input {} {
              label {Additional:}
              tooltip {Additional propagation delay on all signals} xywh {555 110 60 20}
              code0 {tx_propDelay[PD_ADDITIONAL]=o;}
            }
            Fl_Group {} {open
              private xywh {370 135 250 100}
            } {
              Fl_Group {} {open
                private xywh {380 135 240 20} box BORDER_BOX color 41
              } {
                Fl_Box {} {
                  label All
                  private xywh {395 135 45 20} box BORDER_FRAME color 0 labelcolor 7
                }
                Fl_Box {} {
                  label Clk
                  private xywh {440 135 45 20} color 0 labelcolor 7
                }
                Fl_Box {} {
                  private xywh {380 135 15 20} box FLAT_BOX labelcolor 7
                }
                Fl_Box {} {
                  label Data
                  private xywh {485 135 45 20} box BORDER_FRAME color 0 labelcolor 7
                }
                Fl_Box {} {
                  label Vpp
                  private xywh {530 135 45 20} color 0 labelcolor 7
                }
                Fl_Box {} {
                  label Vdd
                  private xywh {575 135 45 20} box BORDER_FRAME color 0 labelcolor 7
                }
              }
              Fl_Group {} {open
                private xywh {370 155 250 20} box BORDER_BOX color 7
              } {
                Fl_Input {} {
                  private tooltip {Propagation delay on all read signals} xywh {395 155 45 20} type Float
                  code0 {tx_propDelay[PD_RD_ALL]=o;}
                }
                Fl_Input {} {
                  private tooltip {Propagation delay on Vdd read signals} xywh {575 155 45 20} type Float
                  code0 {tx_propDelay[PD_RD_VDD]=o;}
                }
                Fl_Box {} {
                  label R
                  private xywh {370 155 25 20} box BORDER_BOX color 7 align 16
                }
                Fl_Input {} {
                  private tooltip {Propagation delay on clock read signals} xywh {440 155 45 20} type Float
                  code0 {tx_propDelay[PD_RD_CLK]=o;}
                }
                Fl_Input {} {
                  private tooltip {Propagation delay on data read signals} xywh {485 155 45 20} type Float
                  code0 {tx_propDelay[PD_RD_DAT]=o;}
                }
                Fl_Input {} {
                  private tooltip {Propagation delay on Vpp read signals} xywh {530 155 45 20} type Float
                  code0 {tx_propDelay[PD_RD_VPP]=o;}
                }
              }
              Fl_Group {} {open
                private xywh {370 175 250 60} box BORDER_BOX color 7
              } {
                Fl_Group {} {open
                  xywh {395 175 225 20}
                } {
                  Fl_Input {} {
                    private tooltip {Propagation delay on all write signals} xywh {395 175 45 20} type Float
                    code0 {tx_propDelay[PD_WR_ALL]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on Vdd write signals} xywh {575 175 45 20} type Float
                    code0 {tx_propDelay[PD_WR_VDD]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on clock write signals} xywh {440 175 45 20} type Float
                    code0 {tx_propDelay[PD_WR_CLK]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on data write signals} xywh {485 175 45 20} type Float
                    code0 {tx_propDelay[PD_WR_DAT]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on Vpp write signals} xywh {530 175 45 20} type Float
                    code0 {tx_propDelay[PD_WR_VPP]=o;}
                  }
                }
                Fl_Box {} {
                  label w
                  private xywh {370 175 25 60} box BORDER_FRAME color 0 align 16
                }
                Fl_Group {} {open
                  xywh {395 195 225 20}
                } {
                  Fl_Input {} {
                    private tooltip {Propagation delay on Vdd write low to high signals transition} xywh {575 195 45 20} type Float
                    code0 {tx_propDelay[PD_LH_WR_VDD]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on clock write low to high signals transition} xywh {440 195 45 20} type Float
                    code0 {tx_propDelay[PD_LH_WR_CLK]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on data write low to high signals transition} xywh {485 195 45 20} type Float
                    code0 {tx_propDelay[PD_LH_WR_DAT]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on Vpp write low to high signals transition} xywh {530 195 45 20} type Float
                    code0 {tx_propDelay[PD_LH_WR_VPP]=o;}
                  }
                  Fl_Box {} {
                    label {L->H}
                    private xywh {395 195 45 20} box BORDER_FRAME color 0 align 16
                  }
                }
                Fl_Group {} {open
                  xywh {395 215 225 20}
                } {
                  Fl_Input {} {
                    private tooltip {Propagation delay on Vdd write high to low signals transition} xywh {575 215 45 20} type Float
                    code0 {tx_propDelay[PD_HL_WR_VDD]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on clock write high to low signals transition} xywh {440 215 45 20} type Float
                    code0 {tx_propDelay[PD_HL_WR_CLK]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on data write high to low signals transition} xywh {485 215 45 20} type Float
                    code0 {tx_propDelay[PD_HL_WR_DAT]=o;}
                  }
                  Fl_Input {} {
                    private tooltip {Propagation delay on Vpp write high to low signals transition} xywh {530 215 45 20} type Float
                    code0 {tx_propDelay[PD_HL_WR_VPP]=o;}
                  }
                  Fl_Box {} {
                    label {H->L}
                    private xywh {395 215 45 20} box BORDER_BOX color 7 align 16
                  }
                }
              }
            }
            Fl_Box {} {
              label {Propagation delays (nS)}
              xywh {370 85 250 20} box BORDER_BOX color 41
            }
          }
        }
      }
    }
    Fl_Group {} {open
      private xywh {-2 -2 634 22} box ENGRAVED_BOX
    } {
      Fl_Menu_Bar mb_menuBar {open
        private xywh {-2 -2 634 20} box FLAT_BOX
      } {
        Submenu {} {
          label {&File} open
          private xywh {0 0 100 20}
        } {
          MenuItem mi_open {
            label {&Open HEX file...}
            callback {loadHexFile();}
            xywh {0 0 100 20} shortcut 0x4006f deactivate
          }
          MenuItem mi_save {
            label {&Save HEX file...}
            callback {saveHexFile();}
            xywh {0 0 100 20} shortcut 0x40073 deactivate divider
          }
          MenuItem {} {
            label {&Quit}
            callback {delete flP5;}
            private xywh {0 0 100 20} shortcut 0x40071
          }
        }
        Submenu sm_settings {
          label {&Settings} open
          private xywh {0 0 100 20}
        } {
          Submenu sm_ppNumber {
            label {Parallel port} open
            xywh {15 15 100 20}
          } {
            MenuItem {} {
              label {lp0: address ...}
              callback {app.set("portNumber",0);
ch_programmers->do_callback();}
              private xywh {15 15 100 20} type Radio shortcut 0x40030
            }
            MenuItem {} {
              label {lp1: address ...}
              callback {app.set("portNumber",1);
ch_programmers->do_callback();}
              private xywh {25 25 100 20} type Radio shortcut 0x40031
            }
            MenuItem {} {
              label {lp2: address ...}
              callback {app.set("portNumber",2);
ch_programmers->do_callback();}
              private xywh {35 35 100 20} type Radio shortcut 0x40032
            }
            MenuItem {} {
              label {lp3: address ...}
              callback {app.set("portNumber",3);
ch_programmers->do_callback();}
              private xywh {45 45 100 20} type Radio shortcut 0x40033
            }
            MenuItem {} {
              label {lp4: address ...}
              callback {app.set("portNumber",4);
ch_programmers->do_callback();}
              private xywh {55 55 100 20} type Radio shortcut 0x40034
            }
          }
          Submenu sm_ppAccessMethod {
            label {Port access method} open
            xywh {20 20 100 20}
          } {
            MenuItem direct_pp {
              label {Direct PP}
              callback {app.set("portAccessMethod",0);
ch_programmers->do_callback();}
              private xywh {60 60 100 20} type Radio shortcut 0x40064
            }
            MenuItem linux_pp_dev {
              label {Linux PP dev}
              callback {app.set("portAccessMethod",1);
ch_programmers->do_callback();}
              private xywh {50 50 100 20} type Radio shortcut 0x40073
            }
            MenuItem linux_gpio {
              label {Linux GPIO}
              callback {app.set("portAccessMethod",2);
ch_programmers->do_callback();}
              private xywh {40 40 100 20} type Radio shortcut 0x40067
            }
          }
        }
        Submenu sm_operations {
          label {&Operations} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {&Calibrate}
            callback {processOperation(CHIP_CALIBRATE);}
            private xywh {10 10 100 20} shortcut 0x80063 divider
          }
          MenuItem {} {
            label {&Read}
            callback {processOperation(CHIP_READ);}
            private xywh {0 0 100 20} shortcut 0x80072
          }
          MenuItem {} {
            label {&Erase}
            callback {processOperation(CHIP_ERASE);}
            private xywh {0 0 100 20} shortcut 0x80065
          }
          MenuItem {} {
            label {&Blank check}
            callback {processOperation(CHIP_BLANCK_CHECK);}
            private xywh {0 0 100 20} shortcut 0x80062
          }
          MenuItem {} {
            label {&Write}
            callback {processOperation(CHIP_WRITE);}
            private xywh {0 0 100 20} shortcut 0x80077
          }
          MenuItem {} {
            label {&Verify}
            callback {processOperation(CHIP_VERIFY);}
            private xywh {0 0 100 20} shortcut 0x80076
          }
        }
        Submenu {} {
          label {&Help} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {&Manual...}
            callback {showManual();}
            xywh {0 0 100 20} shortcut 0xffbe
          }
          MenuItem {} {
            label {&About flP5...}
            callback {make_copyright_window(copyrightText);}
            xywh {0 0 100 20}
          }
        }
      }
    }
    Fl_Progress p_progress {
      xywh {35 420 325 20} box THIN_DOWN_BOX color 49 selection_color 3 labelfont 4 labelsize 12 align 20
    }
    Fl_Group {} {open
      private xywh {0 25 360 20}
    } {
      Fl_Choice ch_devices {
        label {Dev:}
        callback {if (deviceConfigCB(CFG_LOAD)) {
    currentDevice = o->value();
    if (
        currentDevice>=0 &&
        currentProgrammer>=0
    ) {
        p_toolbar->activate();
        mi_open->activate();
        mi_save->activate();
        sm_operations->activate();
        dumpHexFile(true);
    }
} else {
    p_toolbar->deactivate();
    mi_open->deactivate();
    mi_save->deactivate();
    sm_operations->deactivate();
}
mb_menuBar->redraw();} open
        xywh {35 25 150 20} down_box BORDER_BOX when 6
        code0 {\#include <FL/Fl_Sorted_Choice.H>}
        code1 {o->item_pixmap(mini_device);}
        code2 {// o->folder_pixmap(mini_folder);}
        class Fl_Sorted_Choice
      } {}
      Fl_Choice ch_programmers {
        label {Prog:}
        callback {if (programmerConfigCB(CFG_LOAD)) {
    currentProgrammer = o->value();
    if (
        currentDevice>=0 &&
        currentProgrammer>=0
    ) {
        p_toolbar->activate();
        mi_open->activate();
        mi_save->activate();
        sm_operations->activate();
    }
} else {
    p_toolbar->deactivate();
    mi_open->deactivate();
    mi_save->deactivate();
    sm_operations->deactivate();
}
mb_menuBar->redraw();} open
        xywh {225 25 135 20} down_box BORDER_BOX
        code0 {\#include <FL/Fl_Sorted_Choice.H>}
        code1 {o->item_pixmap(mini_programmer);}
        code2 {// o->folder_pixmap(mini_folder);}
        class Fl_Sorted_Choice
      } {}
    }
    Fl_Browser ls_memdump {
      xywh {35 50 325 365} textfont 4 textsize 12
      code0 {o->has_scrollbar(Fl_Browser_::BOTH_ALWAYS);}
    }
    Fl_Pack p_toolbar {open
      xywh {0 50 36 365}
    } {
      Fl_Button {} {
        callback {loadHexFile();}
        private tooltip {Load an HEX file to the memory buffer.} image {./pixmaps/fileopen.xpm} deimage {./pixmaps/fileopen-desel.xpm} xywh {0 50 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Button {} {
        callback {saveHexFile();}
        private tooltip {Save the memory buffer to an HEX file.} image {./pixmaps/filesave.xpm} deimage {./pixmaps/filesave-desel.xpm} xywh {0 85 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Box {} {
        private xywh {0 121 35 3} box THIN_UP_BOX labeltype NO_LABEL
      }
      Fl_Button {pb_operation[0]} {
        callback {processOperation(CHIP_READ);}
        tooltip {Load the content of the Device memory into the memory buffer.} image {./pixmaps/read_pic.xpm} deimage {./pixmaps/read_pic-desel.xpm} xywh {0 125 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Button {pb_operation[1]} {
        callback {processOperation(CHIP_ERASE);}
        tooltip {Erase the content of the Device memory.} image {./pixmaps/erase_pic.xpm} deimage {./pixmaps/erase_pic-desel.xpm} xywh {0 160 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Button {pb_operation[2]} {
        callback {processOperation(CHIP_BLANCK_CHECK);}
        tooltip {Perform a blanck check of the Device memory.} image {./pixmaps/check_pic.xpm} deimage {./pixmaps/check_pic-desel.xpm} xywh {0 195 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Button {pb_operation[3]} {
        callback {processOperation(CHIP_WRITE);}
        tooltip {Load the content of the memory buffer into the Device memory.} image {./pixmaps/write_pic.xpm} deimage {./pixmaps/write_pic-desel.xpm} xywh {0 230 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Button {pb_operation[4]} {
        callback {processOperation(CHIP_VERIFY);}
        tooltip {Compare the content of the Device's memory with the content of the memory buffer.} image {./pixmaps/verify_pic.xpm} deimage {./pixmaps/verify_pic-desel.xpm} xywh {0 265 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Box {} {
        private xywh {0 301 35 3} box THIN_UP_BOX labeltype NO_LABEL
      }
      Fl_Button {pb_operation[5]} {
        callback {if (o->value()) {
    for (int i=PB_OPER_FIRST; i<PB_NONE; i++) {
        if (i != PB_TEST) {
            pb_operation[i]->deactivate();
        }
    }
    pb_operation[PB_RESET]->activate();
    if (!processOperation(CHIP_TEST_ON)) {
        o->value(0);
        o->do_callback();
    }
} else {
    for (int i=PB_OPER_FIRST; i<PB_NONE; i++) {
        if (i != PB_TEST) {
            pb_operation[i]->activate();
        }
    }
    pb_operation[PB_RESET]->deactivate();
    processOperation(CHIP_TEST_OFF);
}}
        tooltip {Switch on/off the Vdd line to enter in the On Circuit Test mode.} image {./pixmaps/test_pic.xpm} deimage {./pixmaps/test_pic-desel.xpm} xywh {0 305 35 35} type Toggle box FLAT_BOX down_box PLASTIC_THIN_DOWN_BOX selection_color 3 align 80 when 1
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Button {pb_operation[6]} {
        callback {processOperation (
    o->value()
        ? CHIP_TEST_RESET_ON
        : CHIP_TEST_RESET_OFF
);}
        tooltip {Put the Vpp line to GND to reset the device.} image {./pixmaps/test_pic_reset.xpm} deimage {./pixmaps/test_pic_reset-desel.xpm} xywh {1 340 35 35} box FLAT_BOX align 16 when 1 deactivate
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
      Fl_Box {} {
        private xywh {0 376 35 3} box THIN_UP_BOX labeltype NO_LABEL
      }
      Fl_Button {pb_operation[7]} {
        callback {processOperation(CHIP_CALIBRATE);}
        tooltip {Start programmer calibration procedure.} image {./pixmaps/calibrate.xpm} deimage {./pixmaps/calibrate-desel.xpm} xywh {0 380 35 35} box FLAT_BOX align 16
        code0 {o->hilighted_box(FL_THIN_UP_BOX);}
        class Fl_RaiseButton
      }
    }
  }
  code {loadPreferences();

flP5->position (
    (Fl::w()/2 - flP5->w()/2),
    (Fl::h()/2 - flP5->h()/2)
);


make_report_window();} {}
} 

Function {make_calibration_window(bool force,const char *devname,double vppmin,double vppmax,double vddpmin,double vddpmax,double vddmin,double vddmax)} {open return_type bool
} {
  code {static char cvppmin[10],
            cvppmax[10],
            cvddpmin[10],
            cvddpmax[10],
            cvddmin[10],
            cvddmax[10];

bool proceed = false;

sprintf(cvppmin,"%4.2lf",vppmin);
sprintf(cvppmax,"%4.2lf",vppmax);
sprintf(cvddpmin,"%4.2lf",vddpmin);
sprintf(cvddpmax,"%4.2lf",vddpmax);
sprintf(cvddmin,"%4.2lf",vddmin);
sprintf(cvddmax,"%4.2lf",vddmax);} {}
  Fl_Window w_calibration {
    label {flP5 - Programmer Calibration} open
    xywh {1311 324 300 200} type Double modal visible
  } {
    Fl_Box {} {
      label {Programmer Calibration}
      private xywh {0 0 300 35} labeltype EMBOSSED_LABEL labelfont 1 labelsize 24 labelcolor 1
    }
    Fl_Wizard wz_calibration {open
      xywh {5 35 290 130} box NO_BOX color 3
    } {
      Fl_Group g_warning {open
        xywh {5 35 290 130} box PLASTIC_UP_BOX color 3
      } {
        Fl_Group {} {open
          private xywh {15 50 270 55} box PLASTIC_DOWN_BOX color 3
        } {
          Fl_Box {} {
            label OOOOOOOO
            private xywh {20 55 260 45} box DOWN_BOX labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 144
            code0 {o->label(devname);}
          }
        }
        Fl_Box {} {
          label {WARNING: DISCONNECT THE CHIP FROM THE ZIF OR ICSP SOCKET}
          private xywh {15 110 270 45} box PLASTIC_THIN_DOWN_BOX color 3 labeltype ENGRAVED_LABEL labelfont 1 labelsize 16 labelcolor 41 align 144
        }
        Fl_Box {} {
          label {flP5 Digital Voltmeter}
          private xywh {150 40 135 10} labelfont 14 labelsize 10 align 24
        }
      }
      Fl_Group g_vpp {
        callback {pb_calCancel->hide();
pb_calSkip->hide();
pb_calPrec->show();
pb_calPrec->label("@<");
pb_calPrec->deactivate();
if (!io->production()) {
    pb_calNext->label("Vdd Write/Prog. @>");
} else {
    pb_calNext->label("Vdd Maximum @>");
}
io->vdd(IO::VDD_TO_OFF);
io->vdd(IO::VDD_TO_PRG);
io->vpp(IO::VPP_TO_VIH);} open
        xywh {5 35 290 130} box PLASTIC_UP_BOX color 3 hide
      } {
        Fl_Box {} {
          label {Vpp VIHH}
          private xywh {10 115 280 40} labeltype ENGRAVED_LABEL labelfont 1 labelsize 34 labelcolor 41
        }
        Fl_Group {} {open
          private xywh {15 50 270 55} box PLASTIC_DOWN_BOX color 3
        } {
          Fl_Group {} {open
            private xywh {20 55 260 45} box DOWN_BOX
          } {
            Fl_Box {} {
              label {12.75}
              private xywh {20 55 115 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 24
              code0 {o->label(cvppmin);}
            }
            Fl_Box {} {
              label {13.25}
              private xywh {165 55 115 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 24
              code0 {o->label(cvppmax);}
            }
            Fl_Box {} {
              label {-}
              private xywh {135 55 30 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 17
            }
          }
        }
        Fl_Box {} {
          label {flP5 Digital Voltmeter}
          private xywh {150 40 135 10} labelfont 14 labelsize 10 align 24
        }
      }
      Fl_Group g_vddmax {
        callback {pb_calPrec->label("@< Vpp VIHH");
pb_calPrec->activate();
pb_calNext->label("Vdd Write/Prog. @>");
io->vdd(IO::VDD_TO_MAX);
io->vdd(IO::VDD_TO_ON);
io->vpp(IO::VPP_TO_VDD);} open
        xywh {5 35 290 130} box PLASTIC_UP_BOX color 3 align 8 hide
      } {
        Fl_Box {} {
          label {Vdd Maximum}
          private xywh {10 115 280 40} labeltype ENGRAVED_LABEL labelfont 1 labelsize 34 labelcolor 41 align 128
        }
        Fl_Group {} {open
          private xywh {15 50 270 55} box PLASTIC_DOWN_BOX color 3
        } {
          Fl_Group {} {open
            private xywh {20 55 260 45} box DOWN_BOX
          } {
            Fl_Box {} {
              label {5.25}
              private xywh {20 55 260 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 24
              code0 {o->label(cvddmax);}
            }
          }
        }
        Fl_Box {} {
          label {flP5 Digital Voltmeter}
          private xywh {150 40 135 10} labelfont 14 labelsize 10 align 24
        }
      }
      Fl_Group g_vddp {
        callback {if (!io->production()) {
    pb_calPrec->label("@< Vpp VIHH");
    pb_calNext->label("Finish @>");
} else {
    pb_calPrec->label("@< Vdd Maximum");
    pb_calNext->label("Vdd Minimum @>");
}
pb_calPrec->activate();
io->vdd(IO::VDD_TO_PRG);
io->vdd(IO::VDD_TO_ON);
io->vpp(IO::VPP_TO_VDD);} open
        xywh {5 35 290 130} box PLASTIC_UP_BOX color 3 hide
      } {
        Fl_Box {} {
          label {Vdd Write/Prog.}
          private xywh {10 115 280 40} labeltype ENGRAVED_LABEL labelfont 1 labelsize 34 labelcolor 41
        }
        Fl_Group {} {open
          private xywh {15 50 270 55} box PLASTIC_DOWN_BOX color 3
        } {
          Fl_Group {} {open
            private xywh {20 55 260 45} box DOWN_BOX
          } {
            Fl_Box {} {
              label {12.75}
              private xywh {20 55 115 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 24
              code0 {o->label(cvddpmin);}
            }
            Fl_Box {} {
              label {13.25}
              private xywh {165 55 115 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 24
              code0 {o->label(cvddpmax);}
            }
            Fl_Box {} {
              label {-}
              private xywh {135 55 30 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 17
            }
          }
        }
        Fl_Box {} {
          label {flP5 Digital Voltmeter}
          private xywh {150 40 135 10} labelfont 14 labelsize 10 align 24
        }
      }
      Fl_Group g_vddmin {
        callback {pb_calPrec->label("@< Vdd Write/Prog.");
pb_calPrec->activate();
pb_calNext->label("Finish @>");
io->vdd(IO::VDD_TO_MIN);
io->vdd(IO::VDD_TO_ON);
io->vpp(IO::VPP_TO_VDD);} open
        xywh {5 35 290 130} box PLASTIC_UP_BOX color 3 hide
      } {
        Fl_Box {} {
          label {Vdd Minimum}
          private xywh {10 115 280 40} labeltype ENGRAVED_LABEL labelfont 1 labelsize 34 labelcolor 41
        }
        Fl_Group {} {open
          private xywh {15 50 270 55} box PLASTIC_DOWN_BOX color 3
        } {
          Fl_Group {} {open
            private xywh {20 55 260 45} box DOWN_BOX
          } {
            Fl_Box {} {
              label {5.25}
              private xywh {20 55 260 45} labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 24
              code0 {o->label(cvddmin);}
            }
          }
        }
        Fl_Box {} {
          label {flP5 Digital Voltmeter}
          private xywh {150 40 135 10} labelfont 14 labelsize 10 align 24
        }
      }
      Fl_Group g_calFinish {
        callback {io->vpp(IO::VPP_TO_GND);
io->vdd(IO::VDD_TO_OFF);
pb_calPrec->label("@<");
pb_calPrec->deactivate();
pb_calNext->label("Done @>");} open
        xywh {5 35 290 130} box PLASTIC_UP_BOX color 3 hide
      } {
        Fl_Group {} {open
          private xywh {15 50 270 55} box PLASTIC_DOWN_BOX color 3
        } {
          Fl_Box {} {
            label FINISH
            private xywh {20 55 260 45} box DOWN_BOX labeltype SHADOW_LABEL labelfont 5 labelsize 36 labelcolor 36 align 145
          }
        }
        Fl_Box {} {
          label {flP5 Digital Voltmeter}
          private xywh {150 40 135 10} labelfont 14 labelsize 10 align 24
        }
        Fl_Box {} {
          label {NOW YOU CAN (RE)CONNECT THE CHIP INTO THE ZIF/ICSP SOCKET}
          private xywh {10 115 280 40} labeltype ENGRAVED_LABEL labelfont 1 labelsize 16 labelcolor 41 align 145
        }
      }
    }
    Fl_Button pb_calNext {
      label {Vpp VIHH @>}
      user_data {&proceed} user_data_type {bool *}
      callback {if (!io->production() && wz_calibration->value()==g_vddp) {
    wz_calibration->value(g_calFinish);
    wz_calibration->value()->do_callback();
} else if (!io->production() && wz_calibration->value()==g_vpp) {
    wz_calibration->value(g_vddp);
    wz_calibration->value()->do_callback();
} else if (wz_calibration->value()==g_calFinish) {
    wz_calibration->value(g_warning);
    *v = true;
    w_calibration->hide();
} else {
    wz_calibration->next();
    wz_calibration->value()->do_callback();
}}
      xywh {150 170 145 25} box ENGRAVED_BOX labelfont 1 align 24
    }
    Fl_Button pb_calCancel {
      label {@< Cancel}
      user_data {&proceed} user_data_type {bool *}
      callback {if (wz_calibration->value()==g_warning) {
    wz_calibration->value(g_warning);
    *v = false;
    w_calibration->hide();
}}
      tooltip {Cancel current operation.} xywh {5 170 145 25} box ENGRAVED_BOX labelfont 1 align 20
    }
    Fl_Button pb_calSkip {
      label {Skip @>}
      user_data {&proceed} user_data_type {bool *}
      callback {if (wz_calibration->value()==g_warning) {
    wz_calibration->value(g_warning);
    *v = true;
    w_calibration->hide();
}}
      tooltip {Skip calibration. Perform operation.} xywh {80 170 70 25} box ENGRAVED_BOX labelfont 1 align 24 hide
    }
    Fl_Button pb_calPrec {
      label {@<}
      user_data {&proceed} user_data_type {bool *}
      callback {if (!io->production() && wz_calibration->value()==g_vddp) {
    wz_calibration->value(g_vpp);
    wz_calibration->value()->do_callback();
} else if (wz_calibration->value()==g_warning) {
    wz_calibration->value(g_warning);
    *v = false;
    w_calibration->hide();
} else {
    wz_calibration->prev();
    wz_calibration->value()->do_callback();
}}
      xywh {5 170 145 25} box ENGRAVED_BOX labelfont 1 align 20 hide
    }
  }
  code {pb_calCancel->show();
// pb_calSkip->show();
pb_calPrec->hide();
// if (force) {
//     pb_calSkip->deactivate();
// }
w_calibration->position (
    flP5->x() + (flP5->w()/2 - w_calibration->w()/2),
    flP5->y() + (flP5->h()/2 - w_calibration->h()/2)
);
w_calibration->show();

while (w_calibration->visible()) {
    Fl::wait();
}

delete w_calibration;

return proceed;} {
    callback {wz_calibration->prev();
wz_calibration->value()->do_callback();}
  }
} 

Function {make_report_window(void)} {open
} {
  code {if (w_report) {
    return w_report;
}} {}
  Fl_Window w_report {
    label {flP5 - Import Report} open
    xywh {467 656 300 200} type Double hide modal
  } {
    Fl_Button pb_discard {
      label Discard
      callback {load_item = false;
w_report->hide();}
      xywh {5 170 140 25}
    }
    Fl_Return_Button pb_load {
      label Load
      callback {load_item = true;
w_report->hide();}
      xywh {155 170 140 25}
    }
    Fl_Browser ls_report {
      label {Device: Microchip/PIC/PIC16F877}
      xywh {5 20 290 145} labelfont 1 labelsize 16 align 5 textfont 4
    }
  }
  code {w_report->hide();} {}
} 

Function {make_copyright_window(const char *copyright)} {open
} {
  Fl_Window w_copyright {
    label {flP5 Copyright} open
    xywh {49 621 350 350} type Double hide modal
  } {
    Fl_Return_Button {} {
      label OK
      callback {w_copyright->hide();
delete w_copyright;
w_copyright = 0;}
      xywh {5 320 340 25} labelfont 1
    }
    Fl_Help_View {} {
      xywh {5 5 340 310} box THIN_DOWN_BOX
      code0 {o->value(copyright);}
    }
  }
  code {w_copyright->position (
    flP5->x() + (flP5->w()/2 - w_copyright->w()/2),
    flP5->y() + (flP5->h()/2 - w_copyright->h()/2)
);
w_copyright->show();

// while (w_copyright->visible()) {
//     Fl::wait();
// }
//
// delete w_copyright;
// w_copyright = 0;} {}
} 

Function {show_report_window(const char *title)} {open return_type bool
} {
  code {ls_report->label(title);
w_report->position (
    flP5->x() + (flP5->w()/2 - w_report->w()/2),
    flP5->y() + (flP5->h()/2 - w_report->h()/2)
);
w_report->show();

while (w_report->visible()) {
    Fl::wait();
}
return load_item;} {}
} 

Function {make_regcheck_window(void)} {open return_type void
} {
  code {\#if defined(CHECK_REGISTRATION)

int transactionCode, registrationKey;

if (
    app.get("transactionCode",transactionCode,0) &&
    app.get("registrationKey",registrationKey,0) &&
    checkRegistration(transactionCode,registrationKey)
) {
    return;
}} {}
  Fl_Window w_regcheck {
    label {flP5 - Registration} open
    xywh {357 95 300 200} type Double box UP_BOX hide modal noborder
  } {
    Fl_Group g_regform {open
      xywh {5 80 290 115}
    } {
      Fl_Button pb_reglater {
        label {Register Later}
        callback {w_regcheck->hide();}
        xywh {5 170 140 25}
      }
      Fl_Return_Button pb_regnow {
        label {Register Now}
        callback {\#if defined(CHECK_REGISTRATION)
int prodCode, regKey;

if (
    sscanf(tx_paypal_code->value(),"%x",&prodCode)==1 &&
    sscanf(tx_reg_key->value(),"%x",&regKey)==1 &&
    checkRegistration(prodCode,regKey)
) {
    app.set("transactionCode",prodCode);
    app.set("registrationKey",regKey);
    w_regcheck->hide();
} else {
    fl_beep(FL_BEEP_ERROR);
}
\#endif}
        xywh {155 170 140 25}
      }
      Fl_Input tx_paypal_code {
        label {Product Code:}
        xywh {5 105 290 20} align 5
      }
      Fl_Input tx_reg_key {
        label {Registration Key:}
        xywh {5 145 290 20} align 5
      }
      Fl_Box {} {
        xywh {5 82 290 2} box DOWN_BOX labeltype NO_LABEL
      }
    }
    Fl_Box {} {
      label {The program is not registered}
      xywh {5 5 290 25} box BORDER_BOX color 40 labeltype SHADOW_LABEL labelfont 1 labelsize 20 labelcolor 7
    }
    Fl_Box bx_countdown {
      label 99
      xywh {5 80 290 115} box FLAT_BOX labeltype SHADOW_LABEL labelfont 1 labelsize 100 labelcolor 1 align 18 hide
    }
    Fl_Box {} {
      label {To make this window disappear definitely, at the end of the countdown, please insert a valid product code and registration key pair.}
      xywh {5 30 290 50} align 128
    }
  }
  code {w_regcheck->position (
    flP5->x() + (flP5->w()/2 - w_regcheck->w()/2),
    flP5->y() + (flP5->h()/2 - w_regcheck->h()/2)
);
g_regform->hide();
bx_countdown->label("--");
bx_countdown->show();
w_regcheck->show();

Fl::add_timeout(1.0,registrationCountDown,(void*)30);

while (w_regcheck->visible()) {
    Fl::wait();
}

delete w_regcheck;

\#endif // CHECK_REGISTRATION} {}
} 

Function {registrationCountDown(void *count)} {open return_type void
} {
  code {intptr_t remain = (intptr_t)count;
static char scount[3];

sprintf(scount,"%2d",remain);
bx_countdown->label(scount);
remain--;
if (remain) {
    Fl::add_timeout(1.0,registrationCountDown,(void *)remain);
} else {
    bx_countdown->hide();
    g_regform->show();
}} {}
} 
